---
resource_types:
- name: pivnet
  type: docker-image
  source:
    repository: pivotalcf/pivnet-resource
    tag: latest-final
resources:
# triggers
- name: daily-trigger
  type: time
  source:
    interval: 24h

- name: one-time-trigger
  type: time
  source:
    interval: 999999h

#- name: after-midnight
#  type: time
#  source:
#    start: 12:00 AM
#    stop: 6:00 AM
#    interval: 24h
#    location: Europe/Berlin 

### opsman ends 

- name: installation
  #icon: amazon-drive
  type: s3
  source:
    access_key_id: ((access_key_id))
    bucket: ((buckets_installation))
    endpoint:  ((s3_endpoint))
    region_name: ((s3_region_name))
    secret_access_key: ((secret_access_key))
    regexp: ((foundation))/installation-(.*).zip    
- name: platform-automation-pivnet
  type: pivnet
  source:
    api_token: ((pivnet_token))
    product_slug: platform-automation
    product_version: 3\.0\.(.*)
    sort_by: semver

- name: platform-automation-tasks
  #icon: amazon-drive
  type: s3
  source:
    access_key_id: ((access_key_id))
    bucket: ((buckets_pivnet_tasks))
    endpoint:  ((s3_endpoint))
    region_name: ((s3_region_name))
    secret_access_key: ((secret_access_key))
    regexp: platform-automation-tasks-(.*).zip
- name: pas-product
  #icon: amazon-drive
  type: s3
  source:
    access_key_id: ((access_key_id))
    bucket: ((buckets_pivnet_products))
    endpoint:  ((s3_endpoint))
    secret_access_key: ((secret_access_key))
    regexp: pas-product/\[elastic-runtime,(.*)\]cf-.*.pivotal
- name: platform-automation-image
  #icon: amazon-drive
  type: s3
  source:
    access_key_id: ((access_key_id))
    bucket: ((buckets_pivnet_image))
    endpoint:  ((s3_endpoint))
    region_name: ((s3_region_name))
    secret_access_key: ((secret_access_key))
    regexp: platform-automation-image-(.*).tgz

- name: pas-windows-product
  #icon: amazon-drive
  type: s3
  source:
    access_key_id: ((access_key_id))
    bucket: ((buckets_pivnet_products))
    endpoint:  ((s3_endpoint))
    region_name: ((s3_region_name))
    secret_access_key: ((secret_access_key))
    regexp: pas-windows-product/\[pas-windows,(.*)\]pas-windows-.*.pivotal

- name: srt-product
  #icon: amazon-drive
  type: s3
  source:
    access_key_id: ((access_key_id))
    bucket: ((buckets_pivnet_products))
    endpoint:  ((s3_endpoint))
    secret_access_key: ((secret_access_key))
    regexp: srt-product/\[elastic-runtime,(.*)\]srt-.*.pivotal

- name: p-spring-cloud-services-product
  #icon: amazon-drive
  type: s3
  source:
    access_key_id: ((access_key_id))
    bucket: ((buckets_pivnet_products))
    endpoint:  ((s3_endpoint))
    region_name: ((s3_region_name))
    secret_access_key: ((secret_access_key))
    regexp: p-spring-cloud-services-product/\[p-spring-cloud-services,(.*)\]p-spring-cloud-services-.*.pivotal

- name: p-spring-cloud-services-3-product
  #icon: amazon-drive
  type: s3
  source:
    access_key_id: ((access_key_id))
    bucket: ((buckets_pivnet_products))
    endpoint:  ((s3_endpoint))
    region_name: ((s3_region_name))
    secret_access_key: ((secret_access_key))
    regexp: p-spring-cloud-services-3-product/\[p-spring-cloud-services,(.*)\]p_spring-cloud-services-.*.pivotal


- name: p-rabbitmq-product
  #icon: amazon-drive
  type: s3
  source:
    access_key_id: ((access_key_id))
    bucket: ((buckets_pivnet_products))
    endpoint:  ((s3_endpoint))
    region_name: ((s3_region_name))
    secret_access_key: ((secret_access_key))
    regexp: p-rabbitmq-product/\[p-rabbitmq,(.*)\]p-rabbitmq-.*.pivotal

- name: pivotal-mysql-product
  #icon: amazon-drive
  type: s3
  source:
    access_key_id: ((access_key_id))
    bucket: ((buckets_pivnet_products))
    endpoint:  ((s3_endpoint))
    region_name: ((s3_region_name))
    secret_access_key: ((secret_access_key))
    regexp: pivotal-mysql-product/\[pivotal-mysql,(.*)\]pivotal-mysql-.*.pivotal




- name: pas-stemcell
  #icon: amazon-drive
  type: s3
  source:
    access_key_id: ((access_key_id))
    bucket: ((buckets_pivnet_products))
    endpoint:  ((s3_endpoint))
    region_name: ((s3_region_name))
    secret_access_key: ((secret_access_key))
    regexp: pas-stemcell/\[stemcells-ubuntu-xenial,(.*)\]bosh-stemcell-.*-azure.*\.tgz
- name: srt-stemcell
  #icon: amazon-drive
  type: s3
  source:
    access_key_id: ((access_key_id))
    bucket: ((buckets_pivnet_products))
    endpoint:  ((s3_endpoint))
    region_name: ((s3_region_name))
    secret_access_key: ((secret_access_key))
    regexp: srt-stemcell/\[stemcells-ubuntu-xenial,(.*)\]bosh-stemcell-.*-azure.*\.tgz

- name: p-spring-cloud-services-stemcell
  #icon: amazon-drive
  type: s3
  source:
    access_key_id: ((access_key_id))
    bucket: ((buckets_pivnet_products))
    endpoint:  ((s3_endpoint))
    region_name: ((s3_region_name))
    secret_access_key: ((secret_access_key))
    regexp: p-spring-cloud-services-stemcell/\[stemcells-ubuntu-xenial,(.*)\]bosh-stemcell-.*-azure.*\.tgz

- name: p-spring-cloud-services-3-stemcell
  #icon: amazon-drive
  type: s3
  source:
    access_key_id: ((access_key_id))
    bucket: ((buckets_pivnet_products))
    endpoint:  ((s3_endpoint))
    region_name: ((s3_region_name))
    secret_access_key: ((secret_access_key))
    regexp: p-spring-cloud-services-3-stemcell/\[stemcells-ubuntu-xenial,(.*)\]bosh-stemcell-.*-azure.*\.tgz


- name: p-rabbitmq-stemcell
  #icon: amazon-drive
  type: s3
  source:
    access_key_id: ((access_key_id))
    bucket: ((buckets_pivnet_products))
    endpoint:  ((s3_endpoint))
    region_name: ((s3_region_name))
    secret_access_key: ((secret_access_key))
    regexp: p-rabbitmq-stemcell/\[stemcells-ubuntu-xenial,(.*)\]bosh-stemcell-.*-azure.*\.tgz

- name: pivotal-mysql-stemcell
  #icon: amazon-drive
  type: s3
  source:
    access_key_id: ((access_key_id))
    bucket: ((buckets_pivnet_products))
    endpoint:  ((s3_endpoint))
    region_name: ((s3_region_name))
    secret_access_key: ((secret_access_key))
    regexp: pivotal-mysql-stemcell/\[stemcells-ubuntu-xenial,(.*)\]bosh-stemcell-.*-azure.*.tgz

- name: pas-windows-stemcell
  #icon: amazon-drive
  type: s3
  source:
    access_key_id: ((access_key_id))
    bucket: ((buckets_pivnet_products))
    endpoint:  ((s3_endpoint))
    region_name: ((s3_region_name))
    secret_access_key: ((secret_access_key))
    regexp: pas-windows-stemcell/\[stemcells-windows-server,(.*)\]light-bosh-stemcell-2019.*-azure.*\.tgz
- name: configuration #to be removed
  #icon: github-circle
  type: git  
  source:
    uri: ((pipeline-repo))
    private_key: ((plat-auto-pipes-deploy-key.private_key))
    branch: master

- name: config
  #icon: github-circle
  type: git
  source:
    uri: ((pipeline-repo))
    private_key: ((plat-auto-pipes-deploy-key.private_key))
    branch: master

- name: variable
  #icon: github-circle
  type: git
  source:
    uri: ((pipeline-repo))
    private_key: ((plat-auto-pipes-deploy-key.private_key))
    branch: master

- name: opsman-image
  #icon: amazon-drive
  type: s3
  source:
    access_key_id: ((access_key_id))
    bucket: ((buckets_pivnet_products))
    endpoint:  ((s3_endpoint))
    region_name: ((s3_region_name))
    secret_access_key: ((secret_access_key))
    regexp: ops-manager/\[ops-manager,(.*)\].*azure*.yml
##
- name: azs-concourse
  #icon: github-circle
  type: git  
  source: 
    uri: https://github.com/bottkars/azs-concourse
    branch: master
    private_key: ((azs-resource-key.private_key))


- name: az-cli-image
  type: docker-image
  source: 
    repository: microsoft/azure-cli

jobs:
- name: test-azcli 
  plan:
  - get: azs-concourse
    trigger: true
  - get: az-cli-image
    trigger: true
  - task: test-azcli
    image: az-cli-image
    file: azs-concourse/ci/tasks/test-task.yml

- name: run-azcli-get-vms
  plan:
  - get: config
  - get: azs-concourse
  - get: az-cli-image
  - task: get-vms
    image: az-cli-image
    file: azs-concourse/ci/tasks/get-vms.yml  
    input_mapping:
      root_ca: config
    params:
      CA_CERT: cert/root.pem
      ENDPOINT_RESOURCE_MANAGER: ((endpoint-resource-manager)) 
      VAULT_DNS:  ((vault-dns))
      SUFFIX_STORAGE_ENDPOINT: ((suffix-storage-endpoint))
      AZURE_TENANT_ID: ((tenant-id))
      AZURE_CLIENT_ID: ((client-id))
      AZURE_CLIENT_SECRET: ((client-secret))
      AZURE_SUBSCRIPTION_ID: ((subscription-id))
- name: deploy-opsman-from-arm
  plan:
  - aggregate:
    - get: config
    - get: azs-concourse
    - get: az-cli-image
  - task: validate-template
    image: az-cli-image
    file: azs-concourse/ci/tasks/validate-template.yml  
    input_mapping:
      root_ca: config
      config: config
    params:
      CA_CERT: cert/root.pem
      ENDPOINT_RESOURCE_MANAGER: ((endpoint-resource-manager)) 
      VAULT_DNS:  ((vault-dns))
      SUFFIX_STORAGE_ENDPOINT: ((suffix-storage-endpoint))
      AZURE_TENANT_ID: ((tenant-id))
      AZURE_CLIENT_ID: ((client-id))
      AZURE_CLIENT_SECRET: ((client-secret))
      AZURE_SUBSCRIPTION_ID: ((subscription-id))
      TEMPLATE_URI: "https://raw.githubusercontent.com/bottkars/azure-pcf-opsman-powershell/testing/azuredeploy.json"
      PARAMETER_FILE: ((foundation))/config/parameters_opsman.json
      RESOURCE_GROUP: pcf
      LOCATION: westus
  - task: deploy-template 
    image: az-cli-image
    file: azs-concourse/ci/tasks/deploy-template.yml  
    input_mapping:
      root_ca: config
      config: config
    params:
      CA_CERT: cert/root.pem
      ENDPOINT_RESOURCE_MANAGER: ((endpoint-resource-manager)) 
      VAULT_DNS:  ((vault-dns))
      SUFFIX_STORAGE_ENDPOINT: ((suffix-storage-endpoint))
      AZURE_TENANT_ID: ((tenant-id))
      AZURE_CLIENT_ID: ((client-id))
      AZURE_CLIENT_SECRET: ((client-secret))
      AZURE_SUBSCRIPTION_ID: ((subscription-id))
      TEMPLATE_URI: "https://raw.githubusercontent.com/bottkars/azure-pcf-opsman-powershell/testing/azuredeploy.json"
      PARAMETER_FILE: ((foundation))/config/parameters_opsman.json
      RESOURCE_GROUP: pcf
      LOCATION: westus
- name: update-opsman-from-arm
  plan:
  - aggregate:
    - get: config
    - get: azs-concourse
    - get: az-cli-image
  - task: validate-template
    image: az-cli-image
    file: azs-concourse/ci/tasks/validate-template.yml  
    input_mapping:
      root_ca: config
      config: config
    params:
      CA_CERT: cert/root.pem
      ENDPOINT_RESOURCE_MANAGER: ((endpoint-resource-manager)) 
      VAULT_DNS:  ((vault-dns))
      SUFFIX_STORAGE_ENDPOINT: ((suffix-storage-endpoint))
      AZURE_TENANT_ID: ((tenant-id))
      AZURE_CLIENT_ID: ((client-id))
      AZURE_CLIENT_SECRET: ((client-secret))
      AZURE_SUBSCRIPTION_ID: ((subscription-id))
      TEMPLATE_URI: "https://raw.githubusercontent.com/bottkars/azure-pcf-opsman-powershell/testing/azuredeploy_update.json"
      PARAMETER_FILE: ((foundation))/config/parameters_opsman.json
      RESOURCE_GROUP: pcf
      LOCATION: westus
  - task: deploy-template 
    image: az-cli-image
    file: azs-concourse/ci/tasks/deploy-template.yml  
    input_mapping:
      root_ca: config
      config: config
    params:
      CA_CERT: cert/root.pem
      ENDPOINT_RESOURCE_MANAGER: ((endpoint-resource-manager)) 
      VAULT_DNS:  ((vault-dns))
      SUFFIX_STORAGE_ENDPOINT: ((suffix-storage-endpoint))
      AZURE_TENANT_ID: ((tenant-id))
      AZURE_CLIENT_ID: ((client-id))
      AZURE_CLIENT_SECRET: ((client-secret))
      AZURE_SUBSCRIPTION_ID: ((subscription-id))
      TEMPLATE_URI: "https://raw.githubusercontent.com/bottkars/azure-pcf-opsman-powershell/testing/azuredeploy_update.json"
      PARAMETER_FILE: ((foundation))/config/parameters_opsman.json
      RESOURCE_GROUP: pcf
      LOCATION: westus

- name: copy-opsman-image
  plan:
  - get: config
  - get: azs-concourse
  - get: az-cli-image
  - task: copy-opsman-image
    image: az-cli-image
    file: azs-concourse/ci/tasks/copy-blob.yml  
    input_mapping:
      root_ca: config
      config: config
    params:
      CA_CERT: cert/root.pem
      ENDPOINT_RESOURCE_MANAGER: ((endpoint-resource-manager)) 
      VAULT_DNS:  ((vault-dns))
      SUFFIX_STORAGE_ENDPOINT: ((suffix-storage-endpoint))
      AZURE_TENANT_ID: ((tenant-id))
      AZURE_CLIENT_ID: ((client-id))
      AZURE_CLIENT_SECRET: ((client-secret))
      AZURE_SUBSCRIPTION_ID: ((subscription-id))
      ACCOUNT_NAME: opsmanagerimage
      ACCOUNT_KEY: ((storage_account_key))
      DESTINATION_CONTAINER: images
      DESTINATION_BLOB: ((opsman_image))
      SOURCE_URI: https://opsmanagerwestus.blob.core.windows.net/images/((opsman_image))
  - task: check-copy-status
    image: az-cli-image
    file: azs-concourse/ci/tasks/copy-status.yml  
    input_mapping:
      root_ca: config
      config: config
    params:
      CA_CERT: cert/root.pem
      ENDPOINT_RESOURCE_MANAGER: ((endpoint-resource-manager)) 
      VAULT_DNS:  ((vault-dns))
      SUFFIX_STORAGE_ENDPOINT: ((suffix-storage-endpoint))
      AZURE_TENANT_ID: ((tenant-id))
      AZURE_CLIENT_ID: ((client-id))
      AZURE_CLIENT_SECRET: ((client-secret))
      AZURE_SUBSCRIPTION_ID: ((subscription-id))
      ACCOUNT_NAME: opsmanagerimage
      DESTINATION_CONTAINER: images
      DESTINATION_BLOB: ops-manager-2.6.0-build.138.vhd
- name: check-opsman-copy-status
  plan:
  - get: config
  - get: azs-concourse
  - get: az-cli-image
  - task: check-copy-status
    image: az-cli-image
    file: azs-concourse/ci/tasks/copy-status.yml  
    input_mapping:
      root_ca: config
      config: config
    params:
      CA_CERT: cert/root.pem
      ENDPOINT_RESOURCE_MANAGER: ((endpoint-resource-manager)) 
      VAULT_DNS:  ((vault-dns))
      SUFFIX_STORAGE_ENDPOINT: ((suffix-storage-endpoint))
      AZURE_TENANT_ID: ((tenant-id))
      AZURE_CLIENT_ID: ((client-id))
      AZURE_CLIENT_SECRET: ((client-secret))
      AZURE_SUBSCRIPTION_ID: ((subscription-id))
      ACCOUNT_NAME: opsmanagerimage
      DESTINATION_CONTAINER: images
      DESTINATION_BLOB: ops-manager-2.6.0-build.138.vhd

- name: delete-opsman-vm
  plan:
  - get: config
  - get: azs-concourse
  - get: az-cli-image
  - task: delete-vm
    image: az-cli-image
    file: azs-concourse/ci/tasks/delete-vm.yml  
    input_mapping:
      root_ca: config
      config: config
    params:
      CA_CERT: cert/root.pem
      ENDPOINT_RESOURCE_MANAGER: ((endpoint-resource-manager)) 
      VAULT_DNS:  ((vault-dns))
      SUFFIX_STORAGE_ENDPOINT: ((suffix-storage-endpoint))
      AZURE_TENANT_ID: ((tenant-id))
      AZURE_CLIENT_ID: ((client-id))
      AZURE_CLIENT_SECRET: ((client-secret))
      AZURE_SUBSCRIPTION_ID: ((subscription-id))
      RESOURCE_GROUP: pcf
      VM_NAME: pcf

## opsman starts here
- name: install-opsman
  serial: true
  serial_groups: [ install ]
  plan:
    - aggregate:
        - get: platform-automation-image
          params:
            unpack: true
        - get: one-time-trigger
          trigger: true
        - get: platform-automation-tasks
          params:
            unpack: true
        - get: configuration
    - task: interpolate-creds
      <<: *interpolate-creds
    - task: download-opsman-image
      image: platform-automation-image
      file: platform-automation-tasks/tasks/download-product-s3.yml
      params:
        CONFIG_FILE: download-product-configs/download-opsman.yml
      input_mapping:
        config: interpolated-creds
      output_mapping:
        downloaded-product: opsman-image
    - get: variable
    - task: create-vm
      image: platform-automation-image
      file: platform-automation-tasks/tasks/create-vm.yml
      input_mapping:
        image: opsman-image
        state: configuration
        config: interpolated-creds
        vars: variable
      params:
        VARS_FILES: vars/((foundation))/vars/opsman-vars.yml
        STATE_FILE: ((foundation))/state/state.yml
        OPSMAN_CONFIG_FILE: ((foundation))/config/opsman.yml
      ensure: &make-state-commit
        do:
          - task: make-commit
            image: platform-automation-image
            file: platform-automation-tasks/tasks/make-git-commit.yml
            input_mapping:
              repository: configuration
              file-source: generated-state
            output_mapping:
              repository-commit: configuration-commit
            params:
              FILE_SOURCE_PATH: state.yml
              FILE_DESTINATION_PATH: ((foundation))/state/state.yml
              GIT_AUTHOR_EMAIL: "pcf-pipeline-bot@example.com"
              GIT_AUTHOR_NAME: "Platform Automation Bot"
              COMMIT_MESSAGE: 'Update state file'
          - put: configuration
            params:
              repository: configuration-commit
              merge: true
    - task: configure-authentication
      image: platform-automation-image
      file: platform-automation-tasks/tasks/configure-authentication.yml
      attempts: 10
      input_mapping:
        env: configuration
        config: interpolated-creds
      params:
        ENV_FILE: ((foundation))/env/env.yml
        AUTH_CONFIG_FILE: ((foundation))/config/auth.yml
#    - task: configure-director
#      image: platform-automation-image
#      file: platform-automation-tasks/tasks/configure-director.yml
#      input_mapping:
#        config: interpolated-creds
#        env: interpolated-creds
#        vars: variable
#      params:
#        VARS_FILES: vars/((foundation))/vars/director-vars.yml
#        ENV_FILE: ((foundation))/env/env.yml
#        DIRECTOR_CONFIG_FILE: ((foundation))/config/director.yml
#    - task: apply-director-changes
#      image: platform-automation-image
#      file: platform-automation-tasks/tasks/apply-director-changes.yml
#      input_mapping:
#        env: interpolated-creds
#      params:
#        ENV_FILE: ((foundation))/env/env.yml

- name: staged-director-config
  serial: true
  plan:
    - aggregate:
        - get: platform-automation-tasks
          params: {unpack: true}
        - get: platform-automation-image
          params: {unpack: true}
        - get: configuration
    - task: interpolate-creds
      <<: *interpolate-creds
    - task: staged-director-config
      image: platform-automation-image
      file: platform-automation-tasks/tasks/staged-director-config.yml
      input_mapping:
        env: interpolated-creds
      params:
        ENV_FILE: ((foundation))/env/env.yml
      ensure: *make-state-commit

- name: export-installation
  serial: true
  plan:
    - aggregate:
        - get: daily-trigger
          trigger: true
        - get: platform-automation-image
          params:
            unpack: true
          passed: [ install-opsman ]
        - get: platform-automation-tasks
          params:
            unpack: true
        - get: configuration
        - get: variable
        - get: one-time-trigger
          passed: [ install-opsman ]
    - task: interpolate-creds
      <<: *interpolate-creds
    - task: export-installation
      image: platform-automation-image
      file: platform-automation-tasks/tasks/export-installation.yml
      input_mapping:
        env: interpolated-creds
      params:
        ENV_FILE: ((foundation))/env/env.yml
        INSTALLATION_FILE: installation-$timestamp.zip
    - put: installation
      params:
        file: installation/installation*.zip

- name: upgrade-opsman
  serial: true
  serial_groups: [ install ]
  plan:
    - aggregate:
        - get: one-time-trigger
          passed: [ export-installation ]
        - get: platform-automation-image
          params:
            unpack: true
          trigger: true
        - get: platform-automation-tasks
          params:
            unpack: true
        - get: installation
          passed: [ export-installation ]
        - get: configuration
        - get: variable
    - task: interpolate-creds
      <<: *interpolate-creds
    - task: download-opsman-image
      image: platform-automation-image
      file: platform-automation-tasks/tasks/download-product-s3.yml
      params:
        CONFIG_FILE: download-product-configs/opsman.yml
      input_mapping:
        config: interpolated-creds
      output_mapping:
        downloaded-product: opsman-image
      ensure: *make-state-commit
    - task: configure-director
      image: platform-automation-image
      file: platform-automation-tasks/tasks/configure-director.yml
      input_mapping:
        config: interpolated-creds
        env: interpolated-creds
        vars: variable
      params:
        VARS_FILES: vars/((foundation))/vars/director-vars.yml
        ENV_FILE: ((foundation))/env/env.yml
        DIRECTOR_CONFIG_FILE: ((foundation))/config/director.yml
    - task: apply-director-changes
      image: platform-automation-image
      file: platform-automation-tasks/tasks/apply-director-changes.yml
      input_mapping:
        env: interpolated-creds
      params:
        ENV_FILE: ((foundation))/env/env.yml



- name: get-platform-automation
  plan:
  - get: platform-automation-pivnet
    trigger: true
  - aggregate:
    - put: platform-automation-tasks
      params:
        file: platform-automation-pivnet/*tasks*.zip
    - put: platform-automation-image
      params:
        file: platform-automation-pivnet/*image*.tgz



- name: get-pas
  plan:
  - aggregate:
    #- get: daily
    #  trigger: true
    - get: platform-automation-image
      params:
        unpack: true
    - get: platform-automation-tasks
      params:
        unpack: true
    - get: config
  - task: credhub-interpolate
    <<: *credhub-interpolate
  - task: download-pas-product-and-stemcell
    image: platform-automation-image
    file: platform-automation-tasks/tasks/download-product.yml
    params:
      CONFIG_FILE: download-product-configs/v2.6/download-pas.yml
    output_mapping: {downloaded-stemcell: pas-stemcell}
  - aggregate:
    - put: pas-product
      params:
        file: downloaded-product/*.pivotal
    - put: pas-stemcell
      params:
        file: pas-stemcell/*.tgz

- name: get-srt
  serial: true
  serial_groups: [ get-products ]
  plan:
  - aggregate:
    - get: daily-trigger
      trigger: true
    - get: platform-automation-image
      params:
        unpack: true
    - get: platform-automation-tasks
      params:
        unpack: true
    - get: config
  - task: credhub-interpolate
    <<: *credhub-interpolate
  - task: download-srt-product-and-stemcell
    image: platform-automation-image
    file: platform-automation-tasks/tasks/download-product.yml
    params:
      CONFIG_FILE: download-product-configs/download-srt.yml
    output_mapping: {downloaded-stemcell: srt-stemcell}
  - aggregate:
    - put: srt-product
      params:
        file: downloaded-product/*.pivotal
    - put: srt-stemcell
      params:
        file: srt-stemcell/*.tgz
- name: get-opsman
  serial: true
  serial_groups: [ get-products ]
  plan:
  - aggregate:
    - get: daily-trigger
      trigger: true
    - get: platform-automation-image
      params:
        unpack: true
    - get: platform-automation-tasks
      params:
        unpack: true
    - get: config
  - task: credhub-interpolate
    <<: *credhub-interpolate
  - task: download-opsman-image
    image: platform-automation-image
    file: platform-automation-tasks/tasks/download-product.yml
    params:
      CONFIG_FILE: download-product-configs/download-opsman.yml
  - aggregate:
    - put: opsman-image
      params:
        file: downloaded-product/*.yml
    - put: opsman-image
      params:
        file: opsman-image/*.yml

- name: get-p-spring-cloud-services
  serial: true
  serial_groups: [ get-products ]
  plan:
  - aggregate:
    - get: daily-trigger
      trigger: true
    - get: platform-automation-image
      params:
        unpack: true
    - get: platform-automation-tasks
      params:
        unpack: true
    - get: config
  - task: credhub-interpolate
    <<: *credhub-interpolate
  - task: download-p-spring-cloud-services-product-and-stemcell
    image: platform-automation-image
    file: platform-automation-tasks/tasks/download-product.yml
    params:
      CONFIG_FILE: download-product-configs/download-p-spring-cloud-services.yml
    output_mapping: {downloaded-stemcell: p-spring-cloud-services-stemcell}
  - aggregate:
    - put: p-spring-cloud-services-product
      params:
        file: downloaded-product/*.pivotal
    - put: p-spring-cloud-services-stemcell
      params:
        file: p-spring-cloud-services-stemcell/*.tgz

- name: get-p-spring-cloud-services-3
  serial: true
  serial_groups: [ get-products ]
  plan:
  - aggregate:
    - get: daily-trigger
      trigger: true
    - get: platform-automation-image
      params:
        unpack: true
    - get: platform-automation-tasks
      params:
        unpack: true
    - get: config
  - task: credhub-interpolate
    <<: *credhub-interpolate
  - task: download-p-spring-cloud-services-3-product-and-stemcell
    image: platform-automation-image
    file: platform-automation-tasks/tasks/download-product.yml
    params:
      CONFIG_FILE: download-product-configs/download-p-spring-cloud-services-3.yml
    output_mapping: {downloaded-stemcell: p-spring-cloud-services-3-stemcell}
  - aggregate:
    - put: p-spring-cloud-services-3-product
      params:
        file: downloaded-product/*.pivotal
    - put: p-spring-cloud-services-3-stemcell
      params:
        file: p-spring-cloud-services-3-stemcell/*.tgz

- name: get-pivotal-mysql
  serial: true
  serial_groups: [ get-products ]
  plan:
  - aggregate:
    - get: daily-trigger
      trigger: true
    - get: platform-automation-image
      params:
        unpack: true
    - get: platform-automation-tasks
      params:
        unpack: true
    - get: config
  - task: credhub-interpolate
    <<: *credhub-interpolate
  - task: download-pivotal-mysql-product-and-stemcell
    image: platform-automation-image
    file: platform-automation-tasks/tasks/download-product.yml
    params:
      CONFIG_FILE: download-product-configs/download-pivotal-mysql.yml
    output_mapping: {downloaded-stemcell: pivotal-mysql-stemcell}
  - aggregate:
    - put: pivotal-mysql-product
      params:
        file: downloaded-product/*.pivotal
    - put: pivotal-mysql-stemcell
      params:
        file: pivotal-mysql-stemcell/*.tgz

- name: get-p-rabbitmq
  serial: true
  serial_groups: [ get-products ]
  plan:
  - aggregate:
    - get: daily-trigger
      trigger: true
    - get: platform-automation-image
      params:
        unpack: true
    - get: platform-automation-tasks
      params:
        unpack: true
    - get: config
  - task: credhub-interpolate
    <<: *credhub-interpolate
  - task: download-p-rabbitmq-product-and-stemcell
    image: platform-automation-image
    file: platform-automation-tasks/tasks/download-product.yml
    params:
      CONFIG_FILE: download-product-configs/download-p-rabbitmq.yml
    output_mapping: {downloaded-stemcell: p-rabbitmq-stemcell}
  - aggregate:
    - put: p-rabbitmq-product
      params:
        file: downloaded-product/*.pivotal
    - put: p-rabbitmq-stemcell
      params:
        file: p-rabbitmq-stemcell/*.tgz
- name: get-pas-windows
  serial: true
  serial_groups: [ get-products ]
  plan:
  - aggregate:
    - get: daily-trigger
      trigger: true
    - get: platform-automation-image
      params:
        unpack: true
    - get: platform-automation-tasks
      params:
        unpack: true
    - get: config
  - task: credhub-interpolate
    <<: *credhub-interpolate
  - task: download-pas-windows-product-and-stemcell
    image: platform-automation-image
    file: platform-automation-tasks/tasks/download-product.yml
    params:
      CONFIG_FILE: download-product-configs/v2.6/download-pas-windows.yml
    output_mapping: {downloaded-stemcell: pas-windows-stemcell}
  - aggregate:
    - put: pas-windows-product
      params:
        file: downloaded-product/*.pivotal
    - put: pas-windows-stemcell
      params:
        file: pas-windows-stemcell/*.tgz

- name: upload-and-stage-pas
  serial: true
  plan:
    - aggregate:
        - get: platform-automation-image
          params:
            unpack: true
        - get: platform-automation-tasks
          params:
            unpack: true
        - get: configuration
        - get: variable
    - task: interpolate-creds
      <<: *interpolate-creds
    - task: download-pas
      image: platform-automation-image
      file: platform-automation-tasks/tasks/download-product-s3.yml
      params:
        CONFIG_FILE: download-product-configs/v2.6/download-pas.yml
      input_mapping:
        config: interpolated-creds
      output_mapping:
        downloaded-product: pas-product
        downloaded-stemcell: pas-stemcell
    - task: upload-product
      image: platform-automation-image
      file: platform-automation-tasks/tasks/upload-product.yml
      input_mapping:
        product: pas-product
        env: interpolated-creds
      params:
        ENV_FILE: ((foundation))/env/env.yml
    - task: upload-pas-stemcell
      image: platform-automation-image
      file: platform-automation-tasks/tasks/upload-stemcell.yml
      input_mapping:
        env: interpolated-creds
        stemcell: pas-stemcell
      params:
        ENV_FILE: ((foundation))/env/env.yml
    - task: stage-product
      image: platform-automation-image
      file: platform-automation-tasks/tasks/stage-product.yml
      input_mapping:
        product: pas-product
        env: interpolated-creds
      params:
        ENV_FILE: ((foundation))/env/env.yml

- name: upload-and-stage-srt
  serial: true
  plan:
    - aggregate:
        - get: platform-automation-image
          params:
            unpack: true

        - get: platform-automation-tasks
          params:
            unpack: true
        - get: configuration
        - get: variable
    - task: interpolate-creds
      <<: *interpolate-creds
    - task: download-srt
      image: platform-automation-image
      file: platform-automation-tasks/tasks/download-product-s3.yml
      params:
        CONFIG_FILE: download-product-configs/download-srt.yml
      input_mapping:
        config: interpolated-creds
      output_mapping:
        downloaded-product: srt-product
        downloaded-stemcell: srt-stemcell
    - task: upload-product
      image: platform-automation-image
      file: platform-automation-tasks/tasks/upload-product.yml
      input_mapping:
        product: srt-product
        env: interpolated-creds
      params:
        ENV_FILE: ((foundation))/env/env.yml
    - task: upload-srt-stemcell
      image: platform-automation-image
      file: platform-automation-tasks/tasks/upload-stemcell.yml
      input_mapping:
        env: interpolated-creds
        stemcell: srt-stemcell
      params:
        ENV_FILE: ((foundation))/env/env.yml
    - task: stage-product
      image: platform-automation-image
      file: platform-automation-tasks/tasks/stage-product.yml
      input_mapping:
        product: srt-product
        env: interpolated-creds
      params:
        ENV_FILE: ((foundation))/env/env.yml        
- name: upload-and-stage-pas-windows
  serial: true
  plan:
    - aggregate:
        - get: platform-automation-image
          params:
            unpack: true
        - get: platform-automation-tasks
          params:
            unpack: true
        - get: configuration
        - get: variable
    - task: interpolate-creds
      <<: *interpolate-creds
    - task: download-pas-windows
      image: platform-automation-image
      file: platform-automation-tasks/tasks/download-product-s3.yml
      params:
        CONFIG_FILE: download-product-configs/v2.6/download-pas-windows.yml
      input_mapping:
        config: interpolated-creds
      output_mapping:
        downloaded-product: pas-windows-product
        downloaded-stemcell: pas-windows-stemcell
    - task: upload-product
      image: platform-automation-image
      file: platform-automation-tasks/tasks/upload-product.yml
      input_mapping:
        product: pas-windows-product
        env: interpolated-creds
      params:
        ENV_FILE: ((foundation))/env/env.yml
    - task: upload-pas-windows-stemcell
      image: platform-automation-image
      file: platform-automation-tasks/tasks/upload-stemcell.yml
      input_mapping:
        env: interpolated-creds
        stemcell: pas-windows-stemcell
      params:
        ENV_FILE: ((foundation))/env/env.yml
    - task: stage-product
      image: platform-automation-image
      file: platform-automation-tasks/tasks/stage-product.yml
      input_mapping:
        product: pas-windows-product
        env: interpolated-creds
      params:
        ENV_FILE: ((foundation))/env/env.yml      

- name: upload-and-stage-pivotal-mysql
  serial: true
  plan:
    - aggregate:
        - get: platform-automation-image
          params:
            unpack: true

        - get: platform-automation-tasks
          params:
            unpack: true
        - get: configuration
        - get: variable
    - task: interpolate-creds
      <<: *interpolate-creds
    - task: download-pivotal-mysql
      image: platform-automation-image
      file: platform-automation-tasks/tasks/download-product-s3.yml
      params:
        CONFIG_FILE: download-product-configs/download-pivotal-mysql.yml
      input_mapping:
        config: interpolated-creds
      output_mapping:
        downloaded-product: pivotal-mysql-product
        downloaded-stemcell: pivotal-mysql-stemcell
    - task: upload-product
      image: platform-automation-image
      file: platform-automation-tasks/tasks/upload-product.yml
      input_mapping:
        product: pivotal-mysql-product
        env: interpolated-creds
      params:
        ENV_FILE: ((foundation))/env/env.yml
    - task: upload-pivotal-mysql-stemcell
      image: platform-automation-image
      file: platform-automation-tasks/tasks/upload-stemcell.yml
      input_mapping:
        env: interpolated-creds
        stemcell: pivotal-mysql-stemcell
      params:
        ENV_FILE: ((foundation))/env/env.yml
    - task: stage-product
      image: platform-automation-image
      file: platform-automation-tasks/tasks/stage-product.yml
      input_mapping:
        product: pivotal-mysql-product
        env: interpolated-creds
      params:
        ENV_FILE: ((foundation))/env/env.yml        
- name: upload-and-stage-p-spring-cloud-services
  serial: true
  plan:
    - aggregate:
        - get: platform-automation-image
          params:
            unpack: true

        - get: platform-automation-tasks
          params:
            unpack: true
        - get: configuration
        - get: variable
    - task: interpolate-creds
      <<: *interpolate-creds
    - task: download-p-spring-cloud-services
      image: platform-automation-image
      file: platform-automation-tasks/tasks/download-product-s3.yml
      params:
        CONFIG_FILE: download-product-configs/download-p-spring-cloud-services.yml
      input_mapping:
        config: interpolated-creds
      output_mapping:
        downloaded-product: p-spring-cloud-services-product
        downloaded-stemcell: p-spring-cloud-services-stemcell
    - task: upload-product
      image: platform-automation-image
      file: platform-automation-tasks/tasks/upload-product.yml
      input_mapping:
        product: p-spring-cloud-services-product
        env: interpolated-creds
      params:
        ENV_FILE: ((foundation))/env/env.yml
    - task: upload-p-spring-cloud-services-stemcell
      image: platform-automation-image
      file: platform-automation-tasks/tasks/upload-stemcell.yml
      input_mapping:
        env: interpolated-creds
        stemcell: p-spring-cloud-services-stemcell
      params:
        ENV_FILE: ((foundation))/env/env.yml
    - task: stage-product
      image: platform-automation-image
      file: platform-automation-tasks/tasks/stage-product.yml
      input_mapping:
        product: p-spring-cloud-services-product
        env: interpolated-creds
      params:
        ENV_FILE: ((foundation))/env/env.yml   


- name: upload-and-stage-p-spring-cloud-services-3
  serial: true
  plan:
    - aggregate:
        - get: platform-automation-image
          params:
            unpack: true

        - get: platform-automation-tasks
          params:
            unpack: true
        - get: configuration
        - get: variable
    - task: interpolate-creds
      <<: *interpolate-creds
    - task: download-p-spring-cloud-services-3
      image: platform-automation-image
      file: platform-automation-tasks/tasks/download-product-s3.yml
      params:
        CONFIG_FILE: download-product-configs/download-p-spring-cloud-services-3.yml
      input_mapping:
        config: interpolated-creds
      output_mapping:
        downloaded-product: p-spring-cloud-services-3-product
        downloaded-stemcell: p-spring-cloud-services-3-stemcell
    - task: upload-product
      image: platform-automation-image
      file: platform-automation-tasks/tasks/upload-product.yml
      input_mapping:
        product: p-spring-cloud-services-3-product
        env: interpolated-creds
      params:
        ENV_FILE: ((foundation))/env/env.yml
    - task: upload-p-spring-cloud-services-3-stemcell
      image: platform-automation-image
      file: platform-automation-tasks/tasks/upload-stemcell.yml
      input_mapping:
        env: interpolated-creds
        stemcell: p-spring-cloud-services-3-stemcell
      params:
        ENV_FILE: ((foundation))/env/env.yml
    - task: stage-product
      image: platform-automation-image
      file: platform-automation-tasks/tasks/stage-product.yml
      input_mapping:
        product: p-spring-cloud-services-3-product
        env: interpolated-creds
      params:
        ENV_FILE: ((foundation))/env/env.yml   

- name: upload-and-stage-p-rabbitmq
  serial: true
  plan:
    - aggregate:
        - get: platform-automation-image
          params:
            unpack: true

        - get: platform-automation-tasks
          params:
            unpack: true
        - get: configuration
        - get: variable
    - task: interpolate-creds
      <<: *interpolate-creds
    - task: download-p-rabbitmq
      image: platform-automation-image
      file: platform-automation-tasks/tasks/download-product-s3.yml
      params:
        CONFIG_FILE: download-product-configs/download-p-rabbitmq.yml
      input_mapping:
        config: interpolated-creds
      output_mapping:
        downloaded-product: p-rabbitmq-product
        downloaded-stemcell: p-rabbitmq-stemcell
    - task: upload-product
      image: platform-automation-image
      file: platform-automation-tasks/tasks/upload-product.yml
      input_mapping:
        product: p-rabbitmq-product
        env: interpolated-creds
      params:
        ENV_FILE: ((foundation))/env/env.yml
    - task: upload-p-rabbitmq-stemcell
      image: platform-automation-image
      file: platform-automation-tasks/tasks/upload-stemcell.yml
      input_mapping:
        env: interpolated-creds
        stemcell: p-rabbitmq-stemcell
      params:
        ENV_FILE: ((foundation))/env/env.yml
    - task: stage-product
      image: platform-automation-image
      file: platform-automation-tasks/tasks/stage-product.yml
      input_mapping:
        product: p-rabbitmq-product
        env: interpolated-creds
      params:
        ENV_FILE: ((foundation))/env/env.yml        
- name: apply-product-changes
  serial: true
  plan:
    - aggregate:
        - get: platform-automation-image
          params:
            unpack: true
          passed:
            - configure-pivotal-mysql
            - configure-p-spring-cloud-services
            - configure-p-spring-cloud-services-3
            - configure-p-rabbitmq
            - configure-pas
          trigger: true
        - get: platform-automation-tasks
          params:
            unpack: true
        - get: configuration
        - get: variable
    - task: interpolate-creds
      <<: *interpolate-creds
    - task: apply-product-changes
      image: platform-automation-image
      file: platform-automation-tasks/tasks/apply-changes.yml
      input_mapping:
        env: interpolated-creds
      params:
        ENV_FILE: ((foundation))/env/env.yml
- name: configure-pas-windows
  serial: true
  plan:
    - aggregate:
        - get: platform-automation-image
          params:
            unpack: true
          passed:
            - upload-and-stage-pas-windows
          trigger: true
        - get: platform-automation-tasks
          params:
            unpack: true
        - get: configuration
        - get: variable
    - task: interpolate-creds
      <<: *interpolate-creds
    - task: configure-pas-windows
      image: platform-automation-image
      file: platform-automation-tasks/tasks/configure-product.yml
      input_mapping:
        config: interpolated-creds
        env: interpolated-creds
        vars: variable
      params:
        CONFIG_FILE: product-configs/pas-windows.yml
        VARS_FILES: vars/((foundation))/vars/pas-windows-vars.yml
        ENV_FILE: ((foundation))/env/env.yml 
- name: configure-p-rabbitmq
  serial: true
  plan:
    - aggregate:
        - get: platform-automation-image
          params:
            unpack: true
          passed:
            - upload-and-stage-p-rabbitmq
          trigger: true
        - get: platform-automation-tasks
          params:
            unpack: true
        - get: configuration
        - get: variable
    - task: interpolate-creds
      <<: *interpolate-creds
    - task: configure-p-rabbitmq
      image: platform-automation-image
      file: platform-automation-tasks/tasks/configure-product.yml
      input_mapping:
        config: interpolated-creds
        env: interpolated-creds
        vars: variable
      params:
        CONFIG_FILE: product-configs/p-rabbitmq.yml
        VARS_FILES: vars/((foundation))/vars/p-rabbitmq-vars.yml
        ENV_FILE: ((foundation))/env/env.yml 
- name: configure-pivotal-mysql
  serial: true
  plan:
    - aggregate:
        - get: platform-automation-image
          params:
            unpack: true
          passed:
            - upload-and-stage-pivotal-mysql
          trigger: true
        - get: platform-automation-tasks
          params:
            unpack: true
        - get: configuration
        - get: variable
    - task: interpolate-creds
      <<: *interpolate-creds
    - task: configure-pivotal-mysql
      image: platform-automation-image
      file: platform-automation-tasks/tasks/configure-product.yml
      input_mapping:
        config: interpolated-creds
        env: interpolated-creds
        vars: variable
      params:
        CONFIG_FILE: product-configs/pivotal-mysql.yml
        VARS_FILES: vars/((foundation))/vars/pivotal-mysql-vars.yml
        ENV_FILE: ((foundation))/env/env.yml 

- name: configure-p-spring-cloud-services
  serial: true
  plan:
    - aggregate:
        - get: platform-automation-image
          params:
            unpack: true
          passed:
            - upload-and-stage-p-spring-cloud-services
          trigger: true
        - get: platform-automation-tasks
          params:
            unpack: true
        - get: configuration
        - get: variable
    - task: interpolate-creds
      <<: *interpolate-creds
    - task: configure-p-spring-cloud-services
      image: platform-automation-image
      file: platform-automation-tasks/tasks/configure-product.yml
      input_mapping:
        config: interpolated-creds
        env: interpolated-creds
        vars: variable
      params:
        CONFIG_FILE: product-configs/p-spring-cloud-services.yml
        VARS_FILES: vars/((foundation))/vars/p-spring-cloud-services-vars.yml
        ENV_FILE: ((foundation))/env/env.yml
- name: configure-p-spring-cloud-services-3
  serial: true
  plan:
    - aggregate:
        - get: platform-automation-image
          params:
            unpack: true
          passed:
            - upload-and-stage-p-spring-cloud-services-3
          trigger: true
        - get: platform-automation-tasks
          params:
            unpack: true
        - get: configuration
        - get: variable
    - task: interpolate-creds
      <<: *interpolate-creds
    - task: configure-p-spring-cloud-services
      image: platform-automation-image
      file: platform-automation-tasks/tasks/configure-product.yml
      input_mapping:
        config: interpolated-creds
        env: interpolated-creds
        vars: variable
      params:
        CONFIG_FILE: product-configs/p-spring-cloud-services-3.yml
        VARS_FILES: vars/((foundation))/vars/p-spring-cloud-services-3-vars.yml
        ENV_FILE: ((foundation))/env/env.yml        
- name: configure-srt
  serial: true
  plan:
    - aggregate:
        - get: platform-automation-image
          params:
            unpack: true
          passed:
            - upload-and-stage-srt
          trigger: true
        - get: platform-automation-tasks
          params:
            unpack: true
        - get: configuration
        - get: variable
    - task: interpolate-creds
      <<: *interpolate-creds
    - task: configure-srt
      image: platform-automation-image
      file: platform-automation-tasks/tasks/configure-product.yml
      input_mapping:
        config: interpolated-creds
        env: interpolated-creds
        vars: variable
      params:
        CONFIG_FILE: product-configs/srt.yml
        VARS_FILES: vars/((foundation))/vars/srt-vars.yml
        ENV_FILE: ((foundation))/env/env.yml
- name: configure-pas
  serial: true
  plan:
    - aggregate:
        - get: platform-automation-image
          params:
            unpack: true
          passed:
            - upload-and-stage-pas
          trigger: true
        - get: platform-automation-tasks
          params:
            unpack: true
        - get: configuration
        - get: variable
    - task: interpolate-creds
      <<: *interpolate-creds
    - task: configure-pas
      image: platform-automation-image
      file: platform-automation-tasks/tasks/configure-product.yml
      input_mapping:
        config: interpolated-creds
        env: interpolated-creds
        vars: variable
      params:
        CONFIG_FILE: product-configs/v2.6/pas.yml
        VARS_FILES: vars/((foundation))/vars/pas-vars.yml
        ENV_FILE: ((foundation))/env/env.yml        
- name: deploy-asdk
  plan:
  - get: platform-automation-pivnet
    trigger: true
  - aggregate:
    - put: platform-automation-tasks
      params:
        file: platform-automation-pivnet/*tasks*.zip
    - put: platform-automation-image
      params:
        file: platform-automation-pivnet/*image*.tgz   
 
credhub-interpolate: &credhub-interpolate
  image: platform-automation-image
  file: platform-automation-tasks/tasks/credhub-interpolate.yml
  params:
    CREDHUB_CLIENT: ((credhub-client))
    CREDHUB_SECRET: ((credhub-secret))
    CREDHUB_SERVER: ((credhub-server))
    PREFIX: /concourse/main/((foundation))
    CREDHUB_CA_CERT: ((credhub-ca-cert.certificate))
    INTERPOLATION_PATHS: ((foundation))/config ((foundation))/env ((foundation))/vars download-product-configs product-configs
  input_mapping:
    files: config
  output_mapping:
    interpolated-files: config

interpolate-creds: &interpolate-creds
  image: platform-automation-image
  file: platform-automation-tasks/tasks/credhub-interpolate.yml
  params:
    CREDHUB_CLIENT: ((credhub-client))
    CREDHUB_SECRET: ((credhub-secret))
    CREDHUB_SERVER: ((credhub-server))
    PREFIX: /concourse/main/((foundation))
    CREDHUB_CA_CERT: ((credhub-ca-cert.certificate))
    INTERPOLATION_PATHS: ((foundation))/config ((foundation))/env  download-product-configs product-configs
    SKIP_MISSING: true
  input_mapping:
    files: configuration
  output_mapping:
    interpolated-files: interpolated-creds
credhub-interpolate-all-vars: &credhub-interpolate-all-vars
  image: platform-automation-image
  file: platform-automation-tasks/tasks/credhub-interpolate.yml
  params:
    CREDHUB_CLIENT: ((credhub-client))
    CREDHUB_SECRET: ((credhub-secret))
    CREDHUB_SERVER: ((credhub-server))
    CREDHUB_CA_CERT: ((credhub-ca-cert.certificate))
    PREFIX: /concourse/main/((foundation))
    INTERPOLATION_PATHS: ((foundation))/vars
  input_mapping:
    files: variable
  output_mapping:
    interpolated-files: variable

credhub-interpolate-all-product-configs: &credhub-interpolate-all-product-configs
  image: platform-automation-image
  file: platform-automation-tasks/tasks/credhub-interpolate.yml
  params:
    CREDHUB_CLIENT: ((credhub-client))
    CREDHUB_SECRET: ((credhub-secret))
    CREDHUB_SERVER: ((credhub-server))
    CREDHUB_CA_CERT: ((credhub-ca-cert.certificate))
    PREFIX: /concourse/main/((foundation))
    INTERPOLATION_PATHS: ((foundation))  
  input_mapping:
    files: variable
  output_mapping:
    interpolated-files: variable
groups:
- name: install-ops-manager
  jobs:
  - upgrade-opsman
  - export-installation
  - staged-director-config 
  - install-opsman  
- name: get-products
  jobs:
  - get-platform-automation
  - get-pas
  - get-pas-windows
  - get-p-spring-cloud-services
  - get-p-spring-cloud-services-3
  - get-p-rabbitmq
  - get-pivotal-mysql
- name: upgrade-products
  jobs:
  #- export-installation
  - upload-and-stage-pas
  - upload-and-stage-pivotal-mysql
  - upload-and-stage-p-spring-cloud-services
  - upload-and-stage-p-spring-cloud-services-3
  - upload-and-stage-p-rabbitmq
- name: configure-products
  jobs:
  - configure-pas
  - configure-p-rabbitmq
  - configure-pivotal-mysql
  - configure-p-spring-cloud-services
  - configure-p-spring-cloud-services-3
  - apply-product-changes

- name: disabled
  jobs:
  - get-srt
  - upload-and-stage-pas-windows
  - upload-and-stage-srt
  - configure-srt
  - configure-pas-windows
  - get-opsman

- name: deploy-asdk-1905
  jobs:  
  - deploy-asdk

- name: azcli-jobs
  jobs:
  - delete-opsman-vm
  - test-azcli
  - deploy-opsman-from-arm
  - run-azcli-get-vms
  - copy-opsman-image
  - check-opsman-copy-status
  - update-opsman-from-arm



- name: staged-pas-config
plan:
  - aggregate:
      - get: platform-automation-image
        params:
          unpack: true
      - get: platform-automation-tasks
        params:
          unpack: true
      - get: configuration
      - get: variable
  - task: interpolate-creds
    <<: *interpolate-creds
  - task: staged-config
    image: platform-automation-image
    file: platform-automation-tasks/tasks/staged-config.yml
    input_mapping:
      env: interpolated-creds
    params:
      PRODUCT_NAME: cf
      ENV_FILE: ((foundation))/env/env.yml
    ensure: *make-state-commit