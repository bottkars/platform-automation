s3_env: &s3_env
  access_key_id: ((((foundation))/s3_access_key_id))
  endpoint:  ((((foundation))/s3_endpoint))
  region_name: ((((foundation))/s3_region_name))
  secret_access_key: ((((foundation))/s3_secret_access_key))


credhub_env: &credhub_env
  CREDHUB_CLIENT: ((((foundation))/credhub-client))
  CREDHUB_SECRET: ((((foundation))/credhub-secret))
  CREDHUB_SERVER: ((credhub-server))
  PREFIX: /concourse/main/((foundation))
  CREDHUB_CA_CERT: ((((foundation))/credhub-ca-cert.certificate))



resource_types:
- name: pivnet
  type: docker-image
  source:
    repository: pivotalcf/pivnet-resource
    tag: latest-final
   

resources:
# triggers
#- name: daily-trigger
#  icon: calendar-clock
#  type: time
#  source:
#    interval: 24h


- name: one-time-trigger
  icon: calendar-clock
  type: time
  source:
    interval: 999999h

#- name: after-midnight
#  type: time
#  source:
#    start: 01:00 AM
#    stop: ((after_midnight_end))
#    interval: 24h
#    location: Europe/Berlin 

#- name: installation
#  icon: cloud-download
#  type: s3
#  source:
#    <<: *s3_env
#    bucket: ((buckets.installation))
#    regexp: ((foundation))/installation-(.*).zip    
#- name: platform-automation-pivnet
#  type: pivnet
#  source:
#    api_token: ((((foundation))/pivnet-token))
#    product_slug: platform-automation
#    product_version: 4\.*\.(.*)
#    sort_by: semver


#- name: dps-automation-image
#  icon: cloud-download
#  type: s3
#  source:
#    <<: *s3_env
#    bucket: ((buckets.pivnet_image))
#    regexp: platform-automation-image-(.*).tgz

- name: dps-automation-image
  icon: docker
  type: docker-image
  source:
    repository: harbor.pks.home.labbuildr.com/bottkars/dps-automation-image-alpine
    tag: latest
    ca_certs:
    - domain: harbor.pks.home.labbuildr.com
      cert: ((pksdemo/pks_cert.ca))

- name: dps-modules
  tags: ((tags))
  icon: git
  type: git
  check_every: 10m  
  source:  
    uri: https://github.com/bottkars/dps-modules.git
    branch: master

## product resources
- name: dpc
  type: s3
  icon: folder-move
  source:
    <<: *s3_env
    bucket: ((buckets.dps_products))
    regexp: dpc/((DPC.VERSION))/emc-dpc-ova-(.*).ova


- name: dpc-upgrade
  type: s3
  icon: folder-move
  source:
    <<: *s3_env
    bucket: ((buckets.dps_products))
    regexp: dpc/((DPC.VERSION))/emc-dpc-(.*).jar

jobs:
#- name: get-platform-automation
#  plan:
#  - in_parallel:
#    - get: after-midnight
#      trigger: true
#    - get: platform-automation-pivnet
#      trigger: true
#    - put: dps-automation-image
#      params:
#        file: platform-automation-pivnet/*image*.tgz

- name: deploy-dpc-ova
  plan:
  - in_parallel:
    - get: one-time-trigger
      trigger: true
    - get: dpc
      tags: ((tags))
      params:
        unpack: false
    - get: dps-automation-image
      params:
        unpack: true
      tags: ((tags))        
    - get: dps-modules
      tags: ((tags))
  - task: deploy-ova
    tags: ((tags))
    image: dps-automation-image
    file: dps-modules/ci/tasks/deploy-dpc-vsphere.yml
    input_mapping:
      dps-modules: dps-modules
      dpc: dpc
    params:
      GOVC_INSECURE: ((GOVC.INSECURE))
      GOVC_PASSWORD: ((GOVC.PASSWORD))
      GOVC_URL: ((GOVC.URL))
      GOVC_USERNAME: ((GOVC.USERNAME))
      GOVC_RESOURCE_POOL: ((GOVC.RESOURCE_POOL))
      GOVC_DATASTORE: ((GOVC.DATASTORE)) 
      GOVC_DATACENTER: ((GOVC.DATACENTER))
      GOVC_NETWORK: ((GOVC.NETWORK))
      GOVC_VM_IPATH: ((GOVC.DATACENTER))/vm/((DPC.FOLDER))/((DPC.VMNAME))
      DPC_FOLDER: ((DPC.FOLDER))
      DPC_NETWORK: ((DPC.NETWORK))
      DPC_ADDRESS: ((DPC.ADDRESS))
      DPC_GATEWAY: ((DPC.GATEWAY))
      DPC_NETMASK: ((DPC.NETMASK))
      DPC_FQDN: ((DPC.FQDN))
      DPC_VMNAME: ((DPC.VMNAME))
      DPC_DNS: ((DPC.DNS))
      DPC_NTP: ((DPC.NTP))
      DPC_TIMEZONE: "((DPC.TIMEZONE))"
      DPC_ADMIN_PASSWORD: ((DPC.PASSWORD)) 
      DPC_ROOT_PASSWORD: ((DPC.PASSWORD)) 
      DPC_UI_PASSWORD: ((DPC.PASSWORD)) 
      DPC_LOCKBOX_PASSWORD: ((DPC.PASSWORD))       
       
- name: configure-dpc
  plan:
  - in_parallel:
    - get: one-time-trigger
      trigger: true
    - get: dps-automation-image
      passed: [ deploy-dpc-ova ]
      params:
        unpack: true
      tags: ((tags))        
    - get: dps-modules
      tags: ((tags))
  - task: configure-dpc
    tags: ((tags))
    image: dps-automation-image
    file: dps-modules/ci/tasks/configure-dpc.yml
    input_mapping:
      dps-modules: dps-modules
    params:
      GOVC_INSECURE: ((GOVC.INSECURE))
      GOVC_PASSWORD: ((GOVC.PASSWORD))
      GOVC_URL: ((GOVC.URL))
      GOVC_USERNAME: ((GOVC.USERNAME))
      GOVC_VM: ((DPC.VMNAME))   
      GOVC_VM_IPATH: ((GOVC.DATACENTER))/vm/((DPC.FOLDER))/((DPC.VMNAME))
      DPC_FQDN: ((DPC.FQDN))
      DPC_SETUP_PASSWORD: ((DPC.PASSWORD))  
      DPC_TIMEZONE: "((DPC.TIMEZONE))"
      DPC_ADMIN_PASSWORD_OS: ((DPC.PASSWORD)) 
      DPC_ROOT_PASSWORD_OS: ((DPC.PASSWORD)) 
#      DPC_SNMP_STRING: ((DPC.SNMP_STRING))
#      DPC_DATADOMAIN_HOST: ((DPC.DATADOMAIN_HOST))
#      DPC_STORAGE_PATH: ((DPC.STORAGE_PATH))
#      DPC_DDBOOST_USER: ((DPC.DDBOOST_USER))
 #     DPC_NEW_DDBOOST_USER: ((DPC.NEW_DDBOOST_USER))
 #     DPC_DDBOOST_USER_PWD: ((DPC.PASSWORD))
 #     DPC_DDBOOST_USER_PWD_CF: ((DPC.PASSWORD))
 #     DPC_DATADOMAIN_SYSADMIN: ((DPC.DATADOMAIN_SYSADMIN))
 #     DPC_DATADOMAIN_SYSADMIN_PWD: ((DPC.DATADOMAIN_SYSADMIN_PWD))
 #     DPC_TOMCAT_KEYSTORE_PASSWORD: ((DPC.PASSWORD)) 
 #     DPC_AUTHC_ADMIN_PASSWORD: ((DPC.PASSWORD))
            
- name: upgrade-dpc
  plan:
  - in_parallel:
    - get: dpc-upgrade
      tags: ((tags))
      trigger: true
    - get: one-time-trigger
      passed: 
      - configure-dpc 
    - get: dps-automation-image
      tags: ((tags))        
    - get: dps-modules
      tags: ((tags))
  - task: deploy-dpc-upgrade
    tags: ((tags))
    image: dps-automation-image
    file: dps-modules/ci/tasks/deploy-avi-package.yml
    input_mapping:
      dps-modules: dps-modules
      avi_package: dpc-upgrade
    params:
      GOVC_INSECURE: ((GOVC.INSECURE))
      GOVC_PASSWORD: ((GOVC.PASSWORD))
      GOVC_URL: ((GOVC.URL))
      GOVC_USERNAME: ((GOVC.USERNAME))
      GOVC_VM: ((DPC.VMNAME))   
      GOVC_VM_IPATH: ((GOVC.DATACENTER))/vm/((DPC.FOLDER))/((DPC.VMNAME))

- name: delete-dpc
  plan:
  - in_parallel:
    - get: dps-automation-image
      params:
        unpack: true
      tags: ((tags))
      passed: [ deploy-dpc-ova ]              
    - get: dps-modules
      tags: ((tags))
  - task: delete-dpc
    tags: ((tags))
    image: dps-automation-image
    file: dps-modules/ci/tasks/delete-dpc.yml
    input_mapping:
      dps-modules: dps-modules
    params:
      GOVC_INSECURE: ((GOVC.INSECURE))
      GOVC_PASSWORD: ((GOVC.PASSWORD))
      GOVC_URL: ((GOVC.URL))
      GOVC_USERNAME: ((GOVC.USERNAME))
      GOVC_RESOURCE_POOL: ((GOVC.RESOURCE_POOL))
      GOVC_DATASTORE: ((GOVC.DATASTORE)) 
      GOVC_DATACENTER: ((GOVC.DATACENTER)) 
      GOVC_NETWORK: ((GOVC.NETWORK))
      DPC_VMNAME: ((DPC.VMNAME))
