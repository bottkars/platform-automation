---
s3_env: &s3_env
  access_key_id: ((((foundation))/s3_access_key_id))
  endpoint:  ((((foundation))/s3_endpoint))
  region_name: ((((foundation))/s3_region_name))
  secret_access_key: ((((foundation))/s3_secret_access_key))

credhub_env: &credhub_env
  CREDHUB_CLIENT: ((((foundation))/credhub-client))
  CREDHUB_SECRET: ((((foundation))/credhub-secret))
  CREDHUB_SERVER: ((((foundation))/credhub-server))
  PREFIX: /concourse/main/((foundation))
  CREDHUB_CA_CERT: ((((foundation))/credhub-ca-cert.certificate))

stage_steps: &stage_steps
  steps:
    - get: platform-automation-image
      tags: ((tags))
      params:
        unpack: true
    - get: platform-automation-tasks
      tags: ((tags))
      params:
        unpack: true
    - get: templates
      tags: ((tags))
    - get: variable
      tags: ((tags))

stage_config: &stage_config
  image: platform-automation-image
  file: platform-automation-tasks/tasks/staged-config.yml
  input_mapping:
    env: variable

do_stage_commit: &do_stage_commit
  image: platform-automation-image
  file: platform-automation-tasks/tasks/make-git-commit.yml
  input_mapping:
    repository: variable
    file-source: generated-config
  output_mapping:
    repository-commit: variable-commit

true_trigger: &true_trigger
  trigger: true

  
git_commit_env: &git_commit_env
  GIT_AUTHOR_EMAIL: "pcf-pipeline-bot@ebottnet.de"
  GIT_AUTHOR_NAME: "Platform Automation Bot"
  COMMIT_MESSAGE: 'Staged  Config Writer'

slack_start_param: &slack_start_param
  channel: ((slack.channel))
  text: |
    ((foundation)) Job $BUILD_JOB_NAME started with ID $BUILD_ID for 
    build $BUILD_NAME for team $BUILD_TEAM_NAME at
    $ATC_EXTERNAL_URL using pipeline  $BUILD_PIPELINE_NAME
    see $ATC_EXTERNAL_URL/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME
    for details
  icon_emoji: ":concourse-started:"

slack_succeeded_param: &slack_succeeded_param
  channel: ((slack.channel))
  text: |
    ((foundation)) Job $BUILD_JOB_NAME succeeded with ID $BUILD_ID for 
    build $BUILD_NAME for team $BUILD_TEAM_NAME at
    $ATC_EXTERNAL_URL using pipeline  $BUILD_PIPELINE_NAME    
    see $ATC_EXTERNAL_URL/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME
    for details
  icon_emoji: ":concourse-succeeded:"

slack_failed_param: &slack_failed_param
  channel: ((slack.channel))
  text: |
    ((foundation)) Job $BUILD_JOB_NAME failed with ID $BUILD_ID for 
    build $BUILD_NAME for team $BUILD_TEAM_NAME at
    $ATC_EXTERNAL_URL using pipeline  $BUILD_PIPELINE_NAME
    see $ATC_EXTERNAL_URL/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME
    for details
  icon_emoji: ":concourse-failed:"

resource_types:
- name: pivnet
  tags: ((tags))
  type: docker-image
  source:
    repository: pivotalcf/pivnet-resource
    tag: latest-final
- name: slack-notification
  tags: ((tags))
  type: docker-image
  source:
    repository: cfcommunity/slack-notification-resource    
resources:

# triggers

- name: after-midnight
  tags: ((tags))
  icon: calendar-clock
  type: time
  source:
    start: 01:00 AM
    stop: ((after_midnight_end))
    interval: 24h
    location: Europe/Berlin 
# notifications
- name: notify
  tags: ((tags))
  icon: bell
  type: slack-notification
  source:
    url: ((slack.webhook))

- name: platform-automation-tasks
  tags: ((tags))
  icon: cloud-download
  type: s3
  source:
    <<: *s3_env
    bucket: ((((foundation))/buckets_pivnet_tasks))
    regexp: platform-automation-tasks-(.*).zip

- name: platform-automation-image
  tags: ((tags))
  icon: cloud-download
  type: s3
  source:
    <<: *s3_env
    bucket: ((((foundation))/buckets_pivnet_image))
    regexp: platform-automation-image-(.*).tgz
#############################
###### Products go here #####
#############################    

- name: stemcells-windows-server-internal
  tags: ((tags))
  icon: cloud-download
  type: s3
  source:
    <<: *s3_env
    bucket: windows-stemcell
    regexp: stemcells/\[stemcells-windows-server-internal,(.*)\]bosh-stemcell-.*-vsphere-esxi-windows2019-go_agent.tgz


#############################
###### Products end here ####
############################# 

- name: templates
  tags: ((tags))
  icon: github-circle
  type: git
  check_every: 10m  
  source: 
    uri: ((templates.repo))
    private_key: ((((foundation))/template-deploy-key.private_key))
    branch: ((templates.branch))


#- name: download-lock
#  icon: cloud-lock-outline
#  type: pool
#  check_every: 10m
#  source:
#    uri: ((variable-repo))
#    branch: master
#    pool: download-lock
#    private_key: ((((foundation))/variable-deploy-key.private_key))
#    retry_delay: 300s

interpolate-product-downloads: &interpolate-product-downloads
  image: platform-automation-image
  file: platform-automation-tasks/tasks/credhub-interpolate.yml
  params:
    <<: *credhub_env
    INTERPOLATION_PATHS: download-product-configs/((pks.version))/download-stemcells-windows-server-internal.yml
  input_mapping:
    files: templates
  output_mapping:
    interpolated-files: interpolated-product-downloads

interpolate-product-templates: &interpolate-product-templates
  image: platform-automation-image
  file: platform-automation-tasks/tasks/credhub-interpolate.yml
  params:
    <<: *credhub_env
    INTERPOLATION_PATHS: product-configs/((pks.version))
    SKIP_MISSING: true
  input_mapping:
    files: templates
  output_mapping:
    interpolated-files: interpolated-product-templates

jobs:
- name: get-stemcells-windows-server-internal
  on_failure:
    put: notify
    tags: ((tags))
    params:
      <<: *slack_failed_param
  serial: true
  serial_groups: [ get-products ]
  plan:
#  - put: download-lock
#    tags: ((tags))
#    params:
#      acquire: true   
  - in_parallel:
    - get: after-midnight
      tags: ((tags))
      trigger: true
    - get: platform-automation-image
      tags: ((tags))
      params:
        unpack: true
    - get: platform-automation-tasks
      tags: ((tags))
      params:
        unpack: true
    - get: templates
      tags: ((tags))
  - task: interpolate-product-downloads
    tags: ((tags))
    <<: *interpolate-product-downloads
  - task: download-stemcells-windows-server-internal
    tags: ((tags))
    image: platform-automation-image
    file: platform-automation-tasks/tasks/download-product.yml
    params:
      CONFIG_FILE: download-product-configs/((pks.version))/download-stemcells-windows-server-internal.yml 
    input_mapping:
      config: interpolated-product-downloads
#    on_failure:
#      put: download-lock
#      tags: ((tags))
#      params:
#        release: download-lock
  - in_parallel:
    - put: stemcells-windows-server-internal
      tags: ((tags))
      params:
        file: downloaded-product/*.tgz
#  - put: download-lock
#    tags: ((tags))
#    params:
#      release: download-lock

