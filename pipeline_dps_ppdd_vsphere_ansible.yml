s3_env: &s3_env
  access_key_id: ((((foundation))/s3_access_key_id))
  endpoint:  ((((foundation))/s3_endpoint))
  region_name: ((((foundation))/s3_region_name))
  secret_access_key: ((((foundation))/s3_secret_access_key))


credhub_env: &credhub_env
  CREDHUB_CLIENT: ((((foundation))/credhub-client))
  CREDHUB_SECRET: ((((foundation))/credhub-secret))
  CREDHUB_SERVER: ((credhub-server))
  PREFIX: /concourse/main/((foundation))
  CREDHUB_CA_CERT: ((((foundation))/credhub-ca-cert.certificate))




#resource_types:
#- name: pivnet
#  type: docker-image
#  source:
#    repository: pivotalcf/pivnet-resource
#    tag: latest-finalcd 
   

resources:
# triggers
#- name: daily-trigger
#  icon: calendar-clock
#  type: time
#  source:
#    interval: 24h

- name: dps-ansible
  icon: git
  type: git
  check_every: 10m  
  source:  
    uri: git@github.com:bottkars/ansible_dps.git
    branch: main
    private_key: ((((foundation))/ansible_dps_git.private_key))

- name: one-time-trigger
  icon: calendar-clock
  type: time
  source:
    interval: 999999h



#- name: platform-automation-image
#  icon: cloud-download
#  type: s3
#  source:
#    <<: *s3_env
#    bucket: ((buckets.pivnet_image))
#    regexp: platform-automation-image-(.*).tgz
- name: dps-automation-image
  icon: docker
  type: docker-image
  source:
    repository: harbor.pks.home.labbuildr.com/bottkars/dps-automation-image-alpine
    tag: latest
    ca_certs:
    - domain: harbor.pks.home.labbuildr.com
      cert: ((pksdemo/pks_cert.ca))
- name: dps-modules
  tags: ((tags))
  icon: git
  type: git
  check_every: 10m  
  source:  
    uri: https://github.com/bottkars/dps-modules.git
    branch: main

## product resources
- name: ddve
  type: s3
  icon: folder-move
  source:
    <<: *s3_env
    bucket: ((buckets.dps_products))
    regexp: ddve/((PPDD.BASEVER))/ddve-(([78])\.([23456789]{1,2})\.([0-9]{1,2})\.([0-9]{1,2})-([0-9]{5,7})).ova #only release builds
display:
  background_image: https://www.delltechnologies.com/content/dam/uwaem/production-design-assets/en/data-protection/images/hero-300x600-social.jpg


jobs:
- name: deploy-ddve-ova
  plan:
  - in_parallel:
    - get: one-time-trigger
      trigger: true
    - get: dps-ansible
      tags: ((tags))      
    - get: ddve
      tags: ((tags))
      params:
        unpack: false
    - get: dps-automation-image
#      params:
#       unpack: true
      tags: ((tags))        
    - get: dps-modules
      tags: ((tags))
  - task: deploy-ova
    tags: ((tags))
    image: dps-automation-image
    file: dps-modules/ci/tasks/deploy-ppdd.yml
    input_mapping:
      dps-modules: dps-modules
      ddve: ddve
    output_mapping:
      vars: vars  
    params:
      DEBUG: "FALSE"
      GOVC_INSECURE: ((GOVC.INSECURE))
      GOVC_PASSWORD: ((GOVC.PASSWORD))
      GOVC_URL: ((GOVC.URL))
      GOVC_USERNAME: ((GOVC.USERNAME))
      GOVC_RESOURCE_POOL: ((GOVC.RESOURCE_POOL))
      GOVC_DATASTORE: ((GOVC.DATASTORE)) 
      GOVC_DATACENTER: ((GOVC.DATACENTER)) 
      GOVC_NETWORK: ((GOVC.NETWORK))
      GOVC_VM_IPATH: ((GOVC.DATACENTER))/vm/((PPDD.FOLDER))/((PPDD.VMNAME))
      PPDD_NETWORK: ((PPDD.NETWORK))
      PPDD_ADDRESS: ((PPDD.ADDRESS))
      PPDD_GATEWAY: ((PPDD.GATEWAY))
      PPDD_NETMASK: ((PPDD.NETMASK))
      PPDD_FQDN: ((PPDD.FQDN))
      PPDD_VMNAME: ((PPDD.VMNAME))
      PPDD_DNS: ((PPDD.DNS))
      PPDD_TYPE: ((PPDD.TYPE)) 
      PPDD_FOLDER: ((PPDD.FOLDER))
      PPDD_ACTIVETIER_DISKS: ((PPDD.ACTIVETIER_DISKS))
      PPDD_CLOUDTIER_DISKS: ((PPDD.CLOUDTIER_DISKS))

  - task: configure-ddve-management-network-ansible         
    tags: ((tags))
    image: dps-automation-image
    tags: ((tags))
    file: dps-modules/ci/tasks/ansible-playbook.yml
    input_mapping:
      dps-modules: dps-modules
      vars: vars
      dps-ansible: dps-ansible
    params:
      PLAYBOOK: dps-ansible/ppdd/1.0-Playbook-configure-initial-network.yml
      DEBUG: "FALSE"
      DDVE_PASSWORD: ((PPDD.PASSWORD))
      DDVE_USERNAME: ((PPDD.USERNAME))
      DDVE_INITIAL_PASSWORD: ((PPDD.SETUP_PASSWORD))
      PPDD_NETWORK: ((PPDD.NETWORK))
      PPDD_ADDRESS: ((PPDD.ADDRESS))
      PPDD_GATEWAY: ((PPDD.GATEWAY))
      PPDD_NETMASK: ((PPDD.NETMASK))
#      PPDD_FQDN: ((PPDD.FQDN))



- name: delete-ppdd
  plan:
  - in_parallel:
    - get: dps-automation-image
#      params:
#        unpack: true
#      tags: ((tags))
#      passed: [ deploy-ddve-ova ]              
    - get: dps-modules
      tags: ((tags))
  - task: delete-ddve
    tags: ((tags))
    image: dps-automation-image
    file: dps-modules/ci/tasks/delete-ppdd.yml
    input_mapping:
      dps-modules: dps-modules
    params:
      DEBUG: "FALSE"
      GOVC_INSECURE: ((GOVC.INSECURE))
      GOVC_PASSWORD: ((GOVC.PASSWORD))
      GOVC_URL: ((GOVC.URL))
      GOVC_USERNAME: ((GOVC.USERNAME))
      GOVC_RESOURCE_POOL: ((GOVC.RESOURCE_POOL))
      GOVC_DATASTORE: ((GOVC.DATASTORE)) 
      GOVC_DATACENTER: ((GOVC.DATACENTER)) 
      GOVC_NETWORK: ((GOVC.NETWORK))
      PPDD_VMNAME: ((PPDD.VMNAME))

- name: ansible-configure-ddve-initial-password
  serial_groups: [ansible]
  plan:
  - in_parallel:
    - get: dps-automation-image
      passed: [ deploy-ddve-ova ]
      tags: ((tags))
      trigger: true
    - get: dps-modules
      tags: ((tags))
    - get: dps-ansible
      tags: ((tags))
  - task: configure-initial-password
    tags: ((tags))
    image: dps-automation-image
    file: dps-modules/ci/tasks/ansible-playbook.yml
    input_mapping:
      dps-modules: dps-modules
      ppdm-config: terraform-output
      dps-ansible: dps-ansible
    params:
      PLAYBOOK: dps-ansible/ppdd/1.0-Playbook-configure-initial-password.yml
      DEBUG: "FALSE"
      DDVE_PASSWORD: ((PPDD.PASSWORD))
      DDVE_USERNAME: ((PPDD.USERNAME))
      DDVE_INITIAL_PASSWORD: ((PPDD.SETUP_PASSWORD))
      DDVE_PUBLIC_FQDN: ((PPDD.FQDN))
- name: ansible-configure-ddve-license
  serial_groups: [ansible]
  plan:
  - in_parallel:
    - get: dps-automation-image
      passed: [ ansible-configure-ddve-initial-password ]
      tags: ((tags))
      trigger: true
    - get: dps-modules
      tags: ((tags))
    - get: dps-ansible
      tags: ((tags))    
  - task: set-dd-license
    tags: ((tags))
    image: dps-automation-image
    file: dps-modules/ci/tasks/ansible-playbook.yml
    input_mapping:
      dps-modules: dps-modules
      ppdm-config: terraform-output
      dps-ansible: dps-ansible
    params:
      PLAYBOOK: dps-ansible/ppdd/3.0-Playbook-set-dd-license.yml # --extra-vars ppdd_license_content="{{ lookup('env','PPDD_LICENSE') }}"
      DEBUG: "FALSE"
      DDVE_PASSWORD: ((PPDD.PASSWORD))
      DDVE_USERNAME: ((PPDD.USERNAME))
      DDVE_PUBLIC_FQDN: ((PPDD.FQDN))   
      PPDD_LICENSE: ((PPDD.LICENSE))   
- name: ansible-configure-ddve-storage
  serial_groups: [ansible]
  plan:
  - in_parallel:
    - get: dps-automation-image
      passed: [ ansible-configure-ddve-networks ]
      tags: ((tags))
      trigger: true
    - get: dps-modules
      tags: ((tags))
    - get: dps-ansible
      tags: ((tags))    
  - task: set-dd-storage-configuration
    tags: ((tags))
    image: dps-automation-image
    file: dps-modules/ci/tasks/ansible-playbook.yml
    input_mapping:
      dps-modules: dps-modules
      dps-ansible: dps-ansible
    params:
      PLAYBOOK: dps-ansible/ppdd/2.0-Playbook-configure-dd.yml # --extra-vars ppdd_license_content="{{ lookup('env','PPDD_LICENSE') }}"
      DEBUG: "FALSE"
      DDVE_PASSWORD: ((PPDD.PASSWORD))
      DDVE_USERNAME: ((PPDD.USERNAME))
      DDVE_PUBLIC_FQDN: ((PPDD.FQDN))  
      PPDD_PATH: ((PPDD.PATH.PATH_1))
      PPDM_HOSTNAME: ((PPDM.FQDN))


- name: ansible-configure-ddve-networks
  serial_groups: [ansible]
  plan:
  - in_parallel:
    - get: dps-automation-image
      passed: [ ansible-configure-ddve-license ]
      tags: ((tags))
      trigger: true
    - get: dps-modules
      tags: ((tags))
    - get: dps-ansible
      tags: ((tags))    
  - task: set-dd-networks-configuration
    tags: ((tags))
    image: dps-automation-image
    file: dps-modules/ci/tasks/ansible-playbook.yml
    input_mapping:
      dps-modules: dps-modules
      dps-ansible: dps-ansible
    params:
      PLAYBOOK: dps-ansible/ppdd/3.1-Playbook-set-dd-networks.yml
      DEBUG: "FALSE"
      DDVE_PASSWORD: ((PPDD.PASSWORD))
      DDVE_USERNAME: ((PPDD.USERNAME))
      DDVE_PUBLIC_FQDN: ((PPDD.FQDN))  
      DEPLOYMENT_DOMAIN: ((PPDD.SEARCHPATH))
      PPDD_DNS: ((PPDD.DNS))


- name: ansible-set-passphrase
  serial_groups: [ansible]
  plan:
  - in_parallel:
    - get: dps-automation-image
      passed: [ ansible-configure-ddve-license ]
      tags: ((tags))
      trigger: true
    - get: dps-modules
      tags: ((tags))
    - get: dps-ansible
      tags: ((tags))    
  - task: set-dd-passphrase
    tags: ((tags))
    image: dps-automation-image
    file: dps-modules/ci/tasks/ansible-playbook.yml
    input_mapping:
      dps-modules: dps-modules
      dps-ansible: dps-ansible
    params:
      PLAYBOOK: dps-ansible/ppdd/2.1-Playbook-configure-ddpassphrase.yml
      DEBUG: "FALSE"
      DDVE_PASSWORD: ((PPDD.PASSWORD))
      DDVE_USERNAME: ((PPDD.USERNAME))
      DDVE_PUBLIC_FQDN: ((PPDD.FQDN))  
      PPDD_PASSPHRASE: ((PPDD.PASSPHRASE))