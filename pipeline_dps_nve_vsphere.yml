s3_env: &s3_env
  access_key_id: ((((foundation))/s3_access_key_id))
  endpoint:  ((((foundation))/s3_endpoint))
  region_name: ((((foundation))/s3_region_name))
  secret_access_key: ((((foundation))/s3_secret_access_key))


credhub_env: &credhub_env
  CREDHUB_CLIENT: ((((foundation))/credhub-client))
  CREDHUB_SECRET: ((((foundation))/credhub-secret))
  CREDHUB_SERVER: ((credhub-server))
  PREFIX: /concourse/main/((foundation))
  CREDHUB_CA_CERT: ((((foundation))/credhub-ca-cert.certificate))



resource_types:
- name: pivnet
  type: docker-image
  source:
    repository: pivotalcf/pivnet-resource
    tag: latest-final
   

resources:
# triggers
#- name: daily-trigger
#  icon: calendar-clock
#  type: time
#  source:
#    interval: 24h


- name: one-time-trigger
  icon: calendar-clock
  type: time
  source:
    interval: 999999h

#- name: after-midnight
#  type: time
#  source:
#    start: 01:00 AM
#    stop: ((after_midnight_end))
#    interval: 24h
#    location: Europe/Berlin 

#- name: installation
#  icon: cloud-download
#  type: s3
#  source:
#    <<: *s3_env
#    bucket: ((buckets.installation))
#    regexp: ((foundation))/installation-(.*).zip    
#- name: platform-automation-pivnet
#  type: pivnet
#  source:
#    api_token: ((((foundation))/pivnet-token))
#    product_slug: platform-automation
#    product_version: 4\.*\.(.*)
#    sort_by: semver


#- name: dps-automation-image
#  icon: cloud-download
#  type: s3
#  source:
#    <<: *s3_env
#    bucket: ((buckets.pivnet_image))
#    regexp: platform-automation-image-(.*).tgz

- name: dps-automation-image
  icon: docker
  type: docker-image
  source:
    repository: harbor.pks.home.labbuildr.com/bottkars/dps-automation-image-alpine
    tag: latest
    ca_certs:
    - domain: harbor.pks.home.labbuildr.com
      cert: ((pksdemo/pks_cert.ca))

- name: dps-modules
  tags: ((tags))
  icon: git
  type: git
  check_every: 10m  
  source:  
    uri: https://github.com/bottkars/dps-modules.git
    branch: main

## product resources
- name: networker
  type: s3
  icon: folder-move
  source:
    <<: *s3_env
    bucket: ((buckets.dps_products))
    regexp: networker/((NVE.BASEVER))/NVE-(.*).ova


- name: networker-upgrade
  type: s3
  icon: folder-move
  source:
    <<: *s3_env
    bucket: ((buckets.dps_products))
    regexp: networker/((NVE.UPGRADEVER))/NveUpgrade-(.*).avp

jobs:
#- name: get-platform-automation
#  plan:
#  - in_parallel:
#    - get: after-midnight
#      trigger: true
#    - get: platform-automation-pivnet
#      trigger: true
#    - put: dps-automation-image
#      params:
#        file: platform-automation-pivnet/*image*.tgz

- name: deploy-networker-ova
  plan:
  - in_parallel:
    - get: one-time-trigger
      trigger: true
    - get: networker
      tags: ((tags))
      params:
        unpack: false
    - get: dps-automation-image
      params:
        unpack: true
      tags: ((tags))        
    - get: dps-modules
      tags: ((tags))
  - task: deploy-ova
    tags: ((tags))
    image: dps-automation-image
    file: dps-modules/ci/tasks/deploy-nve.yml
    input_mapping:
      dps-modules: dps-modules
      networker: networker
    params:
      GOVC_INSECURE: ((GOVC.INSECURE))
      GOVC_PASSWORD: ((GOVC.PASSWORD))
      GOVC_URL: ((GOVC.URL))
      GOVC_USERNAME: ((GOVC.USERNAME))
      GOVC_RESOURCE_POOL: ((NVE.GOVC.RESOURCE_POOL))
      GOVC_DATASTORE: ((NVE.GOVC.DATASTORE)) 
      GOVC_DATACENTER: ((GOVC.DATACENTER))
      GOVC_NETWORK: ((NVE.GOVC.NETWORK))
      GOVC_VM_IPATH: ((GOVC.DATACENTER))/vm/((NVE.FOLDER))/((NVE.VMNAME))
      NVE_FOLDER: ((NVE.FOLDER))
      NVE_NETWORK: ((NVE.NETWORK))
      NVE_ADDRESS: ((NVE.ADDRESS))
      NVE_GATEWAY: ((NVE.GATEWAY))
      NVE_NETMASK: ((NVE.NETMASK))
      NVE_FQDN: ((NVE.FQDN))
      NVE_VMNAME: ((NVE.VMNAME))
      NVE_DNS: ((NVE.DNS))       
- name: configure-nve
  plan:
  - in_parallel:
    - get: one-time-trigger
      trigger: true
    - get: dps-automation-image
      passed: [ deploy-networker-ova ]
      params:
        unpack: true
      tags: ((tags))        
    - get: dps-modules
      tags: ((tags))
  - task: configure-nve
    tags: ((tags))
    image: dps-automation-image
    file: dps-modules/ci/tasks/configure-nve-rest.yml
    input_mapping:
      dps-modules: dps-modules
    params:
      GOVC_INSECURE: ((GOVC.INSECURE))
      GOVC_PASSWORD: ((GOVC.PASSWORD))
      GOVC_URL: ((GOVC.URL))
      GOVC_USERNAME: ((GOVC.USERNAME))
      GOVC_VM: ((NVE.VMNAME))   
      GOVC_VM_IPATH: ((GOVC.DATACENTER))/vm/((NVE.FOLDER))/((NVE.VMNAME))
      AVI_FQDN: ((NVE.FQDN))
      NVE_SETUP_PASSWORD: ((NVE.SETUP_PASSWORD))  
      NVE_TIMEZONE: "((NVE.TIMEZONE))"
      NVE_ADMIN_PASSWORD_OS: ((NVE.PASSWORD)) 
      NVE_ROOT_PASSWORD_OS: ((NVE.PASSWORD)) 
      NVE_SNMP_STRING: ((NVE.SNMP_STRING))
      NVE_DATADOMAIN_HOST: ((NVE.DATADOMAIN_HOST))
      NVE_STORAGE_PATH: ((NVE.STORAGE_PATH))
      NVE_DDBOOST_USER: ((NVE.DDBOOST_USER))
      NVE_NEW_DDBOOST_USER: ((NVE.NEW_DDBOOST_USER))
      NVE_DDBOOST_USER_PWD: ((NVE.PASSWORD))
      NVE_DDBOOST_USER_PWD_CF: ((NVE.PASSWORD))
      NVE_DATADOMAIN_SYSADMIN: ((NVE.DATADOMAIN_SYSADMIN))
      NVE_DATADOMAIN_SYSADMIN_PWD: ((NVE.DATADOMAIN_SYSADMIN_PWD))
      NVE_TOMCAT_KEYSTORE_PASSWORD: ((NVE.PASSWORD)) 
      NVE_AUTHC_ADMIN_PASSWORD: ((NVE.PASSWORD))
            
- name: upgrade-nve
  plan:
  - in_parallel:
    - get: networker-upgrade
      tags: ((tags))
      trigger: true
    - get: one-time-trigger
      passed: 
      - configure-nve 
    - get: dps-automation-image
      tags: ((tags))        
    - get: dps-modules
      tags: ((tags))
  - task: deploy-networker-upgrade
    tags: ((tags))
    image: dps-automation-image
    file: dps-modules/ci/tasks/deploy-avi-package.yml
    input_mapping:
      dps-modules: dps-modules
      avi_package: networker-upgrade
    params:
      DEBUG: TRUE
      GOVC_INSECURE: ((GOVC.INSECURE))
      GOVC_PASSWORD: ((GOVC.PASSWORD))
      GOVC_URL: ((GOVC.URL))
      GOVC_USERNAME: ((GOVC.USERNAME))
      GOVC_VM: ((NVE.VMNAME))   
      GOVC_VM_IPATH: ((GOVC.DATACENTER))/vm/((NVE.FOLDER))/((NVE.VMNAME))
      AVI_FQDN: ((NVE.FQDN))
      AVI_USERNAME: root
      AVI_PASSWORD: ((NVE.PASSWORD))  
      AVI_PACKAGE: "NveUpgrade-"
      WORKFLOW: "NveUpgrade"
      DATA: '{"linux_root_password":"((NVE.PASSWORD))","linux_admin_password":"((NVE.PASSWORD))"}'      
- name: delete-nve
  plan:
  - in_parallel:
    - get: dps-automation-image
      params:
        unpack: true
      tags: ((tags))
#      passed: [ deploy-networker-ova ]              
    - get: dps-modules
      tags: ((tags))
  - task: delete-nve
    tags: ((tags))
    image: dps-automation-image
    file: dps-modules/ci/tasks/delete-nve.yml
    input_mapping:
      dps-modules: dps-modules
    params:
      GOVC_INSECURE: ((GOVC.INSECURE))
      GOVC_PASSWORD: ((GOVC.PASSWORD))
      GOVC_URL: ((GOVC.URL))
      GOVC_USERNAME: ((GOVC.USERNAME))
      GOVC_RESOURCE_POOL: ((GOVC.RESOURCE_POOL))
      GOVC_DATASTORE: ((GOVC.DATASTORE)) 
      GOVC_DATACENTER: ((GOVC.DATACENTER)) 
#      GOVC_NETWORK: ((GOVC.NETWORK))
      NVE_VMNAME: ((NVE.VMNAME))
