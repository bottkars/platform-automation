s3_env: &s3_env
  access_key_id: ((((foundation))/s3_access_key_id))
  endpoint:  ((((foundation))/s3_endpoint))
  region_name: ((((foundation))/s3_region_name))
  secret_access_key: ((((foundation))/s3_secret_access_key))

azure_env: &azure_env
  PROFILE: ((azs.arm_profile))
  CA_CERT: ((azs_ca.certificate))
  AZURE_CLI_CA_PATH: /usr/local/lib/python3.6/dist-packages/certifi/cacert.pem
  ENDPOINT_RESOURCE_MANAGER: ((endpoint-resource-manager)) 
  VAULT_DNS:  ((azs.vault_dns))
  SUFFIX_STORAGE_ENDPOINT: ((azs.suffix_storage_endpoint))
  AZURE_TENANT_ID: ((tenant_id))
  AZURE_CLIENT_ID: ((client_id))
  AZURE_CLIENT_SECRET: ((client_secret))
  AZURE_SUBSCRIPTION_ID: ((subscription_id))
  RESOURCE_GROUP: ((NVE.azs.resource_group))
  LOCATION: ((azs.azurestack_region))

credhub_env: &credhub_env
  CREDHUB_CLIENT: ((((foundation))/credhub-client))
  CREDHUB_SECRET: ((((foundation))/credhub-secret))
  CREDHUB_SERVER: ((credhub-server))
  PREFIX: /concourse/main/((foundation))
  CREDHUB_CA_CERT: ((((foundation))/credhub-ca-cert.certificate))



resource_types:
- name: pivnet
  type: docker-image
  source:
    repository: pivotalcf/pivnet-resource
    tag: latest-final
   

resources:
# triggers
#- name: daily-trigger
#  icon: calendar-clock
#  type: time
#  source:
#    interval: 24h


- name: one-time-trigger
  icon: calendar-clock
  type: time
  source:
    interval: 999999h

#- name: after-midnight
#  type: time
#  source:
#    start: 01:00 AM
#    stop: ((after_midnight_end))
#    interval: 24h
#    location: Europe/Berlin 

#- name: installation
#  icon: cloud-download
#  type: s3
#  source:
#    <<: *s3_env
#    bucket: ((buckets.installation))
#    regexp: ((foundation))/installation-(.*).zip    
#- name: platform-automation-pivnet
#  type: pivnet
#  source:
#    api_token: ((((foundation))/pivnet-token))
#    product_slug: platform-automation
#    product_version: 4\.*\.(.*)
#    sort_by: semver


#- name: dps-automation-image
#  icon: cloud-download
#  type: s3
#  source:
#    <<: *s3_env
#    bucket: ((buckets.pivnet_image))
#    regexp: platform-automation-image-(.*).tgz

- name: dps-automation-image
  icon: docker
  type: docker-image
  source:
    repository: bottkars/dps-automation-image
#    tag: v0.1


- name: dps-modules
  tags: ((tags))
  icon: git
  type: git
  check_every: 10m  
  source:  
    uri: https://github.com/bottkars/dps-modules.git
    branch: master

- name: azs-concourse
  tags: ((tags))
  icon: github
  type: git
  check_every: 10m  
  source:  
    uri: https://github.com/bottkars/azs-concourse
    branch: ((azs_concourse_branch))
## product resources
- name: networker
  type: s3
  icon: folder-move
  source:
    <<: *s3_env
    bucket: ((buckets.dps_products))
    regexp: networker/((NVE.VERSION))/AZURE-NVE-(.*).vhd


- name: networker-upgrade
  type: s3
  icon: folder-move
  source:
    <<: *s3_env
    bucket: ((buckets.dps_products))
    regexp: networker/((NVE.VERSION))/NveUpgrade-(.*).avp

jobs:
#- name: get-platform-automation
#  plan:
#  - in_parallel:
#    - get: after-midnight
#      trigger: true
#    - get: platform-automation-pivnet
#      trigger: true
#    - put: dps-automation-image
#      params:
#        file: platform-automation-pivnet/*image*.tgz



- name: deploy-nve-azs
  serial: true
  serial_groups: [ install ]
  plan:
  - get: azs-concourse
    tags: ((tags))
  - get: platform-automation-image
    tags: ((tags))
    params:
      unpack: true
  - get: one-time-trigger
    tags: ((tags))
    trigger: true
  - get: platform-automation-tasks
    tags: ((tags))
    params:
      unpack: true  
#  - task: copy-opsman-image
#    tags: ((tags))
#    file: azs-concourse/ci/tasks/copy-opsman-to-blob.yml  
#    image: platform-automation-image
#    input_mapping:
#      image: opsman-image
#      config: variable
#    params:
#      <<: *azure_env
#      ACCOUNT_NAME: ((azs.image_account_name))
#      ACCOUNT_KEY: ((azs.storage_account_key))
#      DESTINATION_CONTAINER: ((azs.destination_container))
#      OPSMAN_IMAGE_LOCATION: ((opsman_image_location))
  - task: validate-template
    tags: ((tags))
    image: platform-automation-image
    file: azs-concourse/ci/tasks/validate-template.yml  
    params:
      <<: *azure_env
      TEMPLATE_URI: "https://raw.githubusercontent.com/bottkars/201-solution-azurestack-networker/master/azuredeploy.json"
      PARAMETER_FILE: "https://raw.githubusercontent.com/bottkars/201-solution-azurestack-networker/master/azuredeploy.parameters.json"
      ADDITIONAL_PARAMETERS: ((NVE.azs.additional_parameters))
#  - task: deploy-template 
#    tags: ((tags))
#    image: platform-automation-image
#    file: azs-concourse/ci/tasks/deploy-template.yml  
#    params:
#      <<: *azure_env
#      TEMPLATE_URI: "https://raw.githubusercontent.com/bottkars/azure-pcf-opsman-powershell/tanzu/azuredeploy.json"
#      PARAMETER_FILE: "https://raw.githubusercontent.com/bottkars/201-solution-azurestack-networker/master/azuredeploy.parameters.json"
#      ADDITIONAL_PARAMETERS: ((azs.additional_parameters))

##- name: configure-nve
#  plan:
#  - in_parallel:
#    - get: one-time-trigger
#      trigger: true
#    - get: dps-automation-image
#      passed: [ deploy-networker-ova ]
#      params:
#        unpack: true
#      tags: ((tags))        
#    - get: dps-modules
#      tags: ((tags))
#  - task: configure-nve
#    tags: ((tags))
#    image: dps-automation-image
#    file: dps-modules/ci/tasks/configure-nve.yml
#    input_mapping:
#      dps-modules: dps-modules
#    params:
#      GOVC_INSECURE: ((GOVC.INSECURE))
#      GOVC_PASSWORD: ((GOVC.PASSWORD))
#      GOVC_URL: ((GOVC.URL))
#      GOVC_USERNAME: ((GOVC.USERNAME))
#      GOVC_VM: ((NVE.VMNAME))   
#      GOVC_VM_IPATH: ((GOVC.DATACENTER))/vm/((NVE.FOLDER))/((NVE.VMNAME))
#      NVE_FQDN: ((NVE.FQDN))
#      NVE_SETUP_PASSWORD: ((NVE.PASSWORD))  
#      NVE_TIMEZONE: "((NVE.TIMEZONE))"
#      NVE_ADMIN_PASSWORD_OS: ((NVE.PASSWORD)) 
#      NVE_ROOT_PASSWORD_OS: ((NVE.PASSWORD)) 
#      NVE_SNMP_STRING: ((NVE.SNMP_STRING))
#      NVE_DATADOMAIN_HOST: ((NVE.DATADOMAIN_HOST))
#      NVE_STORAGE_PATH: ((NVE.STORAGE_PATH))
#      NVE_DDBOOST_USER: ((NVE.DDBOOST_USER))
#      NVE_NEW_DDBOOST_USER: ((NVE.NEW_DDBOOST_USER))
#      NVE_DDBOOST_USER_PWD: ((NVE.PASSWORD))
#      NVE_DDBOOST_USER_PWD_CF: ((NVE.PASSWORD))
 #     NVE_DATADOMAIN_SYSADMIN: ((NVE.DATADOMAIN_SYSADMIN))
 #     NVE_DATADOMAIN_SYSADMIN_PWD: ((NVE.DATADOMAIN_SYSADMIN_PWD))
#      NVE_TOMCAT_KEYSTORE_PASSWORD: ((NVE.PASSWORD)) 
#      NVE_AUTHC_ADMIN_PASSWORD: ((NVE.PASSWORD))
            
#- name: upgrade-nve
#  plan:
#  - in_parallel:
#    - get: networker-upgrade
#      tags: ((tags))
#      trigger: true
#    - get: one-time-trigger
#      passed: 
#      - configure-nve 
#    - get: dps-automation-image
#      tags: ((tags))        
#    - get: dps-modules
#      tags: ((tags))
#  - task: deploy-networker-upgrade
#    tags: ((tags))
#    image: dps-automation-image
#    file: dps-modules/ci/tasks/deploy-avi-package.yml
#    input_mapping:
#      dps-modules: dps-modules
#      avi_package: networker-upgrade
#    params:
#      GOVC_INSECURE: ((GOVC.INSECURE))
#      GOVC_PASSWORD: ((GOVC.PASSWORD))
#      GOVC_URL: ((GOVC.URL))
#      GOVC_USERNAME: ((GOVC.USERNAME))
#      GOVC_VM: ((NVE.VMNAME))   
#      GOVC_VM_IPATH: ((GOVC.DATACENTER))/vm/((NVE.FOLDER))/((NVE.VMNAME))
#      AVI_FQDN: ((NVE.FQDN))
#      AVI_USERNAME: ((NVE.USERNAME))
#      AVI_PASSWORD: ((NVE.PASSWORD))  
#      AVI_PACKAGE: NveUpgrade
#- name: delete-nve
#  plan:
#  - in_parallel:
#    - get: dps-automation-image
#      params:
#        unpack: true
#      tags: ((tags))
#      passed: [ deploy-networker-ova ]              
#    - get: dps-modules
#      tags: ((tags))
#  - task: delete-nve
#    tags: ((tags))
#    image: dps-automation-image
#    file: dps-modules/ci/tasks/delete-nve.yml
#    input_mapping:
#      dps-modules: dps-modules
#    params:
#      GOVC_INSECURE: ((GOVC.INSECURE))
#      GOVC_PASSWORD: ((GOVC.PASSWORD))
#      GOVC_URL: ((GOVC.URL))
#      GOVC_USERNAME: ((GOVC.USERNAME))
#      GOVC_RESOURCE_POOL: ((GOVC.RESOURCE_POOL))
#      GOVC_DATASTORE: ((GOVC.DATASTORE)) 
#      GOVC_DATACENTER: ((GOVC.DATACENTER)) 
#      GOVC_NETWORK: ((GOVC.NETWORK))
#      NVE_VMNAME: ((NVE.VMNAME))
