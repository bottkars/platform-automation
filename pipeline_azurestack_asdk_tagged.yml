---
s3_env: &s3_env
  access_key_id: ((s3_access_key_id))
  endpoint:  ((s3_endpoint))
  region_name: ((s3_region_name))
  secret_access_key: ((s3_secret_access_key))
azure_env: &azure_env
  PROFILE: ((arm_profile))
  CA_CERT: ((foundation))/cert/root.pem
  AZURE_CLI_CA_PATH: /opt/az/lib/python3.6/site-packages/certifi/cacert.pem
  ENDPOINT_RESOURCE_MANAGER: ((endpoint-resource-manager)) 
  VAULT_DNS:  ((vault-dns))
  SUFFIX_STORAGE_ENDPOINT: ((suffix-storage-endpoint))
  AZURE_TENANT_ID: ((tenant_id))
  AZURE_CLIENT_ID: ((client_id))
  AZURE_CLIENT_SECRET: ((client_secret))
  AZURE_SUBSCRIPTION_ID: ((subscription_id))
  RESOURCE_GROUP: ((resource_group))
  LOCATION: ((azurestack_region))


credhub_env: &credhub_env
  CREDHUB_CLIENT: ((credhub-client))
  CREDHUB_SECRET: ((credhub-secret))
  CREDHUB_SERVER: ((credhub-server))
  PREFIX: /concourse/main/((foundation))
  CREDHUB_CA_CERT: ((credhub-ca-cert.certificate))

stage_steps: &stage_steps
  steps:
    - get: platform-automation-image
      tags: ((tags))
      params:
        unpack: true
    - get: platform-automation-tasks
      tags: ((tags))
      params:
        unpack: true
    - get: templates
      tags: ((tags))
    - get: variable
      tags: ((tags))

stage_config: &stage_config
  image: platform-automation-image
  file: platform-automation-tasks/tasks/staged-config.yml
  input_mapping:
    env: variable

do_stage_commit: &do_stage_commit
  image: platform-automation-image
  file: platform-automation-tasks/tasks/make-git-commit.yml
  input_mapping:
    repository: variable
    file-source: generated-config
  output_mapping:
    repository-commit: variable-commit

true_trigger: &true_trigger
  trigger: true

  
git_commit_env: &git_commit_env
  GIT_AUTHOR_EMAIL: "pcf-pipeline-bot@ebottnet.de"
  GIT_AUTHOR_NAME: "Platform Automation Bot"
  COMMIT_MESSAGE: 'Staged  Config Writer'

slack_start_param: &slack_start_param
  channel: ((slack.channel))
  text: |
    ((foundation)) Job $BUILD_JOB_NAME started with ID $BUILD_ID for 
    build $BUILD_NAME for team $BUILD_TEAM_NAME at
    $ATC_EXTERNAL_URL using pipeline  $BUILD_PIPELINE_NAME
    see $ATC_EXTERNAL_URL/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME
    for details
  icon_emoji: ":concourse-started:"

slack_succeeded_param: &slack_succeeded_param
  channel: ((slack.channel))
  text: |
    ((foundation)) Job $BUILD_JOB_NAME succeeded with ID $BUILD_ID for 
    build $BUILD_NAME for team $BUILD_TEAM_NAME at
    $ATC_EXTERNAL_URL using pipeline  $BUILD_PIPELINE_NAME    
    see $ATC_EXTERNAL_URL/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME
    for details
  icon_emoji: ":concourse-succeeded:"

slack_failed_param: &slack_failed_param
  channel: ((slack.channel))
  text: |
    ((foundation)) Job $BUILD_JOB_NAME failed with ID $BUILD_ID for 
    build $BUILD_NAME for team $BUILD_TEAM_NAME at
    $ATC_EXTERNAL_URL using pipeline  $BUILD_PIPELINE_NAME
    see $ATC_EXTERNAL_URL/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME
    for details
  icon_emoji: ":concourse-failed:"


resource_types:
- name: pivnet
  tags: ((tags))
  type: docker-image
  source:
    repository: pivotalcf/pivnet-resource
    tag: latest-final
- name: slack-notification
  tags: ((tags))
  type: docker-image
  source:
    repository: cfcommunity/slack-notification-resource    
resources:
# triggers
- name: daily-trigger
  tags: ((tags))
  icon: calendar-clock
  type: time
  source:
    interval: 24h


- name: one-time-trigger
  tags: ((tags))
  icon: calendar-clock
  type: time
  source:
    interval: 999999h
#- name: after-lunch
#  tags: ((tags))
#  icon: calendar-clock
#  type: time
#  source:
#    start: 11:59 AM
#    stop: 11:00 PM
#    interval: 24h
#    location: Europe/Berlin 

- name: after-midnight
  tags: ((tags))
  icon: calendar-clock
  type: time
  source:
    start: 01:00 AM
    stop: 6:00 AM
    interval: 24h
    location: Europe/Berlin 
# notifications
- name: notify
  tags: ((tags))
  icon: bell
  type: slack-notification
  source:
    url: ((slack.webhook))
- name: installation
  tags: ((tags))
  icon: amazon-drive
  type: s3
  source:
    <<: *s3_env
    bucket: ((buckets_installation))
    regexp: ((foundation))/installation-(.*).zip    
- name: platform-automation-pivnet
  tags: ((tags))
  icon: cloudfoundry
  type: pivnet
  source:
    api_token: ((pivnet-token))
    product_slug: platform-automation
    product_version: 4\.(.*)
    sort_by: semver

- name: additional-tasks
  tags: ((tags))
  icon: amazon-drive
  type: s3
  source:
    <<: *s3_env
    bucket: ((buckets_pivnet_tasks))
    regexp: additional-tasks-(.*).zip

- name: platform-automation-tasks
  tags: ((tags))
  icon: amazon-drive
  type: s3
  source:
    <<: *s3_env
    bucket: ((buckets_pivnet_tasks))
    regexp: platform-automation-tasks-(.*).zip

- name: platform-automation-image
  tags: ((tags))
  icon: amazon-drive
  type: s3
  source:
    <<: *s3_env
    bucket: ((buckets_pivnet_image))
    regexp: platform-automation-image-(.*).tgz
#- name: pas-product
#  tags: ((tags))
#  icon: amazon-drive
#  type: s3
#  source:
#    <<: *s3_env
#    bucket: ((buckets_pivnet_products))
#    regexp: pas-product/\[elastic-runtime,(.*)\]cf-.*.pivotal

- name: pas-windows-product
  tags: ((tags))
  icon: amazon-drive
  type: s3
  source:
    <<: *s3_env
    bucket: ((buckets_pivnet_products))
    regexp: pas-windows-product/\[pas-windows,(.*)\]pas-windows-.*.pivotal

- name: srt-product
  tags: ((tags))
  icon: amazon-drive
  type: s3
  source:
    <<: *s3_env
    bucket: ((buckets_pivnet_products))
    regexp: srt-product/\[elastic-runtime,(.*)\]srt-.*.pivotal

- name: p-spring-cloud-services-product
  tags: ((tags))
  icon: amazon-drive
  type: s3
  source:
    <<: *s3_env
    bucket: ((buckets_pivnet_products))
    regexp: p-spring-cloud-services-product/\[p-spring-cloud-services,(.*)\]p-spring-cloud-services-.*.pivotal

- name: p-spring-cloud-services-3-product
  tags: ((tags))
  icon: amazon-drive
  type: s3
  source:
    <<: *s3_env
    bucket: ((buckets_pivnet_products))
    regexp: p-spring-cloud-services-3-product/\[p-spring-cloud-services,(.*)\]p_spring-cloud-services-.*.pivotal

- name: p-rabbitmq-product
  tags: ((tags))
  icon: amazon-drive
  type: s3
  source:
    <<: *s3_env
    bucket: ((buckets_pivnet_products))
    regexp: p-rabbitmq-product/\[p-rabbitmq,(.*)\]p-rabbitmq-.*.pivotal

- name: pivotal-mysql-product
  tags: ((tags))
  icon: amazon-drive
  type: s3
  source:
    <<: *s3_env
    bucket: ((buckets_pivnet_products))
    regexp: pivotal-mysql-product/\[pivotal-mysql,(.*)\]pivotal-mysql-.*.pivotal

- name: p-healthwatch-product
  tags: ((tags))
  icon: amazon-drive
  type: s3
  source:
    <<: *s3_env
    bucket: ((buckets_pivnet_products))
    regexp: p-healthwatch-product/\[p-healthwatch,(.*)\]p-healthwatch-.*.pivotal

- name: wavefront-nozzle-product
  tags: ((tags))
  icon: amazon-drive
  type: s3
  source:
    <<: *s3_env
    bucket: ((buckets_pivnet_products))
    regexp: wavefront-nozzle-product/\[wavefront-nozzle,(.*)\]wavefront-nozzle-.*.pivotal

- name: apm-product
  tags: ((tags))
  icon: amazon-drive
  type: s3
  source:
    <<: *s3_env
    bucket: ((buckets_pivnet_products))
    regexp: apm-product/\[apm,(.*)\]apm-.*.pivotal
- name: azure-service-broker-product
  tags: ((tags))
  icon: amazon-drive
  type: s3
  source:
    <<: *s3_env
    bucket: ((buckets_pivnet_products))
    regexp: azure-service-broker-product/\[azure-service-broker,(.*)\]azure-service-broker-.*.pivotal
- name: p-event-alerts-product
  tags: ((tags))
  icon: amazon-drive
  type: s3
  source:
    <<: *s3_env
    bucket: ((buckets_pivnet_products))
    regexp: p-event-alerts-product/\[p-event-alerts,(.*)\]p-event-alerts-.*.pivotal
- name: p-compliance-scanner-product
  tags: ((tags))
  icon: amazon-drive
  type: s3
  source:
    <<: *s3_env
    bucket: ((buckets_pivnet_products))
    regexp: p-compliance-scanner-product/\[p-compliance-scanner,(.*)\]p-compliance-scanner-.*.pivotal


- name: container-services-manager-product
  tags: ((tags))
  icon: amazon-drive
  type: s3
  source:
    <<: *s3_env
    bucket: ((buckets_pivnet_products))
    regexp: container-services-manager-product/\[container-services-manager,(.*)\]ksm-.*.pivotal


# container-services-manager
#- name: pas-stemcell
#  tags: ((tags))
#  icon: amazon-drive
#  type: s3
#  source:
#    <<: *s3_env
#    bucket: ((buckets_pivnet_products))
#    regexp: pas-stemcell/\[stemcells-ubuntu-xenial,(.*)\]bosh-stemcell-.*-azure.*\.tgz

- name: srt-stemcell
  tags: ((tags))
  icon: amazon-drive
  type: s3
  source:
    <<: *s3_env
    bucket: ((buckets_pivnet_products))
    regexp: srt-stemcell/\[stemcells-ubuntu-xenial,(.*)\]bosh-stemcell-.*-azure.*\.tgz

- name: p-spring-cloud-services-stemcell
  tags: ((tags))
  icon: amazon-drive
  type: s3
  source:
    <<: *s3_env
    bucket: ((buckets_pivnet_products))
    regexp: p-spring-cloud-services-stemcell/\[stemcells-ubuntu-xenial,(.*)\]bosh-stemcell-.*-azure.*\.tgz

- name: p-spring-cloud-services-3-stemcell
  tags: ((tags))
  icon: amazon-drive
  type: s3
  source:
    <<: *s3_env
    bucket: ((buckets_pivnet_products))
    regexp: p-spring-cloud-services-3-stemcell/\[stemcells-ubuntu-xenial,(.*)\]bosh-stemcell-.*-azure.*\.tgz

- name: p-rabbitmq-stemcell
  tags: ((tags))
  icon: amazon-drive
  type: s3
  source:
    <<: *s3_env
    bucket: ((buckets_pivnet_products))
    regexp: p-rabbitmq-stemcell/\[stemcells-ubuntu-xenial,(.*)\]bosh-stemcell-.*-azure.*\.tgz

- name: pivotal-mysql-stemcell
  tags: ((tags))
  icon: amazon-drive
  type: s3
  source:
    <<: *s3_env
    bucket: ((buckets_pivnet_products))
    regexp: pivotal-mysql-stemcell/\[stemcells-ubuntu-xenial,(.*)\]bosh-stemcell-.*-azure.*.tgz

- name: p-healthwatch-stemcell
  tags: ((tags))
  icon: amazon-drive
  type: s3
  source:
    <<: *s3_env
    bucket: ((buckets_pivnet_products))
    regexp: p-healthwatch-stemcell/\[stemcells-ubuntu-xenial,(.*)\]bosh-stemcell-.*-azure.*.tgz


- name: wavefront-nozzle-stemcell
  tags: ((tags))
  icon: amazon-drive
  type: s3
  source:
    <<: *s3_env
    bucket: ((buckets_pivnet_products))
    regexp: wavefront-nozzle-stemcell/\[stemcells-ubuntu-xenial,(.*)\]bosh-stemcell-.*-azure.*.tgz

- name: p-event-alerts-stemcell
  tags: ((tags))
  icon: amazon-drive
  type: s3
  source:
    <<: *s3_env
    bucket: ((buckets_pivnet_products))
    regexp: p-event-alerts-stemcell/\[stemcells-ubuntu-xenial,(.*)\]bosh-stemcell-.*-azure.*\.tgz

- name: apm-stemcell
  tags: ((tags))
  icon: amazon-drive
  type: s3
  source:
    <<: *s3_env
    bucket: ((buckets_pivnet_products))
    regexp: apm-stemcell/\[stemcells-ubuntu-xenial,(.*)\]bosh-stemcell-.*-azure.*\.tgz

- name: azure-service-broker-stemcell
  tags: ((tags))
  icon: amazon-drive
  type: s3
  source:
    <<: *s3_env
    bucket: ((buckets_pivnet_products))
    regexp: azure-service-broker-stemcell/\[stemcells-ubuntu-xenial,(.*)\]bosh-stemcell-.*-azure.*\.tgz

- name: p-compliance-scanner-stemcell
  tags: ((tags))
  icon: amazon-drive
  type: s3
  source:
    <<: *s3_env
    bucket: ((buckets_pivnet_products))
    regexp: p-compliance-scanner-stemcell/\[stemcells-ubuntu-xenial,(.*)\]bosh-stemcell-.*-azure.*\.tgz


- name: pas-windows-stemcell
  tags: ((tags))
  icon: amazon-drive
  type: s3
  source:
    <<: *s3_env
    bucket: ((buckets_pivnet_products))
    regexp: pas-windows-stemcell/\[stemcells-windows-server,(.*)\]light-bosh-stemcell-2019.*-azure.*\.tgz

- name: opsman-product
  type: s3
  source:
    <<: *s3_env
    bucket: ((buckets_pivnet_products))
    regexp: \[ops-manager,(.*)\].*.yml

- name: templates
  tags: ((tags))
  icon: github-circle
  type: git  
  source:
    uri: ((template-repo))
    private_key: ((template-deploy-key.private_key))
    branch: master

- name: variable
  tags: ((tags))
  icon: github-circle
  type: git  
  source:
    uri: ((variable-repo))
    private_key: ((variable-deploy-key.private_key))
    branch: master
##
- name: azs-concourse
  tags: ((tags))
  icon: github-circle
  type: git  
  source: 
    uri: https://github.com/bottkars/azs-concourse
    branch: master
 #   private_key: ((azs-resource-key.private_key))

#- name: az-cli-image
#  tags: ((tags))
#  icon: azure
#  type: docker-image
#  source: 
#    repository: microsoft/azure-cli
#    tag: latest

interpolate-product-downloads: &interpolate-product-downloads
  image: platform-automation-image
  file: platform-automation-tasks/tasks/credhub-interpolate.yml
  params:
    <<: *credhub_env
    INTERPOLATION_PATHS: "download-product-configs/((tas_version))"
  input_mapping:
    files: templates
  output_mapping:
    interpolated-files: interpolated-product-downloads

interpolate-product-templates: &interpolate-product-templates
  image: platform-automation-image
  file: platform-automation-tasks/tasks/credhub-interpolate.yml
  params:
    <<: *credhub_env
    INTERPOLATION_PATHS: product-configs/((tas_version))
    SKIP_MISSING: true
  input_mapping:
    files: templates
  output_mapping:
    interpolated-files: interpolated-product-templates

jobs:
- name: test-azcli 
  on_failure:
    put: notify
    tags: ((tags))
    params:
      <<: *slack_failed_param
  on_success:  
    put: notify
    tags: ((tags))
    params:
      <<: *slack_succeeded_param
  plan:
  - put: notify
    tags: ((tags))
    params:
     <<: *slack_start_param
  - put: notify
    tags: ((tags))
    params:
     <<: *slack_start_param
  - get: azs-concourse
    tags: ((tags))
  - get: platform-automation-image
    tags: ((tags))
    params:
      unpack: true
  - task: test-azcli
    tags: ((tags))
    image: platform-automation-image
    file: azs-concourse/ci/tasks/test-task.yml

- name: run-azcli-get-vms
  on_failure:
    put: notify
    tags: ((tags))
    params:
      <<: *slack_failed_param
  on_success:  
    put: notify
    tags: ((tags))
    params:
      <<: *slack_succeeded_param  
  plan:
  - put: notify
    tags: ((tags))
    params:
      <<: *slack_start_param
  - get: variable
    tags: ((tags))
  - get: azs-concourse
    tags: ((tags))
  - get: platform-automation-image
    tags: ((tags))
    params:
      unpack: true
  - task: get-vms
    tags: ((tags))
    image: platform-automation-image
    file: azs-concourse/ci/tasks/get-vms.yml  
    input_mapping:
      config: variable
    params:
      <<: *azure_env
- name: deploy-opsman-from-arm
  on_failure:
    put: notify
    tags: ((tags))
    params:
      <<: *slack_failed_param
  on_success:  
    put: notify
    tags: ((tags))
    params:
      <<: *slack_succeeded_param  
  plan:
  - put: notify
    tags: ((tags))
    params:
      <<: *slack_start_param
  - in_parallel:
    - get: variable
      tags: ((tags))
    - get: azs-concourse
      tags: ((tags))
    - get: platform-automation-image
      tags: ((tags))
      params:
        unpack: true
    - get: opsman-product
      tags: ((tags))
  - task: validate-template
    tags: ((tags))
    image: platform-automation-image
    file: azs-concourse/ci/tasks/validate-template.yml  
    input_mapping:
      config: variable
    params:
      <<: *azure_env
      TEMPLATE_URI: "https://raw.githubusercontent.com/bottkars/azure-pcf-opsman-powershell/testing/azuredeploy.json"
      PARAMETER_FILE: ((foundation))/config/parameters_opsman.json

      BOSHSTORAGEACCOUNT: ((boshstorageaccount))
      ADDITIONAL_PARAMETERS: "OpsManImageURI=https://opsmanagerimage.blob.local.azurestack.external/images/((opsman_image))"
  - task: deploy-opsman-template 
    tags: ((tags))
    image: platform-automation-image
    file: azs-concourse/ci/tasks/deploy-opsman-template.yml  
    input_mapping:
      config: variable
      image: opsman-product
    params:
      <<: *azure_env
      TEMPLATE_URI: "https://raw.githubusercontent.com/bottkars/azure-pcf-opsman-powershell/testing/azuredeploy.json"
      PARAMETER_FILE: ((foundation))/config/parameters_opsman.json

      BOSHSTORAGEACCOUNT: ((boshstorageaccount))
      OPSMAN_URL: ((opsman-url))


- name: get-opsman-image-azure
  on_failure:
    put: notify
    tags: ((tags))
    params:
      <<: *slack_failed_param
  on_success:  
    put: notify
    tags: ((tags))
    params:
      <<: *slack_succeeded_param
  serial: true
  serial_groups: [ get-products, upgrade-opsman, opsman ]
  plan:
  - put: notify
    tags: ((tags))
    params:
      <<: *slack_start_param
  - in_parallel:
    - get: templates
      tags: ((tags))
    - get: opsman-product
      tags: ((tags))
      passed: 
      trigger: true
    - get: one-time-trigger
      tags: ((tags))
      trigger: true
    - get: installation
      tags: ((tags))
    - get: azs-concourse
      tags: ((tags))
    - get: platform-automation-image
      tags: ((tags))
      params:
        unpack: true
    - get: variable
      tags: ((tags))
  - task: copy-opsman-image
    tags: ((tags))
    file: azs-concourse/ci/tasks/copy-opsman-to-blob.yml  
    image: platform-automation-image
    input_mapping:
      image: opsman-product
      config: variable
    params:
      <<: *azure_env
      ACCOUNT_NAME: ((image_account_name))
      ACCOUNT_KEY: ((storage_account_key))
      DESTINATION_CONTAINER: ((destination_container))
      OPSMAN_IMAGE_LOCATION: ((opsman_image_location))
- name: delete-opsman-vm
  on_failure:
    put: notify
    tags: ((tags))
    params:
      <<: *slack_failed_param
  on_success:  
    put: notify
    tags: ((tags))
    params:
      <<: *slack_succeeded_param  
  plan:
  - put: notify
    tags: ((tags))
    params:
      <<: *slack_start_param
  - get: variable
    tags: ((tags))
  - get: azs-concourse
    tags: ((tags))
  - get: platform-automation-image
    tags: ((tags))
    params:
      unpack: true
  - task: delete-vm
    tags: ((tags))
    image: platform-automation-image
    file: azs-concourse/ci/tasks/delete-vm.yml  
    input_mapping:
      config: variable
    params:
      <<: *azure_env
      VM_NAME: ((ops_man_vmname))
      
- name: delete-orphan-azurevm-images
  on_failure:
    put: notify
    tags: ((tags))
    params:
      <<: *slack_failed_param
  on_success:  
    put: notify
    tags: ((tags))
    params:
      <<: *slack_succeeded_param  
  plan:
  - put: notify
    tags: ((tags))
    params:
      <<: *slack_start_param
  - get: variable
    tags: ((tags))
  - get: azs-concourse
    tags: ((tags))
  - get: platform-automation-image
    tags: ((tags))
    params:
      unpack: true
  - task: delete-images
    tags: ((tags))
    image: platform-automation-image
    file: azs-concourse/ci/tasks/delete-vm-images.yml  
    input_mapping:
      config: variable
    params:
      <<: *azure_env


- name: delete-unattached-azure-disks
  on_failure:
    put: notify
    tags: ((tags))
    params:
      <<: *slack_failed_param
  on_success:  
    put: notify
    tags: ((tags))
    params:
      <<: *slack_succeeded_param  
  plan:
  - put: notify
    tags: ((tags))
    params:
      <<: *slack_start_param
  - get: variable
    tags: ((tags))
  - get: azs-concourse
    tags: ((tags))
  - get: platform-automation-image
    tags: ((tags))
    params:
      unpack: true
  - task: delete-azure-disks
    tags: ((tags))
    image: platform-automation-image
    file: azs-concourse/ci/tasks/delete-unattached-disks.yml  
    input_mapping:
      config: variable
    params:
      <<: *azure_env


- name: query-unattached-azure-disks
  on_failure:
    put: notify
    tags: ((tags))
    params:
      <<: *slack_failed_param
  on_success:  
    put: notify
    tags: ((tags))
    params:
      <<: *slack_succeeded_param  
  plan:
  - put: notify
    tags: ((tags))
    params:
      <<: *slack_start_param
  - get: variable
    tags: ((tags))
  - get: azs-concourse
    tags: ((tags))
  - get: platform-automation-image
    tags: ((tags))
    params:
      unpack: true
  - task: query-azure-disks
    tags: ((tags))
    image: platform-automation-image
    file: azs-concourse/ci/tasks/query-unattached-disks.yml 
    input_mapping:
      config: variable
    params:
      <<: *azure_env


- name: query-unattached-azure-nics
  on_failure:
    put: notify
    tags: ((tags))
    params:
      <<: *slack_failed_param
  on_success:  
    put: notify
    tags: ((tags))
    params:
      <<: *slack_succeeded_param  
  plan:
  - put: notify
    tags: ((tags))
    params:
      <<: *slack_start_param
  - get: variable
    tags: ((tags))
  - get: azs-concourse
    tags: ((tags))
  - get: platform-automation-image
    tags: ((tags))
    params:
      unpack: true
  - task: query-azure-nics
    tags: ((tags))
    image: platform-automation-image
    file: azs-concourse/ci/tasks/query-unattached-nics.yml 
    input_mapping:
      config: variable
    params:
      <<: *azure_env


- name: delete-unattached-azure-nics
  on_failure:
    put: notify
    tags: ((tags))
    params:
      <<: *slack_failed_param
  on_success:  
    put: notify
    tags: ((tags))
    params:
      <<: *slack_succeeded_param  
  plan:
  - put: notify
    tags: ((tags))
    params:
      <<: *slack_start_param
  - get: variable
    tags: ((tags))
  - get: azs-concourse
    tags: ((tags))
  - get: platform-automation-image
    tags: ((tags))
    params:
      unpack: true
  - task: delete-azure-nics
    tags: ((tags))
    image: platform-automation-image
    file: azs-concourse/ci/tasks/delete-unattached-nics.yml 
    input_mapping:
      config: variable
    params:
      <<: *azure_env



- name: delete-pcf
  on_failure:
    put: notify
    tags: ((tags))
    params:
      <<: *slack_failed_param
  on_success:  
    put: notify
    tags: ((tags))
    params:
      <<: *slack_succeeded_param  
  plan:
  - put: notify
    tags: ((tags))
    params:
      <<: *slack_start_param
  - get: variable
    tags: ((tags))
  - get: azs-concourse
    tags: ((tags))
  - get: platform-automation-image
    tags: ((tags))
    params:
      unpack: true
  - task: delete-rg
    tags: ((tags))
    image: platform-automation-image
    file: azs-concourse/ci/tasks/delete-resourcegroup.yml  
    input_mapping:
      config: variable
    params:
      <<: *azure_env

     

## opsman starts here
- name: install-opsman
  on_failure:
    put: notify
    tags: ((tags))
    params:
      <<: *slack_failed_param
  on_success:  
    put: notify
    tags: ((tags))
    params:
      <<: *slack_succeeded_param
  serial: true
  serial_groups: [ install ]
  plan:
  - put: notify
    tags: ((tags))
    params:
      <<: *slack_start_param
  - get: variable
    tags: ((tags))
  - get: templates
    tags: ((tags))
  - get: azs-concourse
    tags: ((tags))
  - get: platform-automation-image
    tags: ((tags))
    params:
      unpack: true
  - get: one-time-trigger
    tags: ((tags))
    trigger: true
  - get: platform-automation-tasks
    tags: ((tags))
    params:
      unpack: true
  - get: additional-tasks
    tags: ((tags))
    params:
      unpack: true      
  - put: notify
    tags: ((tags))
    params:
      <<: *slack_start_param
  - task: interpolate-product-templates
    tags: ((tags))
    <<: *interpolate-product-templates          
  - task: interpolate-product-downloads
    tags: ((tags))
    <<: *interpolate-product-downloads
  - task: download-opsman-pivnet
    tags: ((tags))
    image: platform-automation-image
    file: platform-automation-tasks/tasks/download-product.yml
    input_mapping:
      config: interpolated-product-downloads      
    params:
      CONFIG_FILE: download-product-configs/((tas_version))/download-opsman.yml
  - in_parallel:
    - put: opsman-product
      tags: ((tags))
      params:
        file: downloaded-product/*     
  - task: download-opsman-s3
    tags: ((tags))
    image: platform-automation-image
    file: platform-automation-tasks/tasks/download-product-s3.yml
    params:
      CONFIG_FILE: download-product-configs/((tas_version))/download-opsman.yml
    input_mapping:
      config: interpolated-product-downloads
    output_mapping:
      downloaded-product: opsman-image
  - task: copy-opsman-image
    tags: ((tags))
    file: azs-concourse/ci/tasks/copy-opsman-to-blob.yml  
    image: platform-automation-image
    input_mapping:
      image: opsman-product
      config: variable
    params:
      <<: *azure_env
      ACCOUNT_NAME: ((image_account_name))
      ACCOUNT_KEY: ((storage_account_key))
      DESTINATION_CONTAINER: ((destination_container))
      OPSMAN_IMAGE_LOCATION: ((opsman_image_location))
  - task: validate-template
    tags: ((tags))
    image: platform-automation-image
    file: azs-concourse/ci/tasks/validate-pcf-template.yml  
    input_mapping:
      config: variable
      image: opsman-product
    params:
      <<: *azure_env
      TEMPLATE_URI: "https://raw.githubusercontent.com/bottkars/azure-pcf-opsman-powershell/testing/azuredeploy.json"
      PARAMETER_FILE: ((foundation))/config/parameters_opsman.json
      BOSHSTORAGEACCOUNT: ((boshstorageaccount))
      VM_NAME: ((ops_man_vmname))
  - task: deploy-opsman-template 
    tags: ((tags))
    image: platform-automation-image
    file: azs-concourse/ci/tasks/deploy-pcf-template.yml  
    input_mapping:
      config: variable
      image: opsman-product
    params:
      <<: *azure_env
      TEMPLATE_URI: "https://raw.githubusercontent.com/bottkars/azure-pcf-opsman-powershell/testing/azuredeploy.json"
      PARAMETER_FILE: ((foundation))/config/parameters_opsman.json
      BOSHSTORAGEACCOUNT: ((boshstorageaccount))
      STATE_FILE: director_deployment_vars.yml
      ACCOUNT_NAME: ((image_account_name))
      DESTINATION_CONTAINER: ((destination_container))
      OPSMAN_IMAGE_LOCATION: ((opsman_image_location))
      VM_NAME: ((ops_man_vmname))
    on_success: &make-config-director-commit
      do:
        - task: make-commit
          tags: ((tags))
          image: platform-automation-image
          file: platform-automation-tasks/tasks/make-git-commit.yml
          input_mapping:
            repository: variable
            file-source: generated-state
          output_mapping:
            repository-commit: variable-commit
          params:
            FILE_SOURCE_PATH: director_deployment_vars.yml
            FILE_DESTINATION_PATH: ((foundation))/vars/director_deployment_vars.yml
            GIT_AUTHOR_EMAIL: "pcf-pipeline-bot@example.com"
            GIT_AUTHOR_NAME: "Platform Automation Bot"
            COMMIT_MESSAGE: 'Update director state file'
        - put: variable
          tags: ((tags))
          params:
            repository: variable-commit
            merge: true
  - task: validate-vm
    tags: ((tags))
    image: platform-automation-image
    file: azs-concourse/ci/tasks/query-vm.yml  
    input_mapping:
      config: variable
    params:
      <<: *azure_env
      VM_NAME: ((ops_man_vmname))
      STATE_FILE: ((foundation))/state/state.yml 
    ensure: &make-state-commit
      do:
        - task: make-commit
          tags: ((tags))
          image: platform-automation-image
          file: platform-automation-tasks/tasks/make-git-commit.yml
          input_mapping:
            repository: variable
            file-source: generated-state
          output_mapping:
            repository-commit: variable-commit
          params:
            FILE_SOURCE_PATH: state.yml
            FILE_DESTINATION_PATH: ((foundation))/state/state.yml
            GIT_AUTHOR_EMAIL: "pcf-pipeline-bot@example.com"
            GIT_AUTHOR_NAME: "Platform Automation Bot"
            COMMIT_MESSAGE: 'Update state file'
        - put: variable
          tags: ((tags))
          params:
            repository: variable-commit
            merge: true
  - task: configure-saml-authentication
    tags: ((tags))
    image: platform-automation-image
    file: platform-automation-tasks/tasks/configure-saml-authentication.yml
    attempts: 10
    input_mapping:
      env: variable
      config: variable
    params:
      ENV_FILE: ((foundation))/env/env.yml
      AUTH_CONFIG_FILE: ((foundation))/config/auth.yml 
  - task: update om certficates
    tags: ((tags))
    image: platform-automation-image
    file: additional-tasks/tasks/update-ssl-certificate.yml
    attempts: 10
    input_mapping:
      env: variable
    params:
      ENV_FILE: ((foundation))/env/env.yml
      CERTIFICATE_PEM: ((pcf_domain_cert.certificate))
      KEY_PEM: ((pcf_domain_cert.private_key))                
  - task: configure-director
    tags: ((tags))
    image: platform-automation-image
    file: platform-automation-tasks/tasks/configure-director.yml 
    input_mapping:
      config: interpolated-product-templates
      env: variable
      vars: variable
    params:
      VARS_FILES: vars/((foundation))/vars/director-vars.yml vars/((foundation))/vars/director_deployment_vars.yml
      ENV_FILE: ((foundation))/env/env.yml
      DIRECTOR_CONFIG_FILE: product-configs/((tas_version))/director-azurestack.yml
  - task: configure-extensions
    tags: ((tags))
    image: platform-automation-image
    file: platform-automation-tasks/tasks/configure-director.yml 
    input_mapping:
      config: interpolated-product-templates
      env: variable
      vars: variable
    params:
      VARS_FILES: vars/((foundation))/vars/director-vars.yml vars/((foundation))/vars/director_deployment_vars.yml
      ENV_FILE: ((foundation))/env/env.yml
      DIRECTOR_CONFIG_FILE: product-configs/((tas_version))/extensions-azurestack.yml
  - task: configure-custom-vmtypes
    tags: ((tags))
    image: platform-automation-image
    file: platform-automation-tasks/tasks/configure-director.yml 
    input_mapping:
      config: interpolated-product-templates
      env: variable
      vars: variable
    params:
      VARS_FILES: vars/((foundation))/vars/director-vars.yml vars/((foundation))/vars/director_deployment_vars.yml
      ENV_FILE: ((foundation))/env/env.yml
      DIRECTOR_CONFIG_FILE: product-configs/((tas_version))/extensions-azure.yml
  - task: apply-director-changes
    tags: ((tags))
    image: platform-automation-image
    file: platform-automation-tasks/tasks/apply-director-changes.yml
    input_mapping:
      env: variable
    params:
      ENV_FILE: ((foundation))/env/env.yml
  - task: export-installation
    tags: ((tags))
    image: platform-automation-image
    file: platform-automation-tasks/tasks/export-installation.yml
    input_mapping:
      env: variable
    params:
      ENV_FILE: ((foundation))/env/env.yml
      INSTALLATION_FILE: installation-$timestamp.zip
  - put: installation
    tags: ((tags))
    params:
      file: installation/installation*.zip
- name: get-opsman-pivnet
  on_failure:
    put: notify
    tags: ((tags))
    params:
      <<: *slack_failed_param
  on_success:  
    put: notify
    tags: ((tags))
    params:
      <<: *slack_succeeded_param
  serial_groups: [ get-products ]
  plan:
  - put: notify
    tags: ((tags))
    params:
      <<: *slack_start_param
  - in_parallel:
    - get: after-midnight
      tags: ((tags))
      trigger: true
    - get: platform-automation-image
      tags: ((tags))
      params:
        unpack: true
    - get: platform-automation-tasks
      tags: ((tags))
      params:
        unpack: true
    - get: templates
      tags: ((tags))
  - task: interpolate-product-downloads
    tags: ((tags))
    <<: *interpolate-product-downloads
  - task: download-opsman-pivnet
    tags: ((tags))
    image: platform-automation-image
    file: platform-automation-tasks/tasks/download-product.yml
    input_mapping:
      config: interpolated-product-downloads      
    params:
      CONFIG_FILE: download-product-configs/((tas_version))/download-opsman.yml
  - in_parallel:
    - put: opsman-product
      tags: ((tags))
      params:
        file: downloaded-product/*
        
- name: testing
  on_failure:
    put: notify
    tags: ((tags))
    params:
      <<: *slack_failed_param
  on_success:  
    put: notify
    tags: ((tags))
    params:
      <<: *slack_succeeded_param
  plan:
  - put: notify
    tags: ((tags))
    params:
      <<: *slack_start_param
  - get: opsman-product
    tags: ((tags))
  - get: azs-concourse
    tags: ((tags))
  - get: platform-automation-image
    tags: ((tags))
    params:
      unpack: true
  - task: test-azcli
    tags: ((tags))
    image: platform-automation-image
    input_mapping:
      image: opsman-product
    file: azs-concourse/ci/tasks/task1.yml


- name: staged-director-config
  on_failure:
    put: notify
    tags: ((tags))
    params:
      <<: *slack_failed_param
  on_success:  
    put: notify
    tags: ((tags))
    params:
      <<: *slack_succeeded_param
  serial: true
  serial_groups: [ staged-products ]
  plan:
  - put: notify
    tags: ((tags))
    params:
      <<: *slack_start_param
  - in_parallel:
    - get: platform-automation-tasks
      tags: ((tags))
      params: {unpack: true}
    - get: platform-automation-image
      tags: ((tags))
      params: {unpack: true}
    - get: variable
      tags: ((tags))

  - task: staged-director-config
    tags: ((tags))
    image: platform-automation-image
    file: platform-automation-tasks/tasks/staged-director-config.yml
    input_mapping:
      env: variable
    params:
      ENV_FILE: ((foundation))/env/env.yml
    ensure: *make-state-commit

- name: export-installation
  on_failure:
    put: notify
    tags: ((tags))
    params:
      <<: *slack_failed_param
  on_success:  
    put: notify
    tags: ((tags))
    params:
      <<: *slack_succeeded_param
  serial: true
  serial_groups: [ install, get-products, upgrade-opsman, opsman, apply ]
  plan:
  - put: notify
    tags: ((tags))
    params:
      <<: *slack_start_param
  - in_parallel:
    - get: daily-trigger
      tags: ((tags))
      trigger: true
    - get: platform-automation-image
      tags: ((tags))
      params:
        unpack: true
    - get: platform-automation-tasks
      tags: ((tags))
      params:
        unpack: true
    - get: templates
      tags: ((tags))
    - get: variable
      tags: ((tags))
    - get: one-time-trigger
      passed:
      - install-opsman

  - task: export-installation
    tags: ((tags))
    image: platform-automation-image
    file: platform-automation-tasks/tasks/export-installation.yml
    input_mapping:
      env: variable
    params:
      ENV_FILE: ((foundation))/env/env.yml
      INSTALLATION_FILE: installation-$timestamp.zip
  - put: installation
    tags: ((tags))
    params:
      file: installation/installation*.zip

- name: upgrade-opsman
  serial: true
  serial_groups: [ install, get-products, upgrade-opsman, opsman, apply ]
  on_failure:
    put: notify
    tags: ((tags))
    params:
      <<: *slack_failed_param
  on_success:  
    put: notify
    tags: ((tags))
    params:
      <<: *slack_succeeded_param
  plan:
  - put: notify
    tags: ((tags))
    params:
      <<: *slack_start_param
  - in_parallel:
    - get: one-time-trigger
      tags: ((tags))
      passed: [ export-installation ]
    - get: azs-concourse  
      tags: ((tags))
    - get: platform-automation-image
      tags: ((tags))
      params:
        unpack: true
      trigger: true  
    - get: platform-automation-tasks
      tags: ((tags))
      params:
        unpack: true
    - get: installation
      tags: ((tags))
      passed: [ export-installation ]
    - get: templates
      tags: ((tags))
    - get: variable
      tags: ((tags))
    - get: opsman-product
      tags: ((tags))
      trigger: true
    - get: additional-tasks
      tags: ((tags))
      params:
        unpack: true
  - task: interpolate-product-downloads
    tags: ((tags))
    <<: *interpolate-product-downloads     
  - task: download-opsman-s3
    tags: ((tags))
    image: platform-automation-image
    file: platform-automation-tasks/tasks/download-product-s3.yml
    params:
      CONFIG_FILE: download-product-configs/((tas_version))/download-opsman.yml
    input_mapping:
      config: interpolated-product-downloads
    output_mapping:
      downloaded-product: opsman-image
  - task: upgrade-opsman-vm
    tags: ((tags))
    image: platform-automation-image
    file: azs-concourse/ci/tasks/upgrade-opsman-template.yml  
    input_mapping:
      config: variable
      image: opsman-product
    params:
      <<: *azure_env
      TEMPLATE_URI: "https://raw.githubusercontent.com/bottkars/azure-pcf-opsman-powershell/testing/azuredeploy_update.json"
      PARAMETER_FILE: ((foundation))/config/parameters_opsman_update.json
      ACCOUNT_NAME: ((image_account_name))
      STATE_FILE: state.yml
      OPSMAN_URL: ((opsman-url))
      VM_NAME: ((ops_man_vmname))
    ensure: *make-state-commit
  - task: import-installation
    tags: ((tags))
    image: platform-automation-image
    file: platform-automation-tasks/tasks/import-installation.yml
    attempts: 10
    params:
      ENV_FILE: ((foundation))/env/env.yml
      INSTALLATION_FILE: installation*.zip
    input_mapping:
      env: variable
      installation: installation
#  - task: update om certficates
#    tags: ((tags))
#    image: platform-automation-image
#    file: additional-tasks/tasks/update-ssl-certificate.yml
#    attempts: 10
#    input_mapping:
#      env: variable
#    params:
#      ENV_FILE: ((foundation))/env/env.yml
#      CERTIFICATE_PEM: ((pcf_domain_cert.certificate))
#      KEY_PEM: ((pcf_domain_cert.private_key))    
    
  - task: apply-director-changes
    tags: ((tags))
    image: platform-automation-image
    file: platform-automation-tasks/tasks/apply-director-changes.yml
    input_mapping:
      env: variable
    params:
      ENV_FILE: ((foundation))/env/env.yml

- name: get-platform-automation
  on_failure:
    put: notify
    tags: ((tags))
    params:
      <<: *slack_failed_param
  on_success:  
    put: notify
    tags: ((tags))
    params:
      <<: *slack_succeeded_param
  plan:
  - put: notify
    tags: ((tags))
    params:
      <<: *slack_start_param
  - in_parallel:
    - get: after-midnight
      tags: ((tags))
      trigger: true
    - get: platform-automation-pivnet
      tags: ((tags))
      trigger: true
  - in_parallel:
    - put: platform-automation-tasks
      tags: ((tags))
      params:
        file: platform-automation-pivnet/*tasks*.zip
    - put: platform-automation-image
      tags: ((tags))
      params:
        file: platform-automation-pivnet/*image*.tgz

- name: test-interpolate
  on_failure:
    put: notify
    tags: ((tags))
    params:
      <<: *slack_failed_param
  on_success:  
    put: notify
    tags: ((tags))
    params:
      <<: *slack_succeeded_param
  plan:
  - put: notify
    tags: ((tags))
    params:
      <<: *slack_start_param
  - get: variable
    tags: ((tags))
  - get: templates
    tags: ((tags))
  - get: platform-automation-image
    tags: ((tags))
    params:
      unpack: true
  - get: platform-automation-tasks
    tags: ((tags))
    params:
      unpack: true
  - task: interpolate
    tags: ((tags))
    image: platform-automation-image
    file: platform-automation-tasks/tasks/test-interpolate.yml
    input_mapping:
      config: templates
      vars: variable
    params:
      CONFIG_FILE: product-configs/((tas_version))/p-event-alerts.yml
      VARS_FILES: vars/((foundation))/vars/p-event-alerts-vars.yml
      SKIP_MISSING: true    
- name: test-interpolate-srt
  plan:
  - put: notify
    tags: ((tags))
    params:
      <<: *slack_start_param
  - get: variable
    tags: ((tags))
  - get: templates
    tags: ((tags))
  - get: platform-automation-image
    tags: ((tags))
    params:
      unpack: true
  - get: platform-automation-tasks
    tags: ((tags))
    params:
      unpack: true
  - task: interpolate
    tags: ((tags))
    image: platform-automation-image
    file: platform-automation-tasks/tasks/test-interpolate.yml
    input_mapping:
      config: templates
      vars: variable
    params:
      CONFIG_FILE: product-configs/((tas_version))/srt.yml
      VARS_FILES: vars/((foundation))/vars/srt-vars.yml
      SKIP_MISSING: true  





- name: get-srt
  on_failure:
    put: notify
    tags: ((tags))
    params:
      <<: *slack_failed_param
  on_success:  
    put: notify
    tags: ((tags))
    params:
      <<: *slack_succeeded_param
  serial: true
  serial_groups: [ get-products ]
  plan:
  - put: notify
    tags: ((tags))
    params:
      <<: *slack_start_param
  - in_parallel:
    - get: after-midnight
      tags: ((tags))
      trigger: true
    - get: platform-automation-image
      tags: ((tags))
      params:
        unpack: true
    - get: platform-automation-tasks
      tags: ((tags))
      params:
        unpack: true
    - get: templates
      tags: ((tags))
  - task: interpolate-product-downloads
    tags: ((tags))
    <<: *interpolate-product-downloads
  - task: download-srt-product-and-stemcell
    tags: ((tags))
    image: platform-automation-image
    file: platform-automation-tasks/tasks/download-product.yml
    params:
      CONFIG_FILE: download-product-configs/((tas_version))/download-srt.yml
    input_mapping:
      config: interpolated-product-downloads
    output_mapping: {downloaded-stemcell: srt-stemcell}
  - in_parallel:
    - put: srt-product
      tags: ((tags))
      params:
        file: downloaded-product/*.pivotal
    - put: srt-stemcell
      tags: ((tags))
      params:
        file: srt-stemcell/*.tgz

- name: get-p-spring-cloud-services
  on_failure:
    put: notify
    tags: ((tags))
    params:
      <<: *slack_failed_param
  on_success:  
    put: notify
    tags: ((tags))
    params:
      <<: *slack_succeeded_param
  serial: true
  serial_groups: [ get-products ]
  plan:
  - put: notify
    tags: ((tags))
    params:
      <<: *slack_start_param
  - in_parallel:
    - get: after-midnight
      tags: ((tags))
      trigger: true
    - get: platform-automation-image
      tags: ((tags))
      params:
        unpack: true
    - get: platform-automation-tasks
      tags: ((tags))
      params:
        unpack: true
    - get: templates
      tags: ((tags))
  - task: interpolate-product-downloads
    tags: ((tags))
    <<: *interpolate-product-downloads
  - task: download-p-spring-cloud-services-product-and-stemcell
    tags: ((tags))
    image: platform-automation-image
    file: platform-automation-tasks/tasks/download-product.yml
    params:
      CONFIG_FILE: download-product-configs/((tas_version))/download-p-spring-cloud-services.yml
    input_mapping:
      config: interpolated-product-downloads
    output_mapping: {downloaded-stemcell: p-spring-cloud-services-stemcell}
  - in_parallel:
    - put: p-spring-cloud-services-product
      tags: ((tags))
      params:
        file: downloaded-product/*.pivotal
    - put: p-spring-cloud-services-stemcell
      tags: ((tags))
      params:
        file: p-spring-cloud-services-stemcell/*.tgz

- name: get-p-spring-cloud-services-3
  on_failure:
    put: notify
    tags: ((tags))
    params:
      <<: *slack_failed_param
  on_success:  
    put: notify
    tags: ((tags))
    params:
      <<: *slack_succeeded_param
  serial: true
  serial_groups: [ get-products ]
  plan:
  - put: notify
    tags: ((tags))
    params:
      <<: *slack_start_param
  - in_parallel:
    - get: after-midnight
      tags: ((tags))
      trigger: true
    - get: platform-automation-image
      tags: ((tags))
      params:
        unpack: true
    - get: platform-automation-tasks
      tags: ((tags))
      params:
        unpack: true
    - get: templates
      tags: ((tags))
  - task: interpolate-product-downloads
    tags: ((tags))
    <<: *interpolate-product-downloads
  - task: download-p-spring-cloud-services-3-product-and-stemcell
    tags: ((tags))
    image: platform-automation-image
    file: platform-automation-tasks/tasks/download-product.yml
    params:
      CONFIG_FILE: download-product-configs/((tas_version))/download-p-spring-cloud-services-3.yml
    input_mapping:
      config: interpolated-product-downloads
    output_mapping: {downloaded-stemcell: p-spring-cloud-services-3-stemcell}
  - in_parallel:
    - put: p-spring-cloud-services-3-product
      tags: ((tags))
      params:
        file: downloaded-product/*.pivotal
    - put: p-spring-cloud-services-3-stemcell
      tags: ((tags))
      params:
        file: p-spring-cloud-services-3-stemcell/*.tgz

- name: get-pivotal-mysql
  on_failure:
    put: notify
    tags: ((tags))
    params:
      <<: *slack_failed_param
  on_success:  
    put: notify
    tags: ((tags))
    params:
      <<: *slack_succeeded_param
  serial: true
  serial_groups: [ get-products ]
  plan:
  - put: notify
    tags: ((tags))
    params:
      <<: *slack_start_param
  - in_parallel:
    - get: after-midnight
      tags: ((tags))
      trigger: true
    - get: platform-automation-image
      tags: ((tags))
      params:
        unpack: true
    - get: platform-automation-tasks
      tags: ((tags))
      params:
        unpack: true
    - get: templates
      tags: ((tags))
  - task: interpolate-product-downloads
    tags: ((tags))
    <<: *interpolate-product-downloads
  - task: download-pivotal-mysql-product-and-stemcell
    tags: ((tags))
    image: platform-automation-image
    file: platform-automation-tasks/tasks/download-product.yml
    params:
      CONFIG_FILE: download-product-configs/((tas_version))/download-pivotal-mysql.yml
    input_mapping:
      config: interpolated-product-downloads
    output_mapping: {downloaded-stemcell: pivotal-mysql-stemcell}
  - in_parallel:
    - put: pivotal-mysql-product
      ags: ((tags))
      params:
        file: downloaded-product/*.pivotal
    - put: pivotal-mysql-stemcell
      tags: ((tags))
      params:
        file: pivotal-mysql-stemcell/*.tgz

- name: get-p-healthwatch
  on_failure:
    put: notify
    tags: ((tags))
    params:
      <<: *slack_failed_param
  on_success:  
    put: notify
    tags: ((tags))
    params:
      <<: *slack_succeeded_param
  serial: true
  serial_groups: [ get-products ]
  plan:
  - put: notify
    tags: ((tags))
    params:
      <<: *slack_start_param
  - in_parallel:
    - get: after-midnight
      tags: ((tags))
      trigger: true
    - get: platform-automation-image
      tags: ((tags))
      params:
        unpack: true
    - get: platform-automation-tasks
      tags: ((tags))
      params:
        unpack: true
    - get: templates
      tags: ((tags))
  - task: interpolate-product-downloads
    tags: ((tags))
    <<: *interpolate-product-downloads
  - task: download-p-healthwatch-product-and-stemcell
    tags: ((tags))
    image: platform-automation-image
    file: platform-automation-tasks/tasks/download-product.yml
    params:
      CONFIG_FILE: download-product-configs/((tas_version))/download-p-healthwatch.yml
    input_mapping:
      config: interpolated-product-downloads
    output_mapping: {downloaded-stemcell: p-healthwatch-stemcell}
  - in_parallel:
    - put: p-healthwatch-product
      tags: ((tags))
      params:
        file: downloaded-product/*.pivotal
    - put: p-healthwatch-stemcell
      tags: ((tags))
      params:
        file: p-healthwatch-stemcell/*.tgz

- name: get-wavefront-nozzle
  on_failure:
    put: notify
    tags: ((tags))
    params:
      <<: *slack_failed_param
  on_success:  
    put: notify
    tags: ((tags))
    params:
      <<: *slack_succeeded_param
  serial: true
  serial_groups: [ get-products ]
  plan:
  - put: notify
    tags: ((tags))
    params:
      <<: *slack_start_param
  - in_parallel:
    - get: after-midnight
      tags: ((tags))
      trigger: true
    - get: platform-automation-image
      tags: ((tags))
      params:
        unpack: true
    - get: platform-automation-tasks
      tags: ((tags))
      params:
        unpack: true
    - get: templates
      tags: ((tags))
  - task: interpolate-product-downloads
    tags: ((tags))
    <<: *interpolate-product-downloads
  - task: download-wavefront-nozzle-product-and-stemcell
    tags: ((tags))
    image: platform-automation-image
    file: platform-automation-tasks/tasks/download-product.yml
    params:
      CONFIG_FILE: download-product-configs/((tas_version))/download-wavefront-nozzle.yml
    input_mapping:
      config: interpolated-product-downloads
    output_mapping: {downloaded-stemcell: wavefront-nozzle-stemcell}
  - in_parallel:
    - put: wavefront-nozzle-product
      tags: ((tags))
      params:
        file: downloaded-product/*.pivotal
    - put: wavefront-nozzle-stemcell
      tags: ((tags))
      params:
        file: wavefront-nozzle-stemcell/*.tgz


- name: get-p-event-alerts
  on_failure:
    put: notify
    tags: ((tags))
    params:
      <<: *slack_failed_param
  on_success:  
    put: notify
    tags: ((tags))
    params:
      <<: *slack_succeeded_param
  serial: true
  serial_groups: [ get-products ]
  plan:
  - put: notify
    tags: ((tags))
    params:
      <<: *slack_start_param
  - in_parallel:
    - get: after-midnight
      tags: ((tags))
      trigger: true
    - get: platform-automation-image
      tags: ((tags))
      params:
        unpack: true
    - get: platform-automation-tasks
      tags: ((tags))
      params:
        unpack: true
    - get: templates
      tags: ((tags))
  - task: interpolate-product-downloads
    tags: ((tags))
    <<: *interpolate-product-downloads
  - task: download-p-event-alerts-product-and-stemcell
    tags: ((tags))
    image: platform-automation-image
    file: platform-automation-tasks/tasks/download-product.yml
    params:
      CONFIG_FILE: download-product-configs/((tas_version))/download-p-event-alerts.yml
    input_mapping:
      config: interpolated-product-downloads
    output_mapping: {downloaded-stemcell: p-event-alerts-stemcell}
  - in_parallel:
    - put: p-event-alerts-product
      tags: ((tags))
      params:
        file: downloaded-product/*.pivotal
    - put: p-event-alerts-stemcell
      tags: ((tags))
      params:
        file: p-event-alerts-stemcell/*.tgz

- name: get-apm
  on_failure:
    put: notify
    tags: ((tags))
    params:
      <<: *slack_failed_param
  on_success:  
    put: notify
    tags: ((tags))
    params:
      <<: *slack_succeeded_param
  serial: true
  serial_groups: [ get-products ]
  plan:
  - put: notify
    tags: ((tags))
    params:
      <<: *slack_start_param
  - in_parallel:
    - get: after-midnight
      tags: ((tags))
      trigger: true
    - get: platform-automation-image
      tags: ((tags))
      params:
        unpack: true
    - get: platform-automation-tasks
      tags: ((tags))
      params:
        unpack: true
    - get: templates
      tags: ((tags))
  - task: interpolate-product-downloads
    tags: ((tags))
    <<: *interpolate-product-downloads
  - task: download-apm-product-and-stemcell
    tags: ((tags))
    image: platform-automation-image
    file: platform-automation-tasks/tasks/download-product.yml
    params:
      CONFIG_FILE: download-product-configs/((tas_version))/download-apm.yml
    input_mapping:
      config: interpolated-product-downloads
    output_mapping: {downloaded-stemcell: apm-stemcell}
  - in_parallel:
    - put: apm-product
      tags: ((tags))
      params:
        file: downloaded-product/*.pivotal
    - put: apm-stemcell
      tags: ((tags))
      params:
        file: apm-stemcell/*.tgz



- name: get-p-compliance-scanner
  on_failure:
    put: notify
    tags: ((tags))
    params:
      <<: *slack_failed_param
  on_success:  
    put: notify
    tags: ((tags))
    params:
      <<: *slack_succeeded_param
  serial: true
  serial_groups: [ get-products ]
  plan:
  - put: notify
    tags: ((tags))
    params:
      <<: *slack_start_param
  - in_parallel:
    - get: after-midnight
      tags: ((tags))
      trigger: true
    - get: platform-automation-image
      tags: ((tags))
      params:
        unpack: true
    - get: platform-automation-tasks
      tags: ((tags))
      params:
        unpack: true
    - get: templates
      tags: ((tags))
  - task: interpolate-product-downloads
    tags: ((tags))
    <<: *interpolate-product-downloads
  - task: download-p-compliance-scanner-product-and-stemcell
    tags: ((tags))
    image: platform-automation-image
    file: platform-automation-tasks/tasks/download-product.yml
    params:
      CONFIG_FILE: download-product-configs/((tas_version))/download-p-compliance-scanner.yml
    input_mapping:
      config: interpolated-product-downloads
    output_mapping: {downloaded-stemcell: p-compliance-scanner-stemcell}
  - in_parallel:
    - put: p-compliance-scanner-product
      tags: ((tags))
      params:
        file: downloaded-product/*.pivotal
    - put: p-compliance-scanner-stemcell
      tags: ((tags))
      params:
        file: p-compliance-scanner-stemcell/*.tgz
- name: get-container-services-manager
  on_failure:
    put: notify
    tags: ((tags))
    params:
      <<: *slack_failed_param
  on_success:  
    put: notify
    tags: ((tags))
    params:
      <<: *slack_succeeded_param
  serial: true
  serial_groups: [ get-products ]
  plan:
  - put: notify
    tags: ((tags))
    params:
      <<: *slack_start_param
  - in_parallel:
    - get: after-midnight
      tags: ((tags))
      trigger: true
    - get: platform-automation-image
      tags: ((tags))
      params:
        unpack: true
    - get: platform-automation-tasks
      tags: ((tags))
      params:
        unpack: true
    - get: templates
      tags: ((tags))
  - task: interpolate-product-downloads
    tags: ((tags))
    <<: *interpolate-product-downloads
  - task: download-container-services-manager-product
    tags: ((tags))
    image: platform-automation-image
    file: platform-automation-tasks/tasks/download-product.yml
    params:
      CONFIG_FILE: download-product-configs/((tas_version))/download-container-services-manager.yml
    input_mapping:
      config: interpolated-product-downloads
  - in_parallel:
    - put: container-services-manager-product
      tags: ((tags))
      params:
        file: downloaded-product/*.pivotal

- name: get-p-rabbitmq
  on_failure:
    put: notify
    tags: ((tags))
    params:
      <<: *slack_failed_param
  on_success:  
    put: notify
    tags: ((tags))
    params:
      <<: *slack_succeeded_param
  serial: true
  serial_groups: [ get-products ]
  plan:
  - put: notify
    tags: ((tags))
    params:
      <<: *slack_start_param
  - in_parallel:
    - get: after-midnight
      tags: ((tags))
      trigger: true
    - get: platform-automation-image
      tags: ((tags))
      params:
        unpack: true
    - get: platform-automation-tasks
      tags: ((tags))
      params:
        unpack: true
    - get: templates
      tags: ((tags))
  - task: interpolate-product-downloads
    tags: ((tags))
    <<: *interpolate-product-downloads
  - task: download-p-rabbitmq-product-and-stemcell
    tags: ((tags))
    image: platform-automation-image
    file: platform-automation-tasks/tasks/download-product.yml
    params:
      CONFIG_FILE: download-product-configs/((tas_version))/download-p-rabbitmq.yml
    input_mapping:
      config: interpolated-product-downloads
    output_mapping: {downloaded-stemcell: p-rabbitmq-stemcell}
  - in_parallel:
    - put: p-rabbitmq-product
      tags: ((tags))
      params:
        file: downloaded-product/*.pivotal
    - put: p-rabbitmq-stemcell
      tags: ((tags))
      params:
        file: p-rabbitmq-stemcell/*.tgz
- name: get-pas-windows
  on_failure:
    put: notify
    tags: ((tags))
    params:
      <<: *slack_failed_param
  on_success:  
    put: notify
    tags: ((tags))
    params:
      <<: *slack_succeeded_param
  serial: true
  serial_groups: [ get-products ]
  plan:
  - put: notify
    tags: ((tags))
    params:
      <<: *slack_start_param
  - in_parallel:
    - get: after-midnight
      tags: ((tags))
      trigger: true
    - get: platform-automation-image
      tags: ((tags))
      params:
        unpack: true
    - get: platform-automation-tasks
      tags: ((tags))
      params:
        unpack: true
    - get: templates
      tags: ((tags))
  - task: interpolate-product-downloads
    tags: ((tags))
    <<: *interpolate-product-downloads
  - task: download-pas-windows-product-and-stemcell
    tags: ((tags))
    image: platform-automation-image
    file: platform-automation-tasks/tasks/download-product.yml
    params:
      CONFIG_FILE: download-product-configs/((tas_version))/download-pas-windows.yml
    input_mapping:
      config: interpolated-product-downloads
    output_mapping: {downloaded-stemcell: pas-windows-stemcell}
  - in_parallel:
    - put: pas-windows-product
      tags: ((tags))
      params:
        file: downloaded-product/*.pivotal
    - put: pas-windows-stemcell
      tags: ((tags))
      params:
        file: pas-windows-stemcell/*.tgz



- name: upload-and-stage-srt
  on_failure:
    put: notify
    tags: ((tags))
    params:
      <<: *slack_failed_param
  on_success:  
    put: notify
    tags: ((tags))
    params:
      <<: *slack_succeeded_param
  serial_groups:
  - apply
  - upload-and-stage
  - configure-products
  - get-products
  serial: true
  plan:
  - put: notify
    tags: ((tags))
    params:
      <<: *slack_start_param
  - in_parallel:
    - get: platform-automation-image
      tags: ((tags))
      params:
        unpack: true
      passed:
      - upgrade-opsman
    - get: platform-automation-tasks
      tags: ((tags))
      params:
        unpack: true
    - get: templates
      tags: ((tags))
    - get: variable
      tags: ((tags))
    - get: srt-product
      tags: ((tags))
      trigger: true 
    - get: srt-stemcell
      tags: ((tags))
      trigger: true       
  - task: interpolate-product-downloads
    tags: ((tags))
    <<: *interpolate-product-downloads     
  - task: download-srt
    tags: ((tags))
    image: platform-automation-image
    file: platform-automation-tasks/tasks/download-product-s3.yml
    params:
      CONFIG_FILE: download-product-configs/((tas_version))/download-srt.yml
    input_mapping:
      config: interpolated-product-downloads
    output_mapping:
      downloaded-product: srt-product
      downloaded-stemcell: srt-stemcell
  - task: upload-product
    tags: ((tags))
    image: platform-automation-image
    file: platform-automation-tasks/tasks/upload-product.yml
    input_mapping:
      product: srt-product
      env: variable
    params:
      ENV_FILE: ((foundation))/env/env.yml
  - task: upload-srt-stemcell
    tags: ((tags))
    image: platform-automation-image
    file: platform-automation-tasks/tasks/upload-stemcell.yml
    input_mapping:
      env: variable
      stemcell: srt-stemcell
    params:
      ENV_FILE: ((foundation))/env/env.yml
  - task: stage-product
    tags: ((tags))
    image: platform-automation-image
    file: platform-automation-tasks/tasks/stage-product.yml
    input_mapping:
      product: srt-product
      env: variable
    params:
      ENV_FILE: ((foundation))/env/env.yml


- name: upload-and-stage-pas-windows
  on_failure:
    put: notify
    tags: ((tags))
    params:
      <<: *slack_failed_param
  on_success:  
    put: notify
    tags: ((tags))
    params:
      <<: *slack_succeeded_param
  serial: true
  serial_groups:
  - apply
  - upload-and-stage
  - configure-products
  - get-products
  plan:
  - put: notify
    tags: ((tags))
    params:
      <<: *slack_start_param
  - in_parallel:
    - get: platform-automation-image
      tags: ((tags))
      params:
        unpack: true
      passed:
      - upgrade-opsman
    - get: platform-automation-tasks
      tags: ((tags))
      params:
        unpack: true
    - get: templates
      tags: ((tags))
    - get: variable
      tags: ((tags))
    - get: pas-windows-product
      tags: ((tags))
      trigger: true     
    - get: pas-windows-stemcell
      tags: ((tags))
      trigger: true    
  - task: interpolate-product-downloads
    tags: ((tags))
    <<: *interpolate-product-downloads     
  - task: download-pas-windows
    tags: ((tags))
    image: platform-automation-image
    file: platform-automation-tasks/tasks/download-product-s3.yml
    params:
      CONFIG_FILE: download-product-configs/((tas_version))/download-pas-windows.yml
    input_mapping:
      config: interpolated-product-downloads
    output_mapping:
      downloaded-product: pas-windows-product
      downloaded-stemcell: pas-windows-stemcell
  - task: upload-product
    tags: ((tags))
    image: platform-automation-image
    file: platform-automation-tasks/tasks/upload-product.yml
    input_mapping:
      product: pas-windows-product
      env: variable
    params:
      ENV_FILE: ((foundation))/env/env.yml
  - task: upload-pas-windows-stemcell
    tags: ((tags))
    image: platform-automation-image
    file: platform-automation-tasks/tasks/upload-stemcell.yml
    input_mapping:
      env: variable
      stemcell: pas-windows-stemcell
    params:
      ENV_FILE: ((foundation))/env/env.yml
  - task: stage-product
    tags: ((tags))
    image: platform-automation-image
    file: platform-automation-tasks/tasks/stage-product.yml
    input_mapping:
      product: pas-windows-product
      env: variable
    params:
      ENV_FILE: ((foundation))/env/env.yml      

- name: upload-and-stage-pivotal-mysql
  on_failure:
    put: notify
    tags: ((tags))
    params:
      <<: *slack_failed_param
  on_success:  
    put: notify
    tags: ((tags))
    params:
      <<: *slack_succeeded_param
  serial: true
  serial_groups:
  - apply
  - upload-and-stage
  - configure-products
  - get-products
  plan:
  - put: notify
    tags: ((tags))
    params:
      <<: *slack_start_param
  - in_parallel:
    - get: platform-automation-image
      tags: ((tags))
      params:
        unpack: true
      passed:
      - upgrade-opsman
    - get: platform-automation-tasks
      tags: ((tags))
      params:
        unpack: true
    - get: templates
      tags: ((tags))
    - get: variable
      tags: ((tags))
    - get: pivotal-mysql-product
      tags: ((tags))      
      trigger: true     
    - get: pivotal-mysql-stemcell
      tags: ((tags))      
      trigger: true  
  - task: interpolate-product-downloads
    tags: ((tags))
    <<: *interpolate-product-downloads       
  - task: download-pivotal-mysql
    tags: ((tags))
    image: platform-automation-image
    file: platform-automation-tasks/tasks/download-product-s3.yml
    params:
      CONFIG_FILE: download-product-configs/((tas_version))/download-pivotal-mysql.yml
    input_mapping:
      config: interpolated-product-downloads
    output_mapping:
      downloaded-product: pivotal-mysql-product
      downloaded-stemcell: pivotal-mysql-stemcell
  - task: upload-product
    tags: ((tags))
    image: platform-automation-image
    file: platform-automation-tasks/tasks/upload-product.yml
    input_mapping:
      product: pivotal-mysql-product
      env: variable
    params:
      ENV_FILE: ((foundation))/env/env.yml
  - task: upload-pivotal-mysql-stemcell
    tags: ((tags))
    image: platform-automation-image
    file: platform-automation-tasks/tasks/upload-stemcell.yml
    input_mapping:
      env: variable
      stemcell: pivotal-mysql-stemcell
    params:
      ENV_FILE: ((foundation))/env/env.yml
  - task: stage-product
    tags: ((tags))
    image: platform-automation-image
    file: platform-automation-tasks/tasks/stage-product.yml
    input_mapping:
      product: pivotal-mysql-product
      env: variable
    params:
      ENV_FILE: ((foundation))/env/env.yml   

- name: upload-and-stage-p-healthwatch
  on_failure:
    put: notify
    tags: ((tags))
    params:
      <<: *slack_failed_param
  on_success:  
    put: notify
    tags: ((tags))
    params:
      <<: *slack_succeeded_param
  serial: true
  serial_groups:
  - apply
  - upload-and-stage
  - configure-products
  - get-products
  plan:
  - put: notify
    tags: ((tags))
    params:
      <<: *slack_start_param
  - in_parallel:
    - get: platform-automation-image
      tags: ((tags))
      params:
        unpack: true
      passed:
      - upgrade-opsman
    - get: platform-automation-tasks
      tags: ((tags))
      params:
        unpack: true
    - get: templates
      tags: ((tags))
    - get: variable
      tags: ((tags))
    - get: p-healthwatch-product
      tags: ((tags))      
      trigger: true     
    - get: p-healthwatch-stemcell
      tags: ((tags))      
      trigger: true     
  - task: interpolate-product-downloads
    tags: ((tags))
    <<: *interpolate-product-downloads     
  - task: download-p-healthwatch
    tags: ((tags))
    image: platform-automation-image
    file: platform-automation-tasks/tasks/download-product-s3.yml
    params:
      CONFIG_FILE: download-product-configs/((tas_version))/download-p-healthwatch.yml
    input_mapping:
      config: interpolated-product-downloads
    output_mapping:
      downloaded-product: p-healthwatch-product
      downloaded-stemcell: p-healthwatch-stemcell
  - task: upload-product
    tags: ((tags))
    image: platform-automation-image
    file: platform-automation-tasks/tasks/upload-product.yml
    input_mapping:
      product: p-healthwatch-product
      env: variable
    params:
      ENV_FILE: ((foundation))/env/env.yml
  - task: upload-p-healthwatch-stemcell
    tags: ((tags))
    image: platform-automation-image
    file: platform-automation-tasks/tasks/upload-stemcell.yml
    input_mapping:
      env: variable
      stemcell: p-healthwatch-stemcell
    params:
      ENV_FILE: ((foundation))/env/env.yml
  - task: stage-product
    tags: ((tags))
    image: platform-automation-image
    file: platform-automation-tasks/tasks/stage-product.yml
    input_mapping:
      product: p-healthwatch-product
      env: variable
    params:
      ENV_FILE: ((foundation))/env/env.yml        

- name: upload-and-stage-wavefront-nozzle
  on_failure:
    put: notify
    tags: ((tags))
    params:
      <<: *slack_failed_param
  on_success:  
    put: notify
    tags: ((tags))
    params:
      <<: *slack_succeeded_param
  serial: true
  serial_groups:
  - apply
  - upload-and-stage
  - configure-products
  - get-products
  plan:
  - put: notify
    tags: ((tags))
    params:
     <<: *slack_start_param
  - in_parallel:
    - get: platform-automation-image
      tags: ((tags))
      params:
        unpack: true
      passed:
      - upgrade-opsman     
    - get: platform-automation-tasks
      tags: ((tags))
      params:
        unpack: true
    - get: templates
      tags: ((tags))
    - get: variable
      tags: ((tags))
    - get: wavefront-nozzle-product
      tags: ((tags))      
      trigger: true     
    - get: wavefront-nozzle-stemcell
      tags: ((tags))      
      trigger: true     
  - task: interpolate-product-downloads
    tags: ((tags))
    <<: *interpolate-product-downloads          
  - task: download-wavefront-nozzle
    tags: ((tags))
    image: platform-automation-image
    file: platform-automation-tasks/tasks/download-product-s3.yml
    params:
      CONFIG_FILE: download-product-configs/((tas_version))/download-wavefront-nozzle.yml
    input_mapping:
      config: interpolated-product-downloads
    output_mapping:
      downloaded-product: wavefront-nozzle-product
      downloaded-stemcell: wavefront-nozzle-stemcell
  - task: upload-product
    tags: ((tags))
    image: platform-automation-image
    file: platform-automation-tasks/tasks/upload-product.yml
    input_mapping:
      product: wavefront-nozzle-product
      env: variable
    params:
      ENV_FILE: ((foundation))/env/env.yml
  - task: upload-wavefront-nozzle-stemcell
    tags: ((tags))
    image: platform-automation-image
    file: platform-automation-tasks/tasks/upload-stemcell.yml
    input_mapping:
      env: variable
      stemcell: wavefront-nozzle-stemcell
    params:
      ENV_FILE: ((foundation))/env/env.yml
  - task: stage-product
    tags: ((tags))
    image: platform-automation-image
    file: platform-automation-tasks/tasks/stage-product.yml
    input_mapping:
      product: wavefront-nozzle-product
      env: variable
    params:
      ENV_FILE: ((foundation))/env/env.yml        

- name: upload-and-stage-p-event-alerts
  on_failure:
    put: notify
    tags: ((tags))
    params:
      <<: *slack_failed_param
  on_success:  
    put: notify
    tags: ((tags))
    params:
      <<: *slack_succeeded_param
  serial_groups:
  - apply
  - upload-and-stage
  - configure-products
  - get-products
  serial: true
  plan:
  - put: notify
    tags: ((tags))
    params:
      <<: *slack_start_param
  - in_parallel:
    - get: platform-automation-image
      tags: ((tags))
      params:
        unpack: true
      passed:
      - upgrade-opsman   
    - get: platform-automation-tasks
      tags: ((tags))
      params:
        unpack: true
    - get: templates
      tags: ((tags))
    - get: variable
      tags: ((tags))
    - get: p-event-alerts-product
      tags: ((tags))      
      trigger: true     
    - get: p-event-alerts-stemcell
      tags: ((tags))      
      trigger: true     
  - task: interpolate-product-downloads
    tags: ((tags))
    <<: *interpolate-product-downloads     
  - task: download-p-event-alerts
    tags: ((tags))
    image: platform-automation-image
    file: platform-automation-tasks/tasks/download-product-s3.yml
    params:
      CONFIG_FILE: download-product-configs/((tas_version))/download-p-event-alerts.yml
    input_mapping:
      config: interpolated-product-downloads
    output_mapping:
      downloaded-product: p-event-alerts-product
      downloaded-stemcell: p-event-alerts-stemcell
  - task: upload-product
    tags: ((tags))
    image: platform-automation-image
    file: platform-automation-tasks/tasks/upload-product.yml
    input_mapping:
      product: p-event-alerts-product
      env: variable
    params:
      ENV_FILE: ((foundation))/env/env.yml
  - task: upload-p-event-alerts-stemcell
    tags: ((tags))
    image: platform-automation-image
    file: platform-automation-tasks/tasks/upload-stemcell.yml
    input_mapping:
      env: variable
      stemcell: p-event-alerts-stemcell
    params:
      ENV_FILE: ((foundation))/env/env.yml
  - task: stage-product
    tags: ((tags))
    image: platform-automation-image
    file: platform-automation-tasks/tasks/stage-product.yml
    input_mapping:
      product: p-event-alerts-product
      env: variable
    params:
      ENV_FILE: ((foundation))/env/env.yml        

- name: upload-and-stage-apm
  on_failure:
    put: notify
    tags: ((tags))
    params:
      <<: *slack_failed_param
  on_success:  
    put: notify
    tags: ((tags))
    params:
      <<: *slack_succeeded_param
  serial_groups:
  - apply
  - upload-and-stage
  - configure-products
  - get-products
  serial: true
  plan:
  - put: notify
    tags: ((tags))
    params:
      <<: *slack_start_param
  - in_parallel:
    - get: platform-automation-image
      tags: ((tags))
      params:
        unpack: true
      passed:
      - upgrade-opsman
    - get: platform-automation-tasks
      tags: ((tags))
      params:
        unpack: true
    - get: templates
      tags: ((tags))
    - get: variable
      tags: ((tags))
    - get: apm-product
      tags: ((tags))      
      trigger: true     
    - get: apm-stemcell
      tags: ((tags))      
      trigger: true   
  - task: interpolate-product-downloads
    tags: ((tags))
    <<: *interpolate-product-downloads     
  - task: download-apm
    tags: ((tags))
    image: platform-automation-image
    file: platform-automation-tasks/tasks/download-product-s3.yml
    params:
      CONFIG_FILE: download-product-configs/((tas_version))/download-apm.yml
    input_mapping:
      config: interpolated-product-downloads
    output_mapping:
      downloaded-product: apm-product
      downloaded-stemcell: apm-stemcell
  - task: upload-product
    tags: ((tags))
    image: platform-automation-image
    file: platform-automation-tasks/tasks/upload-product.yml
    input_mapping:
      product: apm-product
      env: variable
    params:
      ENV_FILE: ((foundation))/env/env.yml
  - task: upload-apm-stemcell
    tags: ((tags))
    image: platform-automation-image
    file: platform-automation-tasks/tasks/upload-stemcell.yml
    input_mapping:
      env: variable
      stemcell: apm-stemcell
    params:
      ENV_FILE: ((foundation))/env/env.yml
  - task: stage-product
    tags: ((tags))
    image: platform-automation-image
    file: platform-automation-tasks/tasks/stage-product.yml
    input_mapping:
      product: apm-product
      env: variable
    params:
      ENV_FILE: ((foundation))/env/env.yml        



- name: upload-and-stage-p-compliance-scanner
  on_failure:
    put: notify
    tags: ((tags))
    params:
      <<: *slack_failed_param
  on_success:  
    put: notify
    tags: ((tags))
    params:
      <<: *slack_succeeded_param
  serial: true
  serial_groups:
  - apply
  - upload-and-stage
  - configure-products
  - get-products
  plan:
  - put: notify
    tags: ((tags))
    params:
      <<: *slack_start_param
  - in_parallel:
    - get: platform-automation-image
      tags: ((tags))
      params:
        unpack: true
      passed:
      - upgrade-opsman
    - get: platform-automation-tasks
      tags: ((tags))
      params:
        unpack: true
    - get: templates
      tags: ((tags))
    - get: variable
      tags: ((tags))
    - get: p-compliance-scanner-product
      tags: ((tags))      
      trigger: true     
    - get: p-compliance-scanner-stemcell
      tags: ((tags))      
      trigger: true     
  - task: interpolate-product-downloads
    tags: ((tags))
    <<: *interpolate-product-downloads
  - task: download-p-compliance-scanner
    tags: ((tags))
    image: platform-automation-image
    file: platform-automation-tasks/tasks/download-product-s3.yml
    params:
      CONFIG_FILE: download-product-configs/((tas_version))/download-p-compliance-scanner.yml
    input_mapping:
      config: interpolated-product-downloads
    output_mapping:
      downloaded-product: p-compliance-scanner-product
      downloaded-stemcell: p-compliance-scanner-stemcell
  - task: upload-product
    tags: ((tags))
    image: platform-automation-image
    file: platform-automation-tasks/tasks/upload-product.yml
    input_mapping:
      product: p-compliance-scanner-product
      env: variable
    params:
      ENV_FILE: ((foundation))/env/env.yml
  - task: upload-p-compliance-scanner-stemcell
    tags: ((tags))
    image: platform-automation-image
    file: platform-automation-tasks/tasks/upload-stemcell.yml
    input_mapping:
      env: variable
      stemcell: p-compliance-scanner-stemcell
    params:
      ENV_FILE: ((foundation))/env/env.yml
  - task: stage-product
    tags: ((tags))
    image: platform-automation-image
    file: platform-automation-tasks/tasks/stage-product.yml
    input_mapping:
      product: p-compliance-scanner-product
      env: variable
    params:
      ENV_FILE: ((foundation))/env/env.yml        

- name: upload-and-stage-p-spring-cloud-services
  on_failure:
    put: notify
    tags: ((tags))
    params:
      <<: *slack_failed_param
  on_success:  
    put: notify
    tags: ((tags))
    params:
      <<: *slack_succeeded_param
  serial: true
  serial_groups:
  - apply
  - upload-and-stage
  - configure-products
  - get-products
  plan:
  - put: notify
    tags: ((tags))
    params:
      <<: *slack_start_param
  - in_parallel:
    - get: platform-automation-image
      tags: ((tags))
      params:
        unpack: true
      passed:
      - upgrade-opsman
    - get: platform-automation-tasks
      tags: ((tags))
      params:
        unpack: true
    - get: templates
      tags: ((tags))
    - get: variable
      tags: ((tags))
#    - get: p-spring-cloud-services-product
#      tags: ((tags))      
#      trigger: true     
#    - get: p-spring-cloud-services-stemcell
#      tags: ((tags))      
#      trigger: true     
  - task: interpolate-product-downloads
    tags: ((tags))
    <<: *interpolate-product-downloads       
  - task: download-p-spring-cloud-services
    tags: ((tags))
    image: platform-automation-image
    file: platform-automation-tasks/tasks/download-product-s3.yml
    params:
      CONFIG_FILE: download-product-configs/((tas_version))/download-p-spring-cloud-services.yml
    input_mapping:
      config: interpolated-product-downloads
    output_mapping:
      downloaded-product: p-spring-cloud-services-product
      downloaded-stemcell: p-spring-cloud-services-stemcell
  - task: upload-product
    tags: ((tags))
    image: platform-automation-image
    file: platform-automation-tasks/tasks/upload-product.yml
    input_mapping:
      product: p-spring-cloud-services-product
      env: variable
    params:
      ENV_FILE: ((foundation))/env/env.yml
  - task: upload-p-spring-cloud-services-stemcell
    tags: ((tags))
    image: platform-automation-image
    file: platform-automation-tasks/tasks/upload-stemcell.yml
    input_mapping:
      env: variable
      stemcell: p-spring-cloud-services-stemcell
    params:
      ENV_FILE: ((foundation))/env/env.yml
  - task: stage-product
    tags: ((tags))
    image: platform-automation-image
    file: platform-automation-tasks/tasks/stage-product.yml
    input_mapping:
      product: p-spring-cloud-services-product
      env: variable
    params:
      ENV_FILE: ((foundation))/env/env.yml   

- name: upload-and-stage-p-spring-cloud-services-3
  on_failure:
    put: notify
    tags: ((tags))
    params:
      <<: *slack_failed_param
  on_success:  
    put: notify
    tags: ((tags))
    params:
      <<: *slack_succeeded_param
  serial: true
  serial_groups:
  - apply
  - upload-and-stage
  - configure-products
  - get-products
  plan:
  - put: notify
    tags: ((tags))
    params:
      <<: *slack_start_param
  - in_parallel:
    - get: platform-automation-image
      tags: ((tags))
      params:
        unpack: true
      passed:
      - upgrade-opsman
    - get: platform-automation-tasks
      tags: ((tags))
      params:
        unpack: true
    - get: templates
      tags: ((tags))
    - get: variable
      tags: ((tags))
    - get: p-spring-cloud-services-3-product
      tags: ((tags))      
      trigger: true     
    - get: p-spring-cloud-services-3-stemcell
      tags: ((tags))      
      trigger: true     
  - task: interpolate-product-downloads
    tags: ((tags))
    <<: *interpolate-product-downloads     
  - task: download-p-spring-cloud-services-3
    tags: ((tags))
    image: platform-automation-image
    file: platform-automation-tasks/tasks/download-product-s3.yml
    params:
      CONFIG_FILE: download-product-configs/((tas_version))/download-p-spring-cloud-services-3.yml
    input_mapping:
      config: interpolated-product-downloads
    output_mapping:
      downloaded-product: p-spring-cloud-services-3-product
      downloaded-stemcell: p-spring-cloud-services-3-stemcell
  - task: upload-product
    tags: ((tags))
    image: platform-automation-image
    file: platform-automation-tasks/tasks/upload-product.yml
    input_mapping:
      product: p-spring-cloud-services-3-product
      env: variable
    params:
      ENV_FILE: ((foundation))/env/env.yml
  - task: upload-p-spring-cloud-services-3-stemcell
    tags: ((tags))
    image: platform-automation-image
    file: platform-automation-tasks/tasks/upload-stemcell.yml
    input_mapping:
      env: variable
      stemcell: p-spring-cloud-services-3-stemcell
    params:
      ENV_FILE: ((foundation))/env/env.yml
  - task: stage-product
    tags: ((tags))
    image: platform-automation-image
    file: platform-automation-tasks/tasks/stage-product.yml
    input_mapping:
      product: p-spring-cloud-services-3-product
      env: variable
    params:
      ENV_FILE: ((foundation))/env/env.yml   

- name: upload-and-stage-p-rabbitmq
  on_failure:
    put: notify
    tags: ((tags))
    params:
      <<: *slack_failed_param
  on_success:  
    put: notify
    tags: ((tags))
    params:
      <<: *slack_succeeded_param
  serial: true
  serial_groups:
  - apply
  - upload-and-stage
  - configure-products
  - get-products
  plan:
  - put: notify
    tags: ((tags))
    params:
      <<: *slack_start_param
  - in_parallel:
    - get: platform-automation-image
      tags: ((tags))
      params:
        unpack: true
      passed:
      - upgrade-opsman
    - get: platform-automation-tasks
      tags: ((tags))
      params:
        unpack: true
    - get: templates
      tags: ((tags))
    - get: variable
      tags: ((tags))
    - get: p-rabbitmq-product
      tags: ((tags))      
      trigger: true     
    - get: p-rabbitmq-stemcell
      tags: ((tags))      
      trigger: true     
  - task: interpolate-product-downloads
    tags: ((tags))
    <<: *interpolate-product-downloads       
  - task: download-p-rabbitmq
    tags: ((tags))
    image: platform-automation-image
    file: platform-automation-tasks/tasks/download-product-s3.yml
    params:
      CONFIG_FILE: download-product-configs/((tas_version))/download-p-rabbitmq.yml
    input_mapping:
      config: interpolated-product-downloads
    output_mapping:
      downloaded-product: p-rabbitmq-product
      downloaded-stemcell: p-rabbitmq-stemcell
  - task: upload-product
    tags: ((tags))
    image: platform-automation-image
    file: platform-automation-tasks/tasks/upload-product.yml
    input_mapping:
      product: p-rabbitmq-product
      env: variable
    params:
      ENV_FILE: ((foundation))/env/env.yml
  - task: upload-p-rabbitmq-stemcell
    tags: ((tags))
    image: platform-automation-image
    file: platform-automation-tasks/tasks/upload-stemcell.yml
    input_mapping:
      env: variable
      stemcell: p-rabbitmq-stemcell
    params:
      ENV_FILE: ((foundation))/env/env.yml
  - task: stage-product
    tags: ((tags))
    image: platform-automation-image
    file: platform-automation-tasks/tasks/stage-product.yml
    input_mapping:
      product: p-rabbitmq-product
      env: variable
    params:
      ENV_FILE: ((foundation))/env/env.yml

- name: upload-and-stage-container-services-manager
  on_failure:
    put: notify
    tags: ((tags))
    params:
      <<: *slack_failed_param
  on_success:  
    put: notify
    tags: ((tags))
    params:
      <<: *slack_succeeded_param
  serial: true
  serial_groups:
  - apply
  - upload-and-stage
  - configure-products
  - get-products
  plan:
  - put: notify
    tags: ((tags))
    params:
      <<: *slack_start_param
  - in_parallel:
    - get: platform-automation-image
      tags: ((tags))
      params:
        unpack: true
      passed:
      - upgrade-opsman
    - get: platform-automation-tasks
      tags: ((tags))
      params:
        unpack: true
    - get: templates
      tags: ((tags))
    - get: variable
      tags: ((tags))
#    - get: container-services-manager-product
#      tags: ((tags))      
#      trigger: true    
  - task: interpolate-product-downloads
    tags: ((tags))
    <<: *interpolate-product-downloads       
  - task: download-container-services-manager
    tags: ((tags))
    image: platform-automation-image
    file: platform-automation-tasks/tasks/download-product-s3.yml
    params:
      CONFIG_FILE: download-product-configs/((tas_version))/download-container-services-manager.yml
    input_mapping:
      config: interpolated-product-downloads
    output_mapping:
      downloaded-product: container-services-manager-product
  - task: upload-product
    tags: ((tags))
    image: platform-automation-image
    file: platform-automation-tasks/tasks/upload-product.yml
    input_mapping:
      product: container-services-manager-product
      env: variable
    params:
      ENV_FILE: ((foundation))/env/env.yml
  - task: stage-product
    tags: ((tags))
    image: platform-automation-image
    file: platform-automation-tasks/tasks/stage-product.yml
    input_mapping:
      product: container-services-manager-product
      env: variable
    params:
      ENV_FILE: ((foundation))/env/env.yml        



- name: apply-product-changes
  serial_groups: 
    - apply
  on_failure:
    put: notify
    tags: ((tags))
    params:
      <<: *slack_failed_param
  on_success:  
    put: notify
    tags: ((tags))
    params:
      <<: *slack_succeeded_param
  serial: true
  plan:
  - put: notify
    tags: ((tags))
    params:
      <<: *slack_start_param
  - in_parallel:
    - get: platform-automation-tasks
      tags: ((tags))
      params:
        unpack: true
    - get: platform-automation-image
      tags: ((tags))
      params:
        unpack: true
      passed: ((passed_configs))          
    - get: variable
      tags: ((tags))
  - task: apply-product-changes
    tags: ((tags))
    image: platform-automation-image
    file: platform-automation-tasks/tasks/apply-changes.yml
    input_mapping:
      env: variable
    params:
      ENV_FILE: ((foundation))/env/env.yml
  - task: export-installation
    tags: ((tags))
    image: platform-automation-image
    file: platform-automation-tasks/tasks/export-installation.yml
    input_mapping:
      env: variable
    params:
      ENV_FILE: ((foundation))/env/env.yml
      INSTALLATION_FILE: installation-$timestamp.zip
  - put: installation
    tags: ((tags))
    params:
      file: installation/installation*.zip



- name: configure-pas-windows
  on_failure:
    put: notify
    tags: ((tags))
    params:
      <<: *slack_failed_param
  on_success:  
    put: notify
    tags: ((tags))
    params:
      <<: *slack_succeeded_param
  serial_groups:
  - apply
  - configure-products
  serial: true
  plan:
  - put: notify
    tags: ((tags))
    params:
      <<: *slack_start_param
  - in_parallel:
    - get: platform-automation-image
      tags: ((tags))
      params:
        unpack: true
      passed:
        - upload-and-stage-pas-windows
      trigger: true
    - get: platform-automation-tasks
      tags: ((tags))
      params:
        unpack: true
    - get: templates
      tags: ((tags))
    - get: variable
      tags: ((tags))
  - task: interpolate-product-templates
    tags: ((tags))
    <<: *interpolate-product-templates
  - task: configure-pas-windows
    tags: ((tags))
    image: platform-automation-image
    file: platform-automation-tasks/tasks/configure-product.yml
    input_mapping:
      config: interpolated-product-templates
      env: variable
      vars: variable
    params:
      CONFIG_FILE: product-configs/((tas_version))/pas-windows.yml
      VARS_FILES: vars/((foundation))/vars/pas-windows-vars.yml
      ENV_FILE: ((foundation))/env/env.yml 

- name: configure-p-rabbitmq
  on_failure:
    put: notify
    tags: ((tags))
    params:
      <<: *slack_failed_param
  on_success:  
    put: notify
    tags: ((tags))
    params:
      <<: *slack_succeeded_param
  serial_groups:
  - apply
  - configure-products
  - get-products
  serial: true
  plan:
  - put: notify
    tags: ((tags))
    params:
      <<: *slack_start_param
  - in_parallel:
      - get: platform-automation-image
        tags: ((tags))
        params:
          unpack: true
        passed:
          - upload-and-stage-p-rabbitmq
        trigger: true
      - get: platform-automation-tasks
        tags: ((tags))
        params:
          unpack: true
      - get: templates
        tags: ((tags))
      - get: variable
        tags: ((tags))
  - task: interpolate-product-templates
    tags: ((tags))
    <<: *interpolate-product-templates
  - task: configure-p-rabbitmq
    tags: ((tags))
    image: platform-automation-image
    file: platform-automation-tasks/tasks/configure-product.yml
    input_mapping:
      config: interpolated-product-templates
      env: variable
      vars: variable
    params:
      CONFIG_FILE: product-configs/((tas_version))/p-rabbitmq.yml
      VARS_FILES: vars/((foundation))/vars/p-rabbitmq-vars.yml
      ENV_FILE: ((foundation))/env/env.yml 

- name: configure-pivotal-mysql
  on_failure:
    put: notify
    tags: ((tags))
    params:
      <<: *slack_failed_param
  on_success:  
    put: notify
    tags: ((tags))
    params:
      <<: *slack_succeeded_param
  serial_groups:
  - apply
  - configure-products
  serial: true
  plan:
  - put: notify
    tags: ((tags))
    params:
      <<: *slack_start_param
  - in_parallel:
    - get: platform-automation-image
      tags: ((tags))
      params:
        unpack: true
      passed:
        - upload-and-stage-pivotal-mysql
      trigger: true
    - get: platform-automation-tasks
      tags: ((tags))
      params:
        unpack: true
    - get: templates
      tags: ((tags))
    - get: variable
      tags: ((tags))
  - task: interpolate-product-templates
    tags: ((tags))
    <<: *interpolate-product-templates
  - task: configure-pivotal-mysql
    tags: ((tags))
    image: platform-automation-image
    file: platform-automation-tasks/tasks/configure-product.yml
    input_mapping:
      config: interpolated-product-templates
      env: variable
      vars: variable
    params:
      CONFIG_FILE: product-configs/((tas_version))/pivotal-mysql.yml
      VARS_FILES: vars/((foundation))/vars/pivotal-mysql-vars.yml vars/((foundation))/vars/director_deployment_vars.yml
      ENV_FILE: ((foundation))/env/env.yml 

- name: configure-p-healthwatch
  on_failure:
    put: notify
    tags: ((tags))
    params:
      <<: *slack_failed_param
  on_success:  
    put: notify
    tags: ((tags))
    params:
      <<: *slack_succeeded_param
  serial_groups:
  - apply
  - configure-products
  serial: true
  plan:
  - put: notify
    tags: ((tags))
    params:
      <<: *slack_start_param
  - in_parallel:
    - get: platform-automation-image
      tags: ((tags))
      params:
        unpack: true
      passed:
        - upload-and-stage-p-healthwatch
      trigger: true
    - get: platform-automation-tasks
      tags: ((tags))
      params:
        unpack: true
    - get: templates
      tags: ((tags))
    - get: variable
      tags: ((tags))
  - task: interpolate-product-templates
    tags: ((tags))
    <<: *interpolate-product-templates
  - task: configure-p-healthwatch
    tags: ((tags))
    image: platform-automation-image
    file: platform-automation-tasks/tasks/configure-product.yml
    input_mapping:
      config: interpolated-product-templates
      env: variable
      vars: variable
    params:
      CONFIG_FILE: product-configs/((tas_version))/p-healthwatch.yml
      VARS_FILES: vars/((foundation))/vars/p-healthwatch-vars.yml
      ENV_FILE: ((foundation))/env/env.yml 

- name: configure-wavefront-nozzle
  on_failure:
    put: notify
    tags: ((tags))
    params:
      <<: *slack_failed_param
  on_success:  
    put: notify
    tags: ((tags))
    params:
      <<: *slack_succeeded_param
  serial_groups:
  - apply
  - configure-products
  serial: true
  plan:
  - put: notify
    tags: ((tags))
    params:
      <<: *slack_start_param
  - in_parallel:
    - get: platform-automation-image
      tags: ((tags))
      params:
        unpack: true
      passed:
        - upload-and-stage-wavefront-nozzle
      trigger: true
    - get: platform-automation-tasks
      tags: ((tags))
      params:
        unpack: true
    - get: templates
      tags: ((tags))
    - get: variable
      tags: ((tags))
  - task: interpolate-product-templates
    tags: ((tags))
    <<: *interpolate-product-templates
  - task: configure-wavefront-nozzle
    tags: ((tags))
    image: platform-automation-image
    file: platform-automation-tasks/tasks/configure-product.yml
    input_mapping:
      config: interpolated-product-templates
      env: variable
      vars: variable
    params:
      CONFIG_FILE: product-configs/((tas_version))/wavefront-nozzle.yml
      VARS_FILES: vars/((foundation))/vars/wavefront-nozzle-vars.yml
      ENV_FILE: ((foundation))/env/env.yml 
- name: configure-p-event-alerts
  on_failure:
    put: notify
    tags: ((tags))
    params:
      <<: *slack_failed_param
  on_success:  
    put: notify
    tags: ((tags))
    params:
      <<: *slack_succeeded_param
  serial_groups:
  - apply
  - configure-products
  serial: true
  plan:
  - put: notify
    tags: ((tags))
    params:
      <<: *slack_start_param
  - in_parallel:
    - get: platform-automation-image
      tags: ((tags))
      params:
        unpack: true
      passed:
        - upload-and-stage-p-event-alerts
      trigger: true
    - get: platform-automation-tasks
      tags: ((tags))
      params:
        unpack: true
    - get: templates
      tags: ((tags))
    - get: variable
      tags: ((tags))
  - task: interpolate-product-templates
    tags: ((tags))
    <<: *interpolate-product-templates
  - task: configure-p-event-alerts
    tags: ((tags))
    image: platform-automation-image
    file: platform-automation-tasks/tasks/configure-product.yml
    input_mapping:
      config: interpolated-product-templates
      env: variable
      vars: variable
    params:
      CONFIG_FILE: product-configs/((tas_version))/p-event-alerts.yml
      VARS_FILES: vars/((foundation))/vars/p-event-alerts-vars.yml
      ENV_FILE: ((foundation))/env/env.yml 

- name: configure-apm
  on_failure:
    put: notify
    tags: ((tags))
    params:
      <<: *slack_failed_param
  on_success:  
    put: notify
    tags: ((tags))
    params:
      <<: *slack_succeeded_param
  serial_groups:
  - apply
  - configure-products
  serial: true
  plan:
  - put: notify
    tags: ((tags))
    params:
      <<: *slack_start_param
  - in_parallel:
    - get: platform-automation-image
      tags: ((tags))
      params:
        unpack: true
      passed:
        - upload-and-stage-apm
      trigger: true
    - get: platform-automation-tasks
      tags: ((tags))
      params:
        unpack: true
    - get: templates
      tags: ((tags))
    - get: variable
      tags: ((tags))
  - task: interpolate-product-templates
    tags: ((tags))
    <<: *interpolate-product-templates
  - task: configure-apm
    tags: ((tags))
    image: platform-automation-image
    file: platform-automation-tasks/tasks/configure-product.yml
    input_mapping:
      config: interpolated-product-templates
      env: variable
      vars: variable
    params:
      CONFIG_FILE: product-configs/((tas_version))/apm.yml
      VARS_FILES: vars/((foundation))/vars/apm-vars.yml
      ENV_FILE: ((foundation))/env/env.yml 

- name: configure-p-compliance-scanner
  on_failure:
    put: notify
    tags: ((tags))
    params:
      <<: *slack_failed_param
  on_success:  
    put: notify
    tags: ((tags))
    params:
      <<: *slack_succeeded_param
  serial_groups:
  - apply
  - configure-products
  serial: true
  plan:
  - put: notify
    tags: ((tags))
    params:
      <<: *slack_start_param
  - in_parallel:
      - get: platform-automation-image
        tags: ((tags))
        params:
          unpack: true
        passed:
          - upload-and-stage-p-compliance-scanner
        trigger: true
      - get: platform-automation-tasks
        tags: ((tags))
        params:
          unpack: true
      - get: templates
        tags: ((tags))
      - get: variable
        tags: ((tags))
  - task: interpolate-product-templates
    tags: ((tags))
    <<: *interpolate-product-templates
  - task: configure-p-compliance-scanner
    tags: ((tags))
    image: platform-automation-image
    file: platform-automation-tasks/tasks/configure-product.yml
    input_mapping:
      config: interpolated-product-templates
      env: variable
      vars: variable
    params:
      CONFIG_FILE: product-configs/((tas_version))/p-compliance-scanner.yml
      VARS_FILES: vars/((foundation))/vars/p-compliance-scanner-vars.yml
      ENV_FILE: ((foundation))/env/env.yml 

- name: configure-p-spring-cloud-services
  on_failure:
    put: notify
    tags: ((tags))
    params:
      <<: *slack_failed_param
  on_success:  
    put: notify
    tags: ((tags))
    params:
      <<: *slack_succeeded_param
  serial_groups:
  - apply
  - configure-products
  serial: true
  plan:
  - put: notify
    tags: ((tags))
    params:
      <<: *slack_start_param
  - in_parallel:
    - get: platform-automation-image
      tags: ((tags))
      params:
        unpack: true
      passed:
        - upload-and-stage-p-spring-cloud-services
      trigger: true
    - get: platform-automation-tasks
      tags: ((tags))
      params:
        unpack: true
    - get: templates
      tags: ((tags))
    - get: variable
      tags: ((tags))
  - task: interpolate-product-templates
    tags: ((tags))
    <<: *interpolate-product-templates
  - task: configure-p-spring-cloud-services
    tags: ((tags))
    image: platform-automation-image
    file: platform-automation-tasks/tasks/configure-product.yml
    input_mapping:
      config: interpolated-product-templates
      env: variable
      vars: variable
    params:
      CONFIG_FILE: product-configs/((tas_version))/p-spring-cloud-services.yml
      VARS_FILES: vars/((foundation))/vars/p-spring-cloud-services-vars.yml
      ENV_FILE: ((foundation))/env/env.yml

- name: configure-p-spring-cloud-services-3
  on_failure:
    put: notify
    tags: ((tags))
    params:
      <<: *slack_failed_param
  on_success:  
    put: notify
    tags: ((tags))
    params:
      <<: *slack_succeeded_param
  serial_groups:
  - apply
  - configure-products
  serial: true
  plan:
  - put: notify
    tags: ((tags))
    params:
      <<: *slack_start_param
  - in_parallel:
    - get: platform-automation-image
      tags: ((tags))
      params:
        unpack: true
      passed:
        - upload-and-stage-p-spring-cloud-services-3
      trigger: true
    - get: platform-automation-tasks
      tags: ((tags))
      params:
        unpack: true
    - get: templates
      tags: ((tags))
    - get: variable
      tags: ((tags))
  - task: interpolate-product-templates
    tags: ((tags))
    <<: *interpolate-product-templates
  - task: configure-p-spring-cloud-services
    tags: ((tags))
    image: platform-automation-image
    file: platform-automation-tasks/tasks/configure-product.yml
    input_mapping:
      config: interpolated-product-templates
      env: variable
      vars: variable
    params:
      CONFIG_FILE: product-configs/((tas_version))/p-spring-cloud-services-3.yml
      VARS_FILES: vars/((foundation))/vars/p-spring-cloud-services-3-vars.yml
      ENV_FILE: ((foundation))/env/env.yml        

- name: configure-container-services-manager
  on_failure:
    put: notify
    tags: ((tags))
    params:
      <<: *slack_failed_param
  on_success:  
    put: notify
    tags: ((tags))
    params:
      <<: *slack_succeeded_param
  serial_groups:
  - apply
  - configure-products
  serial: true
  plan:
  - put: notify
    tags: ((tags))
    params:
      <<: *slack_start_param
  - in_parallel:
    - get: platform-automation-image
      tags: ((tags))
      params:
        unpack: true
      passed:
        - upload-and-stage-container-services-manager
      trigger: true
    - get: platform-automation-tasks
      tags: ((tags))
      params:
        unpack: true
    - get: templates
      tags: ((tags))
    - get: variable
      tags: ((tags))
  - task: interpolate-product-templates
    tags: ((tags))
    <<: *interpolate-product-templates
  - task: configure-container-services-manager
    tags: ((tags))
    image: platform-automation-image
    file: platform-automation-tasks/tasks/configure-product.yml
    input_mapping:
      config: interpolated-product-templates
      env: variable
      vars: variable
    params:
      CONFIG_FILE: product-configs/((tas_version))/container-services-manager.yml
      VARS_FILES: vars/((foundation))/vars/container-services-manager-vars.yml
      ENV_FILE: ((foundation))/env/env.yml        

- name: configure-srt
  on_failure:
    put: notify
    tags: ((tags))
    params:
      <<: *slack_failed_param
  on_success:  
    put: notify
    tags: ((tags))
    params:
      <<: *slack_succeeded_param
  serial_groups:
  - apply
  - configure-products
  serial: true
  plan:
  - put: notify
    tags: ((tags))
    params:
      <<: *slack_start_param
  - in_parallel:
    - get: platform-automation-image
      tags: ((tags))
      params:
        unpack: true
      passed:
      - upload-and-stage-srt
      trigger: true
    - get: platform-automation-tasks
      tags: ((tags))
      params:
        unpack: true
    - get: templates
      tags: ((tags))
    - get: variable
      tags: ((tags))
  - task: interpolate-product-templates
    tags: ((tags))
    <<: *interpolate-product-templates
  - task: configure-srt
    tags: ((tags))
    image: platform-automation-image
    file: platform-automation-tasks/tasks/configure-product.yml
    input_mapping:
      config: interpolated-product-templates
      env: variable
      vars: variable
    params:
      CONFIG_FILE: product-configs/((tas_version))/srt.yml
      VARS_FILES: vars/((foundation))/vars/srt-vars.yml
      ENV_FILE: ((foundation))/env/env.yml

- name: update-pas-certificates
  on_failure:
    put: notify
    tags: ((tags))
    params:
      <<: *slack_failed_param
  on_success:  
    put: notify
    tags: ((tags))
    params:
      <<: *slack_succeeded_param
  serial_groups:
  - apply
  - configure-products
  serial: true
  plan:
  - put: notify
    tags: ((tags))
    params:
      <<: *slack_start_param
  - in_parallel:
    - get: platform-automation-image
      tags: ((tags))
      params:
        unpack: true
      passed:
        - upload-and-stage-srt
      trigger: true
    - get: platform-automation-tasks
      tags: ((tags))
      params:
        unpack: true
    - get: templates
      tags: ((tags))
    - get: variable
      tags: ((tags))
  - task: interpolate-product-templates
    tags: ((tags))
    <<: *interpolate-product-templates      
  - task: configure-pas-certicicates
    tags: ((tags))
    image: platform-automation-image
    file: platform-automation-tasks/tasks/configure-product.yml
    input_mapping:
      config: interpolated-product-templates
      env: variable
      vars: variable
    params:
      CONFIG_FILE: product-configs/((tas_version))/pas_certs.yml
#      VARS_FILES: vars/((foundation))/vars/pas_certs-vars.yml
      ENV_FILE: ((foundation))/env/env.yml



- name: deploy-asdk
  on_failure:
    put: notify
    tags: ((tags))
    params:
      <<: *slack_failed_param
  on_success:  
    put: notify
    tags: ((tags))
    params:
      <<: *slack_succeeded_param
  plan:
  - put: notify
    tags: ((tags))
    params:
      <<: *slack_start_param
  - get: after-midnight
    tags: ((tags))
    trigger: true
  - get: platform-automation-pivnet
    tags: ((tags))
    trigger: true  
  - in_parallel:
    - put: platform-automation-tasks
      tags: ((tags))
      params:
        file: platform-automation-pivnet/*tasks*.zip
    - put: platform-automation-image
      tags: ((tags))
      params:
        file: platform-automation-pivnet/*image*.tgz   

- name: staged-pas-config
  on_failure:
    put: notify
    tags: ((tags))
    params:
      <<: *slack_failed_param
  on_success:  
    put: notify
    tags: ((tags))
    params:
      <<: *slack_succeeded_param
  serial_groups:
  - staged-configs
  plan:
  - put: notify
    tags: ((tags))
    params:
      <<: *slack_start_param
  - in_parallel:
      <<: *stage_steps
  - task: staged-config
    tags: ((tags))
    <<: *stage_config
    params:
      PRODUCT_NAME: cf
      ENV_FILE: ((foundation))/env/env.yml
      SUBSTITUTE_CREDENTIALS_WITH_PLACEHOLDERS: false
    ensure: #&make-config-commit
      do:
        - task: make-commit
          tags: ((tags))
          <<: *do_stage_commit
          params:
            FILE_SOURCE_PATH: cf.yml
            FILE_DESTINATION_PATH: ((foundation))/config/cf.yml
            <<: *git_commit_env
        - put: variable
          tags: ((tags))
          params:
            repository: variable-commit
            merge: true

- name: staged-p-compliance-scanner-config
  on_failure:
    put: notify
    tags: ((tags))
    params:
      <<: *slack_failed_param
  on_success:  
    put: notify
    tags: ((tags))
    params:
      <<: *slack_succeeded_param
  serial_groups:
  - staged-configs
  plan:
  - put: notify
    tags: ((tags))
    params:
      <<: *slack_start_param
  - in_parallel:
      <<: *stage_steps
  - task: staged-config
    tags: ((tags))
    <<: *stage_config
    params:
      PRODUCT_NAME: p-compliance-scanner
      ENV_FILE: ((foundation))/env/env.yml
      SUBSTITUTE_CREDENTIALS_WITH_PLACEHOLDERS: false
    ensure: #&make-config-commit
      do:
        - task: make-commit
          tags: ((tags))
          <<: *do_stage_commit
          params:
            FILE_SOURCE_PATH: p-compliance-scanner.yml
            FILE_DESTINATION_PATH: ((foundation))/config/p-compliance-scanner.yml
            <<: *git_commit_env
        - put: variable
          tags: ((tags))
          params:
            repository: variable-commit
            merge: true

- name: staged-p-event-alerts-config
  on_failure:
    put: notify
    tags: ((tags))
    params:
      <<: *slack_failed_param
  on_success:  
    put: notify
    tags: ((tags))
    params:
      <<: *slack_succeeded_param
  serial_groups:
  - staged-configs
  plan:
  - put: notify
    tags: ((tags))
    params:
      <<: *slack_start_param
  - in_parallel:
      <<: *stage_steps
  - task: staged-config
    tags: ((tags))
    <<: *stage_config
    params:
      PRODUCT_NAME: p-event-alerts
      ENV_FILE: ((foundation))/env/env.yml
      SUBSTITUTE_CREDENTIALS_WITH_PLACEHOLDERS: false
    ensure: #&make-config-commit
      do:
        - task: make-commit
          tags: ((tags))
          <<: *do_stage_commit
          params:
            FILE_SOURCE_PATH: p-event-alerts.yml
            FILE_DESTINATION_PATH: ((foundation))/config/p-event-alerts.yml
            <<: *git_commit_env
        - put: variable
          tags: ((tags))
          params:
            repository: variable-commit
            merge: true


- name: staged-p-healthwatch-config
  on_failure:
    put: notify
    tags: ((tags))
    params:
      <<: *slack_failed_param
  on_success:  
    put: notify
    tags: ((tags))
    params:
      <<: *slack_succeeded_param
  serial_groups:
  - staged-configs
  plan:
  - put: notify
    tags: ((tags))
    params:
      <<: *slack_start_param
  - in_parallel:
      <<: *stage_steps
  - task: staged-config
    tags: ((tags))
    <<: *stage_config
    params:
      PRODUCT_NAME: p-healthwatch
      ENV_FILE: ((foundation))/env/env.yml
      SUBSTITUTE_CREDENTIALS_WITH_PLACEHOLDERS: false
    ensure: #&make-config-commit
      do:
        - task: make-commit
          tags: ((tags))
          <<: *do_stage_commit
          params:
            FILE_SOURCE_PATH: p-healthwatch.yml
            FILE_DESTINATION_PATH: ((foundation))/config/p-healthwatch.yml
            <<: *git_commit_env
        - put: variable
          tags: ((tags))
          params:
            repository: variable-commit
            merge: true
- name: staged-pas-windows-config
  on_failure:
    put: notify
    tags: ((tags))
    params:
      <<: *slack_failed_param
  on_success:  
    put: notify
    tags: ((tags))
    params:
      <<: *slack_succeeded_param
  serial_groups:
  - staged-configs
  plan:
  - put: notify
    tags: ((tags))
    params:
      <<: *slack_start_param
  - in_parallel:
      <<: *stage_steps
  - task: staged-config
    tags: ((tags))
    <<: *stage_config
    params:
      PRODUCT_NAME: pas-windows
      ENV_FILE: ((foundation))/env/env.yml
      SUBSTITUTE_CREDENTIALS_WITH_PLACEHOLDERS: false
    ensure: #&make-config-commit
      do:
        - task: make-commit
          tags: ((tags))
          <<: *do_stage_commit
          params:
            FILE_SOURCE_PATH: pas-windows.yml
            FILE_DESTINATION_PATH: ((foundation))/config/pas-windows.yml
            <<: *git_commit_env
        - put: variable
          tags: ((tags))
          params:
            repository: variable-commit
            merge: true
- name: staged-container-services-manager-config
  on_failure:
    put: notify
    tags: ((tags))
    params:
      <<: *slack_failed_param
  on_success:  
    put: notify
    tags: ((tags))
    params:
      <<: *slack_succeeded_param
  serial_groups:
  - staged-configs
  plan:
  - put: notify
    tags: ((tags))
    params:
      <<: *slack_start_param
  - in_parallel:
      <<: *stage_steps
  - task: staged-config
    tags: ((tags))
    <<: *stage_config
    params:
      PRODUCT_NAME: container-services-manager
      ENV_FILE: ((foundation))/env/env.yml
      SUBSTITUTE_CREDENTIALS_WITH_PLACEHOLDERS: false
    ensure: #&make-config-commit
      do:
        - task: make-commit
          tags: ((tags))
          <<: *do_stage_commit
          params:
            FILE_SOURCE_PATH: container-services-manager.yml
            FILE_DESTINATION_PATH: ((foundation))/config/container-services-manager.yml
            <<: *git_commit_env
        - put: variable
          tags: ((tags))
          params:
            repository: variable-commit
            merge: true

- name: staged-pivotal-mysql-config
  on_failure:
    put: notify
    tags: ((tags))
    params:
      <<: *slack_failed_param
  on_success:  
    put: notify
    tags: ((tags))
    params:
      <<: *slack_succeeded_param
  serial_groups:
  - staged-configs
  plan:
  - put: notify
    tags: ((tags))
    params:
      <<: *slack_start_param
  - in_parallel:
      <<: *stage_steps
  - task: staged-config
    tags: ((tags))
    <<: *stage_config
    params:
      PRODUCT_NAME: pivotal-mysql
      ENV_FILE: ((foundation))/env/env.yml
      SUBSTITUTE_CREDENTIALS_WITH_PLACEHOLDERS: false
    ensure: #&make-config-commit
      do:
        - task: make-commit
          tags: ((tags))
          <<: *do_stage_commit
          params:
            FILE_SOURCE_PATH: pivotal-mysql.yml
            FILE_DESTINATION_PATH: ((foundation))/config/pivotal-mysql.yml
            <<: *git_commit_env
        - put: variable
          tags: ((tags))
          params:
            repository: variable-commit
            merge: true
              
- name: staged-p-spring-cloud-services-config
  on_failure:
    put: notify
    tags: ((tags))
    params:
      <<: *slack_failed_param
  on_success:  
    put: notify
    tags: ((tags))
    params:
      <<: *slack_succeeded_param
  serial_groups:
  - staged-configs
  plan:
  - put: notify
    tags: ((tags))
    params:
      <<: *slack_start_param
  - in_parallel:
      <<: *stage_steps
  - task: staged-config
    tags: ((tags))
    <<: *stage_config
    params:
      PRODUCT_NAME: p-spring-cloud-services
      ENV_FILE: ((foundation))/env/env.yml
      SUBSTITUTE_CREDENTIALS_WITH_PLACEHOLDERS: false
    ensure: #&make-config-commit
      do:
        - task: make-commit
          tags: ((tags))
          <<: *do_stage_commit
          params:
            FILE_SOURCE_PATH: p-spring-cloud-services.yml
            FILE_DESTINATION_PATH: ((foundation))/config/p-spring-cloud-services.yml
            <<: *git_commit_env
        - put: variable
          tags: ((tags))
          params:
            repository: variable-commit
            merge: true
- name: staged-p-spring-cloud-services-3-config
  on_failure:
    put: notify
    tags: ((tags))
    params:
      <<: *slack_failed_param
  on_success:  
    put: notify
    tags: ((tags))
    params:
      <<: *slack_succeeded_param
  serial_groups:
  - staged-configs
  plan:
  - put: notify
    tags: ((tags))
    params:
      <<: *slack_start_param
  - in_parallel:
      <<: *stage_steps
  - task: staged-config
    tags: ((tags))
    <<: *stage_config
    params:
      PRODUCT_NAME: p_spring-cloud-services
      ENV_FILE: ((foundation))/env/env.yml
      SUBSTITUTE_CREDENTIALS_WITH_PLACEHOLDERS: false
    ensure: #&make-config-commit
      do:
        - task: make-commit
          tags: ((tags))
          <<: *do_stage_commit
          params:
            FILE_SOURCE_PATH: p_spring-cloud-services.yml
            FILE_DESTINATION_PATH: ((foundation))/config/p_spring-cloud-services.yml
            <<: *git_commit_env
        - put: variable
          tags: ((tags))
          params:
            repository: variable-commit
            merge: true

- name: staged-p-rabbitmq-config
  on_failure:
    put: notify
    tags: ((tags))
    params:
      <<: *slack_failed_param
  on_success:  
    put: notify
    tags: ((tags))
    params:
      <<: *slack_succeeded_param
  serial_groups:
  - staged-configs
  plan:
  - put: notify
    tags: ((tags))
    params:
      <<: *slack_start_param
  - in_parallel:
      <<: *stage_steps
  - task: staged-config
    tags: ((tags))
    <<: *stage_config
    params:
      PRODUCT_NAME: p-rabbitmq
      ENV_FILE: ((foundation))/env/env.yml
      SUBSTITUTE_CREDENTIALS_WITH_PLACEHOLDERS: false
    ensure: #&make-config-commit
      do:
        - task: make-commit
          tags: ((tags))
          <<: *do_stage_commit
          params:
            FILE_SOURCE_PATH: p-rabbitmq.yml
            FILE_DESTINATION_PATH: ((foundation))/config/p-rabbitmq.yml
            <<: *git_commit_env
        - put: variable
          tags: ((tags))
          params:
            repository: variable-commit
            merge: true
### MASB
- name: get-azure-service-broker
  on_failure:
    put: notify
    tags: ((tags))
    params:
      <<: *slack_failed_param
  on_success:  
    put: notify
    tags: ((tags))
    params:
      <<: *slack_succeeded_param
  serial: true
  serial_groups: [ get-products ]
  plan:
  - put: notify
    tags: ((tags))
    params:
      <<: *slack_start_param
  - in_parallel:
    - get: after-midnight
      tags: ((tags))
      trigger: true
    - get: platform-automation-image
      tags: ((tags))
      params:
        unpack: true
      passed:
      - install-opsman      
    - get: platform-automation-tasks
      tags: ((tags))
      params:
        unpack: true
    - get: templates
      tags: ((tags))
  - task: interpolate-product-downloads
    tags: ((tags))
    <<: *interpolate-product-downloads
  - task: download-azure-service-broker-product-and-stemcell
    tags: ((tags))
    image: platform-automation-image
    file: platform-automation-tasks/tasks/download-product.yml
    params:
      CONFIG_FILE: download-product-configs/((tas_version))/download-azure-service-broker.yml
    input_mapping:
      config: interpolated-product-downloads
    output_mapping: {downloaded-stemcell: azure-service-broker-stemcell}
  - in_parallel:
    - put: azure-service-broker-product
      tags: ((tags))
      params:
        file: downloaded-product/*.pivotal
    - put: azure-service-broker-stemcell
      tags: ((tags))
      params:
        file: azure-service-broker-stemcell/*.tgz
- name: upload-and-stage-azure-service-broker
  on_failure:
    put: notify
    tags: ((tags))
    params:
      <<: *slack_failed_param
  on_success:  
    put: notify
    tags: ((tags))
    params:
      <<: *slack_succeeded_param
  serial_groups:
  - apply
  - upload-and-stage
  - configure-products
  - get-products
  serial: true
  plan:
  - put: notify
    tags: ((tags))
    params:
      <<: *slack_start_param
  - in_parallel:
    - get: platform-automation-image
      tags: ((tags))
      params:
        unpack: true
    - get: platform-automation-tasks
      tags: ((tags))
      params:
        unpack: true
      passed:
      - upgrade-opsman    
    - get: templates
      tags: ((tags))
    - get: variable
      tags: ((tags))
  - task: interpolate-product-downloads
    tags: ((tags))
    <<: *interpolate-product-downloads     
  - task: download-azure-service-broker
    tags: ((tags))
    image: platform-automation-image
    file: platform-automation-tasks/tasks/download-product-s3.yml
    params:
      CONFIG_FILE: download-product-configs/((tas_version))/download-azure-service-broker.yml
    input_mapping:
      config: interpolated-product-downloads
    output_mapping:
      downloaded-product: azure-service-broker-product
      downloaded-stemcell: azure-service-broker-stemcell
  - task: upload-product
    tags: ((tags))
    image: platform-automation-image
    file: platform-automation-tasks/tasks/upload-product.yml
    input_mapping:
      product: azure-service-broker-product
      env: variable
    params:
      ENV_FILE: ((foundation))/env/env.yml
  - task: upload-azure-service-broker-stemcell
    tags: ((tags))
    image: platform-automation-image
    file: platform-automation-tasks/tasks/upload-stemcell.yml
    input_mapping:
      env: variable
      stemcell: azure-service-broker-stemcell
    params:
      ENV_FILE: ((foundation))/env/env.yml
  - task: stage-product
    tags: ((tags))
    image: platform-automation-image
    file: platform-automation-tasks/tasks/stage-product.yml
    input_mapping:
      product: azure-service-broker-product
      env: variable
    params:
      ENV_FILE: ((foundation))/env/env.yml   

- name: configure-azure-service-broker
  on_failure:
    put: notify
    tags: ((tags))
    params:
      <<: *slack_failed_param
  on_success:  
    put: notify
    tags: ((tags))
    params:
      <<: *slack_succeeded_param
  serial_groups:
  - apply
  - configure-products
  serial: true
  plan:
  - put: notify
    tags: ((tags))
    params:
      <<: *slack_start_param
  - in_parallel:
    - get: platform-automation-image
      tags: ((tags))
      params:
        unpack: true
      passed:
        - upload-and-stage-azure-service-broker
      trigger: true
    - get: platform-automation-tasks
      tags: ((tags))
      params:
        unpack: true
    - get: templates
      tags: ((tags))
    - get: variable
      tags: ((tags))
  - task: interpolate-product-templates
    tags: ((tags))
    <<: *interpolate-product-templates
  - task: configure-azure-service-broker
    tags: ((tags))
    image: platform-automation-image
    file: platform-automation-tasks/tasks/configure-product.yml
    input_mapping:
      config: interpolated-product-templates
      env: variable
      vars: variable
    params:
      CONFIG_FILE: product-configs/((tas_version))/azure-service-broker.yml
      VARS_FILES: vars/((foundation))/vars/azure-service-broker-vars.yml
      ENV_FILE: ((foundation))/env/env.yml 


### end MASB

#### maint  tasks
- name: manual-export-installation
  serial: true
  on_failure:
    put: notify
    params:
      <<: *slack_failed_param
  on_success:  
    put: notify
    params:
      <<: *slack_succeeded_param
  plan:
  - put: notify
    params:
     <<: *slack_start_param
  - in_parallel:
      - get: platform-automation-image
        tags: ((tags))      
        params:
          unpack: true
      - get: platform-automation-tasks
        tags: ((tags))      
        params:
          unpack: true
      - get: templates
        tags: ((tags))      
      - get: variable
        tags: ((tags))      
  - task: export-installation
    tags: ((tags))      
    image: platform-automation-image
    file: platform-automation-tasks/tasks/export-installation.yml
    input_mapping:
      env: variable
    params:
      ENV_FILE: ((foundation))/env/env.yml
      INSTALLATION_FILE: installation-$timestamp.zip
  - put: installation
    tags: ((tags))      
    params:
      file: installation/installation*.zip

- name: delete-installation
  serial: true
  plan:
  - in_parallel:
    - get: platform-automation-image
      params:
        unpack: true
    - get: platform-automation-tasks
      params:
        unpack: true
    - get: variable
  - task: delete-installation
    image: platform-automation-image
    file: platform-automation-tasks/tasks/delete-installation.yml
    input_mapping:
      env: variable
    params:
    # VARS_FILES: vars/((foundation))/vars/opsman-vars.yml
     ENV_FILE: ((foundation))/env/env.yml
- name: update-om-certificates
  serial: true
  serial_groups: [ install ]
  plan:
  - in_parallel:
    - get: platform-automation-image
      tags: ((tags))
      params:
        unpack: true
#    - get: one-time-trigger
#      tags: ((tags))
#      trigger: false
    - get: additional-tasks
      tags: ((tags))
      params:
        unpack: true    
    - get: templates
      tags: ((tags))
    - get: variable
      tags: ((tags))
  - task: update om certficates
    tags: ((tags))
    image: platform-automation-image
    file: additional-tasks/tasks/update-ssl-certificate.yml
    input_mapping:
      env: variable
    params:
      ENV_FILE: ((foundation))/env/env.yml
      CERTIFICATE_PEM: ((pcf_domain_cert.certificate))
      KEY_PEM: ((pcf_domain_cert.private_key))

####
groups:

- name: install-pivotal-platform
  jobs:
  - get-opsman-pivnet
  - upgrade-opsman
  - export-installation
  - staged-director-config 
  - install-opsman 
  - get-opsman-image-azure
#  - configure-opsman
#  - apply-director
#
  - get-platform-automation
  - get-srt
  - get-pas-windows
  - get-p-spring-cloud-services
  - get-p-spring-cloud-services-3
  - get-p-rabbitmq
  - get-pivotal-mysql
  - get-opsman-pivnet
  - get-opsman-image-azure
  - get-p-healthwatch
  - get-wavefront-nozzle
  - get-p-event-alerts
  - get-apm
  - get-p-compliance-scanner
  - get-azure-service-broker
  - get-container-services-manager

#
  - upload-and-stage-srt
  - upload-and-stage-pas-windows  
  - upload-and-stage-pivotal-mysql
  - upload-and-stage-p-spring-cloud-services
  - upload-and-stage-p-spring-cloud-services-3
  - upload-and-stage-p-rabbitmq
  - upload-and-stage-p-healthwatch
  - upload-and-stage-wavefront-nozzle
  - upload-and-stage-p-event-alerts
  - upload-and-stage-apm
  - upload-and-stage-p-compliance-scanner
  - upload-and-stage-azure-service-broker

#  
  - configure-srt
  - configure-pas-windows
  - configure-p-rabbitmq
  - configure-pivotal-mysql
  - configure-p-spring-cloud-services
  - configure-p-spring-cloud-services-3
  - configure-p-healthwatch
  - configure-wavefront-nozzle
  - configure-p-event-alerts
  - configure-apm
  - configure-p-compliance-scanner
  - configure-azure-service-broker
  - apply-product-changes

###
- name: staged-configs
  jobs:
  - staged-pas-config
  - staged-pivotal-mysql-config
  - staged-p-spring-cloud-services-config
  - staged-p-spring-cloud-services-3-config
  - staged-p-rabbitmq-config
  - staged-p-compliance-scanner-config
  - staged-p-healthwatch-config
  - staged-pas-windows-config
  - staged-p-event-alerts-config
  - staged-container-services-manager-config


- name: get-products
  jobs:
  - get-platform-automation
  - get-srt
  - get-pas-windows
  - get-p-spring-cloud-services
  - get-p-spring-cloud-services-3
  - get-p-rabbitmq
  - get-pivotal-mysql
  - get-opsman-pivnet
  - get-opsman-image-azure
  - get-p-healthwatch
  - get-wavefront-nozzle
  - get-p-event-alerts
  - get-p-compliance-scanner
  - get-azure-service-broker
  - get-container-services-manager

- name: upgrade-products
  jobs:
  - upload-and-stage-apm
  - upload-and-stage-srt
  - upload-and-stage-pas-windows  
  - upload-and-stage-pivotal-mysql
  - upload-and-stage-p-spring-cloud-services
  - upload-and-stage-p-spring-cloud-services-3
  - upload-and-stage-p-rabbitmq
  - upload-and-stage-p-healthwatch
  - upload-and-stage-wavefront-nozzle
  - upload-and-stage-p-event-alerts
  - upload-and-stage-p-compliance-scanner
  - upload-and-stage-azure-service-broker
  - upload-and-stage-container-services-manager

- name: configure-products
  jobs:
  - configure-srt
  - configure-apm
  - configure-pas-windows
  - configure-p-rabbitmq
  - configure-pivotal-mysql
  - configure-p-spring-cloud-services
  - configure-p-spring-cloud-services-3
  - configure-p-healthwatch
  - configure-wavefront-nozzle
  - configure-p-event-alerts
  - configure-p-compliance-scanner
  - configure-azure-service-broker
  - configure-container-services-manager
  - apply-product-changes

- name: service-jobs
  jobs:
  - manual-export-installation
  - delete-installation
  - update-pas-certificates
  - update-om-certificates
  - delete-orphan-azurevm-images
  - query-unattached-azure-disks
  - query-unattached-azure-nics
  - delete-unattached-azure-disks
  - delete-unattached-azure-nics
  - delete-opsman-vm
  - delete-pcf
  - test-azcli
  - deploy-opsman-from-arm
  - run-azcli-get-vms
  - testing
  - test-interpolate
  - test-interpolate-srt

- name: deploy-asdk-1908-plans
  jobs:  
  - deploy-asdk


