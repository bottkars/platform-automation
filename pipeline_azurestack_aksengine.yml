---
s3_env: &s3_env
  access_key_id: ((((foundation))/s3_access_key_id))
  endpoint:  ((((foundation))/s3_endpoint))
  region_name: ((((foundation))/s3_region_name))
  secret_access_key: ((((foundation))/s3_secret_access_key))
azure_env: &azure_env
  PROFILE: ((arm_profile))
  CA_CERT: ((foundation))/cert/root.pem
  AZURE_CLI_CA_PATH: /opt/az/lib/python3.6/site-packages/certifi/cacert.pem
  ENDPOINT_RESOURCE_MANAGER: ((((foundation))/endpoint-resource-manager)) 
  VAULT_DNS:  ((vault-dns))
  SUFFIX_STORAGE_ENDPOINT: ((suffix-storage-endpoint))
  AZURE_TENANT_ID: ((((foundation))/tenant_id))
  AZURE_CLIENT_ID: ((((foundation))/client_id))
  AZURE_CLIENT_SECRET: ((((foundation))/client_secret))
  AZURE_SUBSCRIPTION_ID: ((((foundation))/subscription_id))
  RESOURCE_GROUP: ((resource_group))
  LOCATION: ((azurestack_region))


credhub_env: &credhub_env
  CREDHUB_CLIENT: ((credhub-client))
  CREDHUB_SECRET: ((credhub-secret))
  CREDHUB_SERVER: ((credhub-server))
  PREFIX: /concourse/main/((foundation))
  CREDHUB_CA_CERT: ((credhub-ca-cert.certificate))

stage_steps: &stage_steps
  steps:
    - get: platform-automation-image
      tags: ((tags))
      params:
        unpack: true
    - get: platform-automation-tasks
      tags: ((tags))
      params:
        unpack: true
    - get: templates
      tags: ((tags))
    - get: variable
      tags: ((tags))

stage_config: &stage_config
  image: platform-automation-image
  file: platform-automation-tasks/tasks/staged-config.yml
  input_mapping:
    env: variable

do_stage_commit: &do_stage_commit
  image: platform-automation-image
  file: platform-automation-tasks/tasks/make-git-commit.yml
  input_mapping:
    repository: variable
    file-source: generated-config
  output_mapping:
    repository-commit: variable-commit

true_trigger: &true_trigger
  trigger: true

  
git_commit_env: &git_commit_env
  GIT_AUTHOR_EMAIL: "pcf-pipeline-bot@ebottnet.de"
  GIT_AUTHOR_NAME: "Platform Automation Bot"
  COMMIT_MESSAGE: 'Staged  Config Writer'

slack_start_param: &slack_start_param
  channel: ((slack.channel))
  text: |
    ((foundation)) Job $BUILD_JOB_NAME started with ID $BUILD_ID for 
    build $BUILD_NAME for team $BUILD_TEAM_NAME at
    $ATC_EXTERNAL_URL using pipeline  $BUILD_PIPELINE_NAME
    see $ATC_EXTERNAL_URL/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME
    for details
  icon_emoji: ":concourse-started:"

slack_succeeded_param: &slack_succeeded_param
  channel: ((slack.channel))
  text: |
    ((foundation)) Job $BUILD_JOB_NAME succeeded with ID $BUILD_ID for 
    build $BUILD_NAME for team $BUILD_TEAM_NAME at
    $ATC_EXTERNAL_URL using pipeline  $BUILD_PIPELINE_NAME    
    see $ATC_EXTERNAL_URL/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME
    for details
  icon_emoji: ":concourse-succeeded:"

slack_failed_param: &slack_failed_param
  channel: ((slack.channel))
  text: |
    ((foundation)) Job $BUILD_JOB_NAME failed with ID $BUILD_ID for 
    build $BUILD_NAME for team $BUILD_TEAM_NAME at
    $ATC_EXTERNAL_URL using pipeline  $BUILD_PIPELINE_NAME
    see $ATC_EXTERNAL_URL/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME
    for details
  icon_emoji: ":concourse-failed:"


resource_types:
- name: pivnet
  tags: ((tags))
  type: docker-image
  source:
    repository: pivotalcf/pivnet-resource
    tag: latest-final
- name: slack-notification
  tags: ((tags))
  type: docker-image
  source:
    repository: cfcommunity/slack-notification-resource    
resources:
- name: additional-tasks
  icon: amazon-drive
  type: s3
  source:
    <<: *s3_env
    bucket: ((((foundation))/buckets_pivnet_tasks))
    regexp: additional-tasks-(.*).zip
# triggers
#- name: daily-trigger
#  tags: ((tags))
#  icon: calendar-clock
#  type: time
#  source:
#    interval: 24h


#- name: one-time-trigger
#  tags: ((tags))
 # icon: calendar-clock
#  type: time
#  source:
#    interval: 999999h


#- name: after-midnight
#  tags: ((tags))
#  icon: calendar-clock
#  type: time
#  source:
#    start: 01:00 AM
#    stop: ((after_midnight_end))
#    interval: 24h
#    location: Europe/Berlin 
# notifications
#- name: notify
#  tags: ((tags))
#  icon: bell
#  type: slack-notification
#  source:
#    url: ((slack.webhook))
#- name: installation
#  tags: ((tags))
#  icon: amazon-drive
#  type: s3
#  source:
#    <<: *s3_env
#    bucket: ((buckets_installation))
#    regexp: ((foundation))/installation-(.*).zip    
#- name: platform-automation-pivnet
#  tags: ((tags))
#  icon: cloudfoundry
#  type: pivnet
#  source:
#    api_token: ((pivnet-token))
#    product_slug: platform-automation
#    product_version: 4\.(.*)
#    sort_by: semver

#- name: platform-automation-tasks
#  tags: ((tags))
#  icon: amazon-drive
#  type: s3
#  source:
#    <<: *s3_env
#    bucket: ((buckets_pivnet_tasks))
#    regexp: platform-automation-tasks-(.*).zip

- name: platform-automation-image
  tags: ((tags))
  icon: amazon-drive
  type: s3
  source:
    <<: *s3_env
    bucket: ((buckets_pivnet_image))
    regexp: platform-automation-image-(.*).tgz


- name: aks-engine-release
  tags: ((tags))
  icon: github-circle
  type: github-release
  check_every: 10m  
  source: 
    owner: Azure
    repository: aks-engine
    # uri: https://github.com/Azure/aks-engine
    # private_key: ((template-deploy-key.private_key))
    # branch: master
    tag_filter: "v0.43.(.*)"
    





#- name: pipeline-lock
#  icon: cloud-lock-outline
#  type: pool
#  check_every: 10m
#  source:
#    uri: ((variable-repo))
#    branch: master
#    pool: pas
#    private_key: ((((foundation))/variable-deploy-key.private_key))
#    retry_delay: 300s

#- name: download-lock
#  icon: cloud-lock-outline
#  type: pool
#  check_every: 10m
#  source:
#    uri: ((variable-repo))
#    branch: master
#    pool: download-lock
#    private_key: ((((foundation))/variable-deploy-key.private_key))
#    retry_delay: 300s
- name: variable
  tags: ((tags))
  icon: github-circle
  type: git  
  source:
    uri: ((variable-repo))
    private_key: ((((foundation))/variable-deploy-key.private_key))
    branch: master

- name: azs-concourse
  tags: ((tags))
  icon: github-circle
  type: git
  check_every: 10m  
  source:  
    uri: https://github.com/bottkars/azs-concourse
    branch: master


jobs:
- name: get-aksengine
  plan:
  - in_parallel:
    - get: additional-tasks
      tags: ((tags))
    - get: aks-engine-release
      tags: ((tags))
      params:
       globs:
       - aks-engine-(.*)-linux-amd64.tar.gz
       - aks-engine-v*-linux-amd64.tar.gz
    - get: azs-concourse
      tags: ((tags))
    - get: platform-automation-image
      tags: ((tags))
      params:
        unpack: true
    - get: variable
      tags: ((tags))
  - task: configure-aks-engine
    tags: ((tags))
    file: azs-concourse/ci/tasks/deploy-aks.yml  
    image: platform-automation-image
    input_mapping:
      config: variable
    params:
      <<: *azure_env




