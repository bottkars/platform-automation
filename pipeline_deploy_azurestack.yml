---
s3_env: &s3_env
  access_key_id: ((s3_access_key_id))
  endpoint:  ((s3_endpoint))
  region_name: ((s3_region_name))
  secret_access_key: ((s3_secret_access_key))
azure_env: &azure_env
  PROFILE: ((arm_profile))
  CA_CERT: ((foundation))/cert/root.pem
  AZURE_CLI_CA_PATH: /opt/az/lib/python3.6/site-packages/certifi/cacert.pem
  ENDPOINT_RESOURCE_MANAGER: ((endpoint-resource-manager)) 
  VAULT_DNS:  ((vault-dns))
  SUFFIX_STORAGE_ENDPOINT: ((suffix-storage-endpoint))
  AZURE_TENANT_ID: ((tenant_id))
  AZURE_CLIENT_ID: ((client_id))
  AZURE_CLIENT_SECRET: ((client_secret))
  AZURE_SUBSCRIPTION_ID: ((subscription_id))
  RESOURCE_GROUP: ((resource_group))
  LOCATION: ((azurestack_region))


credhub_env: &credhub_env
  CREDHUB_CLIENT: ((credhub-client))
  CREDHUB_SECRET: ((credhub-secret))
  CREDHUB_SERVER: ((credhub-server))
  PREFIX: /concourse/main/((foundation))
  CREDHUB_CA_CERT: ((credhub-ca-cert.certificate))

stage_steps: &stage_steps
  steps:
    - get: platform-automation-image
      tags: ((tags))
      params:
        unpack: true
    - get: platform-automation-tasks
      tags: ((tags))
      params:
        unpack: true
    - get: templates
      tags: ((tags))
    - get: variable
      tags: ((tags))

stage_config: &stage_config
  image: platform-automation-image
  file: platform-automation-tasks/tasks/staged-config.yml
  input_mapping:
    env: variable

do_stage_commit: &do_stage_commit
  image: platform-automation-image
  file: platform-automation-tasks/tasks/make-git-commit.yml
  input_mapping:
    repository: variable
    file-source: generated-config
  output_mapping:
    repository-commit: variable-commit

true_trigger: &true_trigger
  trigger: true

  
git_commit_env: &git_commit_env
  GIT_AUTHOR_EMAIL: "pcf-pipeline-bot@ebottnet.de"
  GIT_AUTHOR_NAME: "Platform Automation Bot"
  COMMIT_MESSAGE: 'Staged  Config Writer'

slack_start_param: &slack_start_param
  channel: ((slack.channel))
  text: |
    ((foundation)) Job $BUILD_JOB_NAME started with ID $BUILD_ID for 
    build $BUILD_NAME for team $BUILD_TEAM_NAME at
    $ATC_EXTERNAL_URL using pipeline  $BUILD_PIPELINE_NAME
    see $ATC_EXTERNAL_URL/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME
    for details
  icon_emoji: ":concourse-started:"

slack_succeeded_param: &slack_succeeded_param
  channel: ((slack.channel))
  text: |
    ((foundation)) Job $BUILD_JOB_NAME succeeded with ID $BUILD_ID for 
    build $BUILD_NAME for team $BUILD_TEAM_NAME at
    $ATC_EXTERNAL_URL using pipeline  $BUILD_PIPELINE_NAME    
    see $ATC_EXTERNAL_URL/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME
    for details
  icon_emoji: ":concourse-succeeded:"

slack_failed_param: &slack_failed_param
  channel: ((slack.channel))
  text: |
    ((foundation)) Job $BUILD_JOB_NAME failed with ID $BUILD_ID for 
    build $BUILD_NAME for team $BUILD_TEAM_NAME at
    $ATC_EXTERNAL_URL using pipeline  $BUILD_PIPELINE_NAME
    see $ATC_EXTERNAL_URL/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME
    for details
  icon_emoji: ":concourse-failed:"


resource_types:
- name: pivnet
  tags: ((tags))
  type: docker-image
  source:
    repository: pivotalcf/pivnet-resource
    tag: latest-final
- name: slack-notification
  tags: ((tags))
  type: docker-image
  source:
    repository: cfcommunity/slack-notification-resource    
resources:
- name: additional-tasks
  icon: amazon-drive
  type: s3
  source:
    <<: *s3_env
    bucket: ((((foundation))/buckets_pivnet_tasks))
    regexp: additional-tasks-(.*).zip
# triggers
- name: daily-trigger
  tags: ((tags))
  icon: calendar-clock
  type: time
  source:
    interval: 24h


- name: one-time-trigger
  tags: ((tags))
  icon: calendar-clock
  type: time
  source:
    interval: 999999h


- name: after-midnight
  tags: ((tags))
  icon: calendar-clock
  type: time
  source:
    start: 01:00 AM
    stop: ((after_midnight_end))
    interval: 24h
    location: Europe/Berlin 
# notifications
- name: notify
  tags: ((tags))
  icon: bell
  type: slack-notification
  source:
    url: ((slack.webhook))
- name: installation
  tags: ((tags))
  icon: amazon-drive
  type: s3
  source:
    <<: *s3_env
    bucket: ((buckets_installation))
    regexp: ((foundation))/installation-(.*).zip    
- name: platform-automation-pivnet
  tags: ((tags))
  icon: cloudfoundry
  type: pivnet
  source:
    api_token: ((pivnet-token))
    product_slug: platform-automation
    product_version: 4\.(.*)
    sort_by: semver

- name: platform-automation-tasks
  tags: ((tags))
  icon: amazon-drive
  type: s3
  source:
    <<: *s3_env
    bucket: ((buckets_pivnet_tasks))
    regexp: platform-automation-tasks-(.*).zip

- name: platform-automation-image
  tags: ((tags))
  icon: amazon-drive
  type: s3
  source:
    <<: *s3_env
    bucket: ((buckets_pivnet_image))
    regexp: platform-automation-image-(.*).tgz
- name: opsman-product
  type: s3
  source:
    <<: *s3_env
    bucket: ((buckets_pivnet_products))
    regexp: \[ops-manager,(.*)\].*.yml

- name: templates
  tags: ((tags))
  icon: github-circle
  type: git
  check_every: 10m  
  source: 
    uri: ((template-repo))
    private_key: ((template-deploy-key.private_key))
    branch: master

- name: variable
  tags: ((tags))
  icon: github-circle
  type: git
  check_every: 10m  
  source: 
    uri: ((variable-repo))
    private_key: ((variable-deploy-key.private_key))
    branch: master

- name: pipeline-lock
  icon: cloud-lock-outline
  type: pool
  source:
    uri: ((variable-repo))
    branch: master
    pool: pas
    private_key: ((((foundation))/variable-deploy-key.private_key))
    retry_delay: 300s

- name: download-lock
  icon: cloud-lock-outline
  type: pool
  source:
    uri: ((variable-repo))
    branch: master
    pool: download-lock
    private_key: ((((foundation))/variable-deploy-key.private_key))
    retry_delay: 300s

- name: azs-concourse
  tags: ((tags))
  icon: github-circle
  type: git
  check_every: 10m  
  source:  
    uri: https://github.com/bottkars/azs-concourse
    branch: master

interpolate-product-downloads: &interpolate-product-downloads
  image: platform-automation-image
  file: platform-automation-tasks/tasks/credhub-interpolate.yml
  params:
    <<: *credhub_env
    INTERPOLATION_PATHS: "download-product-configs/((pas_version))"
  input_mapping:
    files: templates
  output_mapping:
    interpolated-files: interpolated-product-downloads

interpolate-product-templates: &interpolate-product-templates
  image: platform-automation-image
  file: platform-automation-tasks/tasks/credhub-interpolate.yml
  params:
    <<: *credhub_env
    INTERPOLATION_PATHS: product-configs/((pas_version))
    SKIP_MISSING: true
  input_mapping:
    files: templates
  output_mapping:
    interpolated-files: interpolated-product-templates

jobs:
- name: get-opsman-image-azure
  on_failure:
    put: notify
    tags: ((tags))
    params:
      <<: *slack_failed_param
  on_success:  
    put: notify
    tags: ((tags))
    params:
      <<: *slack_succeeded_param
  serial: true
  serial_groups: [ get-products, upgrade-opsman, opsman ]
  plan:
  - put: notify
    tags: ((tags))
    params:
      <<: *slack_start_param
  - in_parallel:
    - get: templates
      tags: ((tags))
    - get: opsman-product
      tags: ((tags))
      passed: 
      - get-opsman-pivnet
      trigger: true
    - get: one-time-trigger
      tags: ((tags))
      trigger: true
    - get: installation
      tags: ((tags))
    - get: azs-concourse
      tags: ((tags))
    - get: platform-automation-image
      tags: ((tags))
      params:
        unpack: true
    - get: variable
      tags: ((tags))
  - task: copy-opsman-image
    tags: ((tags))
    file: azs-concourse/ci/tasks/copy-opsman-to-blob.yml  
    image: platform-automation-image
    input_mapping:
      image: opsman-product
      config: variable
    params:
      <<: *azure_env
      ACCOUNT_NAME: ((image_account_name))
      ACCOUNT_KEY: ((storage_account_key))
      DESTINATION_CONTAINER: ((destination_container))
      OPSMAN_IMAGE_LOCATION: ((opsman_image_location))








- name: install-opsman
  on_failure:
    put: notify
    tags: ((tags))
    params:
      <<: *slack_failed_param
  on_success:  
    put: notify
    tags: ((tags))
    params:
      <<: *slack_succeeded_param
  serial: true
  serial_groups: [ install ]
  plan:
  - put: notify
    tags: ((tags))
    params:
      <<: *slack_start_param
  - put: pipeline-lock
    resource: pipeline-lock
    tags: ((tags))
    params: {claim: base}  
  - get: variable
    tags: ((tags))
  - get: templates
    tags: ((tags))
  - get: azs-concourse
    tags: ((tags))
  - get: platform-automation-image
    tags: ((tags))
    params:
      unpack: true
  - get: one-time-trigger
    tags: ((tags))
    trigger: true
  - get: platform-automation-tasks
    tags: ((tags))
    params:
      unpack: true
  - get: additional-tasks
    tags: ((tags))
    params:
      unpack: true      
  - put: notify
    tags: ((tags))
    params:
      <<: *slack_start_param
  - task: interpolate-product-templates
    tags: ((tags))
    <<: *interpolate-product-templates          
  - task: interpolate-product-downloads
    tags: ((tags))
    <<: *interpolate-product-downloads
  - task: download-opsman-pivnet
    tags: ((tags))
    image: platform-automation-image
    file: platform-automation-tasks/tasks/download-product.yml
    input_mapping:
      config: interpolated-product-downloads      
    params:
      CONFIG_FILE: download-product-configs/((pas_version))/download-opsman.yml
  - in_parallel:
    - put: opsman-product
      tags: ((tags))
      params:
        file: downloaded-product/*     
  - task: download-opsman-s3
    tags: ((tags))
    image: platform-automation-image
    file: platform-automation-tasks/tasks/download-product.yml
    params:
      CONFIG_FILE: download-product-configs/((pas_version))/download-opsman.yml
      SOURCE: s3      
    input_mapping:
      config: interpolated-product-downloads
    output_mapping:
      downloaded-product: opsman-image
  - task: copy-opsman-image
    tags: ((tags))
    file: azs-concourse/ci/tasks/copy-opsman-to-blob.yml  
    image: platform-automation-image
    input_mapping:
      image: opsman-product
      config: variable
    params:
      <<: *azure_env
      ACCOUNT_NAME: ((image_account_name))
      ACCOUNT_KEY: ((storage_account_key))
      DESTINATION_CONTAINER: ((destination_container))
      OPSMAN_IMAGE_LOCATION: ((opsman_image_location))
  - task: validate-template
    tags: ((tags))
    image: platform-automation-image
    file: azs-concourse/ci/tasks/validate-pcf-template.yml  
    input_mapping:
      config: variable
      image: opsman-product
    params:
      <<: *azure_env
      TEMPLATE_URI: "https://raw.githubusercontent.com/bottkars/azure-pcf-opsman-powershell/testing/azuredeploy.json"
      PARAMETER_FILE: ((foundation))/config/parameters_opsman.json
      BOSHSTORAGEACCOUNT: ((boshstorageaccount))
      VM_NAME: ((ops_man_vmname))
  - task: deploy-opsman-template 
    tags: ((tags))
    image: platform-automation-image
    file: azs-concourse/ci/tasks/deploy-pcf-template.yml  
    input_mapping:
      config: variable
      image: opsman-product
    params:
      <<: *azure_env
      TEMPLATE_URI: "https://raw.githubusercontent.com/bottkars/azure-pcf-opsman-powershell/testing/azuredeploy.json"
      PARAMETER_FILE: ((foundation))/config/parameters_opsman.json
      BOSHSTORAGEACCOUNT: ((boshstorageaccount))
      STATE_FILE: director_deployment_vars.yml
      ACCOUNT_NAME: ((image_account_name))
      DESTINATION_CONTAINER: ((destination_container))
      OPSMAN_IMAGE_LOCATION: ((opsman_image_location))
      VM_NAME: ((ops_man_vmname))
    on_success: &make-config-director-commit
      do:
        - task: make-commit
          tags: ((tags))
          image: platform-automation-image
          file: platform-automation-tasks/tasks/make-git-commit.yml
          input_mapping:
            repository: variable
            file-source: generated-state
          output_mapping:
            repository-commit: variable-commit
          params:
            FILE_SOURCE_PATH: director_deployment_vars.yml
            FILE_DESTINATION_PATH: ((foundation))/vars/director_deployment_vars.yml
            GIT_AUTHOR_EMAIL: "pcf-pipeline-bot@example.com"
            GIT_AUTHOR_NAME: "Platform Automation Bot"
            COMMIT_MESSAGE: 'Update director state file'
        - put: variable
          tags: ((tags))
          params:
            repository: variable-commit
            merge: true
  - task: validate-vm
    tags: ((tags))
    image: platform-automation-image
    file: azs-concourse/ci/tasks/query-vm.yml  
    input_mapping:
      config: variable
    params:
      <<: *azure_env
      VM_NAME: ((ops_man_vmname))
      STATE_FILE: ((foundation))/state/state.yml 
    ensure: &make-state-commit
      do:
        - task: make-commit
          tags: ((tags))
          image: platform-automation-image
          file: platform-automation-tasks/tasks/make-git-commit.yml
          input_mapping:
            repository: variable
            file-source: generated-state
          output_mapping:
            repository-commit: variable-commit
          params:
            FILE_SOURCE_PATH: state.yml
            FILE_DESTINATION_PATH: ((foundation))/state/state.yml
            GIT_AUTHOR_EMAIL: "pcf-pipeline-bot@example.com"
            GIT_AUTHOR_NAME: "Platform Automation Bot"
            COMMIT_MESSAGE: 'Update state file'
        - put: variable
          tags: ((tags))
          params:
            repository: variable-commit
            merge: true
  - task: configure-saml-authentication
    tags: ((tags))
    image: platform-automation-image
    file: platform-automation-tasks/tasks/configure-saml-authentication.yml
    attempts: 10
    input_mapping:
      env: variable
      config: variable
    params:
      ENV_FILE: ((foundation))/env/env.yml
      AUTH_CONFIG_FILE: ((foundation))/config/auth.yml 
  - task: update om certficates
    tags: ((tags))
    image: platform-automation-image
    file: additional-tasks/tasks/update-ssl-certificate.yml
    attempts: 10
    input_mapping:
      env: variable
    params:
      ENV_FILE: ((foundation))/env/env.yml
      CERTIFICATE_PEM: ((pcf_domain_cert.certificate))
      KEY_PEM: ((pcf_domain_cert.private_key))                
  - task: configure-director
    tags: ((tags))
    image: platform-automation-image
    file: platform-automation-tasks/tasks/configure-director.yml 
    input_mapping:
      config: interpolated-product-templates
      env: variable
      vars: variable
    params:
      VARS_FILES: vars/((foundation))/vars/director-vars.yml vars/((foundation))/vars/director_deployment_vars.yml
      ENV_FILE: ((foundation))/env/env.yml
      DIRECTOR_CONFIG_FILE: product-configs/((pas_version))/director-azurestack.yml
  - task: configure-extensions
    tags: ((tags))
    image: platform-automation-image
    file: platform-automation-tasks/tasks/configure-director.yml 
    input_mapping:
      config: interpolated-product-templates
      env: variable
      vars: variable
    params:
      VARS_FILES: vars/((foundation))/vars/director-vars.yml vars/((foundation))/vars/director_deployment_vars.yml
      ENV_FILE: ((foundation))/env/env.yml
      DIRECTOR_CONFIG_FILE: product-configs/((pas_version))/extensions.yml
  - task: apply-director-changes
    tags: ((tags))
    image: platform-automation-image
    file: platform-automation-tasks/tasks/apply-director-changes.yml
    input_mapping:
      env: variable
    params:
      ENV_FILE: ((foundation))/env/env.yml
  - task: export-installation
    tags: ((tags))
    image: platform-automation-image
    file: platform-automation-tasks/tasks/export-installation.yml
    input_mapping:
      env: variable
    params:
      ENV_FILE: ((foundation))/env/env.yml
      INSTALLATION_FILE: installation-$timestamp.zip
  - put: installation
    tags: ((tags))
    params:
      file: installation/installation*.zip
  - put: pipeline-lock
    tags: ((tags))
    params: {release: pipeline-lock}
 
- name: get-opsman-pivnet
  on_failure:
    put: notify
    tags: ((tags))
    params:
      <<: *slack_failed_param
  on_success:  
    put: notify
    tags: ((tags))
    params:
      <<: *slack_succeeded_param
  serial_groups: [ get-products ]
  plan:
  - put: notify
    tags: ((tags))
    params:
      <<: *slack_start_param
  - in_parallel:
    - get: after-midnight
      tags: ((tags))
      trigger: true
    - get: platform-automation-image
      tags: ((tags))
      params:
        unpack: true
    - get: platform-automation-tasks
      tags: ((tags))
      params:
        unpack: true
    - get: templates
      tags: ((tags))
  - task: interpolate-product-downloads
    tags: ((tags))
    <<: *interpolate-product-downloads
  - task: download-opsman-pivnet
    tags: ((tags))
    image: platform-automation-image
    file: platform-automation-tasks/tasks/download-product.yml
    input_mapping:
      config: interpolated-product-downloads      
    params:
      CONFIG_FILE: download-product-configs/((pas_version))/download-opsman.yml
  - in_parallel:
    - put: opsman-product
      tags: ((tags))
      params:
        file: downloaded-product/*
        


- name: staged-director-config
  on_failure:
    put: notify
    tags: ((tags))
    params:
      <<: *slack_failed_param
  on_success:  
    put: notify
    tags: ((tags))
    params:
      <<: *slack_succeeded_param
  serial: true
  serial_groups: [ staged-products ]
  plan:
  - put: notify
    tags: ((tags))
    params:
      <<: *slack_start_param
  - in_parallel:
    - get: platform-automation-tasks
      tags: ((tags))
      params: {unpack: true}
    - get: platform-automation-image
      tags: ((tags))
      params: {unpack: true}
    - get: variable
      tags: ((tags))

  - task: staged-director-config
    tags: ((tags))
    image: platform-automation-image
    file: platform-automation-tasks/tasks/staged-director-config.yml
    input_mapping:
      env: variable
    params:
      ENV_FILE: ((foundation))/env/env.yml
    ensure: *make-state-commit

- name: export-installation
  on_failure:
    put: notify
    tags: ((tags))
    params:
      <<: *slack_failed_param
  on_success:  
    put: notify
    tags: ((tags))
    params:
      <<: *slack_succeeded_param
  serial: true
  serial_groups: [ install, upgrade-opsman, opsman, apply ]
  plan:
  - put: pipeline-lock
    tags: ((tags))
    params: {claim: base}  
  - put: notify
    tags: ((tags))
    params:
      <<: *slack_start_param
  - in_parallel:
    - get: daily-trigger
      tags: ((tags))
      trigger: true
    - get: platform-automation-image
      tags: ((tags))
      params:
        unpack: true
    - get: platform-automation-tasks
      tags: ((tags))
      params:
        unpack: true
    - get: opsman-product
      passed:
      - get-opsman-image-azure
      tags: ((tags))
      trigger: true       
    - get: templates
      tags: ((tags))
    - get: variable
      tags: ((tags))
    - get: one-time-trigger
      tags: ((tags))
      passed:
      - install-opsman
      trigger: true
  - task: export-installation
    tags: ((tags))
    image: platform-automation-image
    file: platform-automation-tasks/tasks/export-installation.yml
    input_mapping:
      env: variable
    params:
      ENV_FILE: ((foundation))/env/env.yml
      INSTALLATION_FILE: installation-$timestamp.zip
  - put: installation
    tags: ((tags))
    params:
      file: installation/installation*.zip
  - put: pipeline-lock
    tags: ((tags))
    params: {release: pipeline-lock}
- name: upgrade-opsman
  serial: true
  serial_groups: [ install, get-products, upgrade-opsman, opsman, apply ]
  on_failure:
    put: notify
    tags: ((tags))
    params:
      <<: *slack_failed_param
  on_success:  
    put: notify
    tags: ((tags))
    params:
      <<: *slack_succeeded_param
  plan:
  - put: pipeline-lock
    tags: ((tags))
    params: {claim: base}
  - put: notify
    tags: ((tags))
    params:
      <<: *slack_start_param
  - in_parallel:
    - get: one-time-trigger
      tags: ((tags))
      passed: [ export-installation ]
    - get: azs-concourse  
      tags: ((tags))
    - get: platform-automation-image
      tags: ((tags))
      params:
        unpack: true
    - get: platform-automation-tasks
      tags: ((tags))
      params:
        unpack: true
    - get: installation
      tags: ((tags))
      passed: [ export-installation ]
    - get: templates
      tags: ((tags))
    - get: variable
      tags: ((tags))
    - get: opsman-product
      tags: ((tags))
      passed: 
      - export-installation
      trigger: true
    - get: additional-tasks
      tags: ((tags))
      params:
        unpack: true
  - task: interpolate-product-downloads
    tags: ((tags))
    <<: *interpolate-product-downloads     
  - task: download-opsman-s3
    tags: ((tags))
    image: platform-automation-image
    file: platform-automation-tasks/tasks/download-product.yml
    params:
      CONFIG_FILE: download-product-configs/((pas_version))/download-opsman.yml
      SOURCE: s3
    input_mapping:
      config: interpolated-product-downloads
    output_mapping:
      downloaded-product: opsman-image
  - task: upgrade-opsman-vm
    tags: ((tags))
    image: platform-automation-image
    file: azs-concourse/ci/tasks/upgrade-opsman-template.yml  
    input_mapping:
      config: variable
      image: opsman-product
    params:
      <<: *azure_env
      TEMPLATE_URI: "https://raw.githubusercontent.com/bottkars/azure-pcf-opsman-powershell/testing/azuredeploy_update.json"
      PARAMETER_FILE: ((foundation))/config/parameters_opsman_update.json
      ACCOUNT_NAME: ((image_account_name))
      STATE_FILE: state.yml
      OPSMAN_URL: ((opsman-url))
      VM_NAME: ((ops_man_vmname))
    ensure: *make-state-commit
  - task: import-installation
    tags: ((tags))
    image: platform-automation-image
    file: platform-automation-tasks/tasks/import-installation.yml
    attempts: 10
    params:
      ENV_FILE: ((foundation))/env/env.yml
      INSTALLATION_FILE: installation*.zip
    input_mapping:
      env: variable
      installation: installation
  - task: update om certficates
    tags: ((tags))
    image: platform-automation-image
    file: additional-tasks/tasks/update-ssl-certificate.yml
    attempts: 10
    input_mapping:
      env: variable
    params:
      ENV_FILE: ((foundation))/env/env.yml
      CERTIFICATE_PEM: ((pcf_domain_cert.certificate))
      KEY_PEM: ((pcf_domain_cert.private_key))    
  - task: apply-director-changes
    tags: ((tags))
    image: platform-automation-image
    file: platform-automation-tasks/tasks/apply-director-changes.yml
    input_mapping:
      env: variable
    params:
      ENV_FILE: ((foundation))/env/env.yml    
  - put: pipeline-lock
    tags: ((tags))
    params: {release: pipeline-lock}  
          

- name: get-platform-automation
  on_failure:
    put: notify
    tags: ((tags))
    params:
      <<: *slack_failed_param
  on_success:  
    put: notify
    tags: ((tags))
    params:
      <<: *slack_succeeded_param
  plan:
  - put: notify
    tags: ((tags))
    params:
      <<: *slack_start_param
  - put: download-lock
    tags: ((tags))
    params:
      acquire: true    
  - in_parallel:
    - get: after-midnight
      tags: ((tags))
      trigger: true
    - get: platform-automation-pivnet
      tags: ((tags))
      trigger: true
  - in_parallel:
    - put: platform-automation-tasks
      tags: ((tags))
      params:
        file: platform-automation-pivnet/*tasks*.zip
    - put: platform-automation-image
      tags: ((tags))
      params:
        file: platform-automation-pivnet/*image*.tgz
  - put: download-lock
    tags: ((tags))
    params:
      release: download-lock
- name: test-interpolate
  on_failure:
    put: notify
    tags: ((tags))
    params:
      <<: *slack_failed_param
  on_success:  
    put: notify
    tags: ((tags))
    params:
      <<: *slack_succeeded_param
  plan:
  - put: notify
    tags: ((tags))
    params:
      <<: *slack_start_param
  - get: variable
    tags: ((tags))
  - get: templates
    tags: ((tags))
  - get: platform-automation-image
    tags: ((tags))
    params:
      unpack: true
  - get: platform-automation-tasks
    tags: ((tags))
    params:
      unpack: true
  - task: interpolate
    tags: ((tags))
    image: platform-automation-image
    file: platform-automation-tasks/tasks/test-interpolate.yml
    input_mapping:
      config: templates
      vars: variable
    params:
      CONFIG_FILE: product-configs/((pas_version))/p-event-alerts.yml
      VARS_FILES: vars/((foundation))/vars/p-event-alerts-vars.yml
      SKIP_MISSING: true    
#      VARS_FILES: vars/((foundation))/vars/pas_certs-vars.yml
      ENV_FILE: ((foundation))/env/env.yml
- name: delete-installation
  serial: true
  plan:
  - in_parallel:
    - get: platform-automation-image
      params:
        unpack: true
    - get: platform-automation-tasks
      params:
        unpack: true
    - get: variable
  - task: delete-installation
    image: platform-automation-image
    file: platform-automation-tasks/tasks/delete-installation.yml
    input_mapping:
      env: variable
    params:
    # VARS_FILES: vars/((foundation))/vars/opsman-vars.yml
     ENV_FILE: ((foundation))/env/env.yml
- name: update-om-certificates
  serial: true
  serial_groups: [ install ]
  plan:
  - in_parallel:
    - get: platform-automation-image
      tags: ((tags))
      params:
        unpack: true
    - get: additional-tasks
      tags: ((tags))
      params:
        unpack: true    
    - get: templates
      tags: ((tags))
    - get: variable
      tags: ((tags))
  - task: update om certficates
    tags: ((tags))
    image: platform-automation-image
    file: additional-tasks/tasks/update-ssl-certificate.yml
    input_mapping:
      env: variable
    params:
      ENV_FILE: ((foundation))/env/env.yml
      CERTIFICATE_PEM: ((pcf_domain_cert.certificate))
      KEY_PEM: ((pcf_domain_cert.private_key))

####
groups:

- name: install-pivotal-platform
  jobs:
  - get-opsman-pivnet
  - upgrade-opsman
  - export-installation
  - staged-director-config 
  - install-opsman 
  - get-opsman-image-azure
  - get-platform-automation
  - get-opsman-pivnet
  - get-opsman-image-azure

###



- name: opsman-service-jobs
  jobs:
  - delete-installation
  - update-om-certificates
  - test-interpolate




