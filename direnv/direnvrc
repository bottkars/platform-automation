#!/bin/bash
####################
# Escaping Notice
# within single quotes, single quotes need to be escaped as 
# '"'"'
#####################
# Notes on jmespath ( az-cli)
# within az-cli, jamespath search for types with Dash (-)
# need to be escaped in \"type-with-dash\"
######################

######################
# colors section is mandatory
######################

export reset=`tput sgr0`
export black=`tput setaf 0`
export red=`tput setaf 1`
export green=`tput setaf 2`
export yellow=`tput setaf 3`
export blue=`tput setaf 4`
export magenta=`tput setaf 5`
export cyan=`tput setaf 6`
export white=`tput setaf 7`
######################


export_alias() {
  local name=$1
  shift
  local alias_dir=$PWD/.direnv/aliases
  local target="$alias_dir/$name"
  mkdir -p "$alias_dir"
  PATH_add "$alias_dir"
  echo "#!/usr/bin/env bash" > "$target"
  echo "$@" >> "$target"
  chmod +x "$target"
}

use_bosh-env(){
        echo "${white}Creating  BoSH environment for ${DEPLOYMENT}${reset}"
        eval "$(om bosh-env --ssh-private-key ${DEPLOYMENT}/env/opsman.key)"
}
use_om-env-client(){
        echo "${white}Reading Opsman Settings from lpass${reset}"
        export OM_SKIP_SSL_VALIDATION=true
        export OM_CLIENT_ID=$(lpass show ${CONCOURSE_TARGET}\\${PIPELINE}/OM_CLIENT --username)
        export OM_CLIENT_SECRET=$(lpass show ${CONCOURSE_TARGET}\\${PIPELINE}/OM_CLIENT --password)
        export OM_DECRYPTION_PASSPHRASE=$(lpass show ${CONCOURSE_TARGET}\\${PIPELINE}/OM_CLIENT --password)
        export OM_TARGET=$(lpass show ${CONCOURSE_TARGET}\\${PIPELINE}/OM_CLIENT --url)
        export_alias om-version 'om curl --path /api/v0/info -s | jq -r .info.version'
        echo "${white}Running Opsman ${cyan}${OM_TARGET}${reset} version ${cyan}$(om-version)${reset}"
} 
use_om-env-user(){
        echo "${white}Reading Opsman Settings from lpass${reset}"
        export OM_SKIP_SSL_VALIDATION=true
	export OM_USERNAME=$(lpass show ${CONCOURSE_TARGET}\\${PIPELINE}/OM_CLIENT --username)
        export OM_PASSWORD=$(lpass show ${CONCOURSE_TARGET}\\${PIPELINE}/OM_CLIENT --password)
        export OM_DECRYPTION_PASSPHRASE=$(lpass show ${CONCOURSE_TARGET}\\${PIPELINE}/OM_DECRYPTION_PASSPHRASE --password)
        export OM_TARGET=$(lpass show ${CONCOURSE_TARGET}\\${PIPELINE}/OM_CLIENT --url)
        export_alias om-version 'om curl --path /api/v0/info -s | jq -r .info.version'
        echo "${white}Running Opsman ${cyan}${OM_TARGET}${reset} version ${cyan}$(om-version)${reset}"
}

use_git-token(){
	export GIT_USERNAME=$(lpass show ${CONCOURSE_TARGET}/GIT_TOKEN --username)
        export GIT_TOKEN=$(lpass show ${CONCOURSE_TARGET}/GIT_TOKEN --password)
}
use_jumphost(){
        echo "${white}Reading Jumpost config from lpass${reset}"
        export JUMPHOST_NAME=$(lpass show ${CONCOURSE_TARGET}\\${PIPELINE}/jumphost --field=Hostname)
        export JUMPHOST_PRIVATE_KEY=$(lpass show ${CONCOURSE_TARGET}\\${PIPELINE}/jumphost --field="Private Key" | awk '{gsub(/\\r\\n/,"\n")}1')
        export_alias ssh-jumphost 'eval `ssh-agent`; ssh-add - <<< "$JUMPHOST_PRIVATE_KEY"; ssh $JUMPHOST_NAME;kill $SSH_AGENT_PID'
        echo "${white}connect to Jumhost ${cyan}${JUMPHOST_NAME}${reset} with commands ${cyan}ssh-jumphost${reset}"

}

use_minio-client(){
        # export minio_dir=.minio
        # mkdir -p ${minio_dir}
        # export_alias mc "mc --config-dir ${minio_dir} \$@" 
        echo "Getting minio settings from lpass"
        export AWS_DEFAULT_REGION=region
	export AWS_ACCESS_KEY_ID=$(lpass show ${CONCOURSE_TARGET}\\${PIPELINE}/minio --username)
        export AWS_SECRET_ACCESS_KEY=$(lpass show ${CONCOURSE_TARGET}\\${PIPELINE}/minio --password)
        AWS_ENDPOINT=$(lpass show ${CONCOURSE_TARGET}\\${PIPELINE}/minio --url)
        PROTOCOL=$(echo ${AWS_ENDPOINT} | egrep -o  '(http|https):\/\/')
        DOMAIN=$(echo ${AWS_ENDPOINT#*//})
        DOMAIN=$(echo ${DOMAIN%%\/*} )
        export AWS_ENDPOINT="${PROTOCOL}${DOMAIN}"
        echo "exporting host ${cyan} ${PROTOCOL}${DOMAIN}${reset} as minio target ${cyan}${CONCOURSE_TARGET}${reset}"
        export MC_HOST_${CONCOURSE_TARGET}="${PROTOCOL}${AWS_ACCESS_KEY_ID}:${AWS_SECRET_ACCESS_KEY}@${DOMAIN}"
        export_alias awss3 "aws --endpoint-url ${AWS_ENDPOINT} s3 \$@"
}

use_bosh-aliases(){
        export_alias bosh-releases "bosh deployments --json | jq -r '.Tables[].Rows[].release_s'"
}

use_fly-aliases(){
        echo "checking connection to concourse target ${green}${CONCOURSE_TARGET}${reset}"
	if [[ -z ${TEAM+x} ]]
        then
        export TEAM=main
        fi   
        export_alias flyme "fly -t ${CONCOURSE_TARGET} \$@"     
        if [[ ! $(flyme status) ]]
        then
                echo ${yellow}
                flyme login --team-name ${TEAM} -k 
                echo ${reset}
        fi 
        echo "${magenta}Exporting aliases"

        echo "${cyan}fly -t ${CONCOURSE_TARGET} exported as ${magenta}flyme" 
        export_alias destroytilepipes 'for TILE in $(echo $TILES | sed "s/,/ /g"); do  flyme destroy-pipeline -p ${PIPELINE}_${TILE} \$@;done'
        echo "${cyan}fly -t ${CONCOURSE_TARGET} destroy-pipeline is exported as ${magenta}destroytilepipes" 
        export_alias unpausetilepipes 'for TILE in $(echo $TILES | sed "s/,/ /g"); do  flyme unpause-pipeline -p ${PIPELINE}_${TILE} \$@;done'
        echo "${cyan}fly -t ${CONCOURSE_TARGET} unpause-pipeline is exported as ${magenta}unpausetilepipes" 
        export_alias settilepipes 'for TILE in $(echo $TILES | sed "s/,/ /g"); do  flyme set-pipeline -c $HOME/workspace/platform-automation/pipeline_deploy_${TILE}.yml -l ./vars_${PIPELINE}.yml -p ${PIPELINE}_${TILE} \$@;done'
        echo "${cyan}fly -t ${CONCOURSE_TARGET} set-pipeline is exported as ${magenta}settilepipes" 

        export_alias triggertiledownloads 'for TILE in $(echo $TILES | sed "s/,/ /g"); do flyme jobs -p ${PIPELINE}_${TILE} --json | jq -r '"'"'.[] | select(.name | contains("get") ) | .name '"'"' | xargs -n 1 -I {} flyme trigger-job --job ${PIPELINE}_${TILE}/{} \$@;done'
        export_alias triggerfailedbuilds 'for TILE in $(echo $TILES | sed "s/,/ /g"); do flyme jobs -p ${PIPELINE}_${TILE} --json | jq -r '"'"'.[] | select(.name | contains("upload") ) | select(.finished_build.status | contains("failed") )| .name '"'"' | xargs -n 1 -I {} flyme trigger-job --job ${PIPELINE}_${TILE}/{} \$@;done'
        export_alias pipeline-pause-build 'for TILE in $(echo $TILES | sed "s/,/ /g"); do flyme jobs -p ${PIPELINE}_${TILE} --json | jq -r '"'"'.[] | select(.name | contains("upload") ) | .name '"'"' | xargs -n 1 -I {} flyme pause-job --job ${PIPELINE}_${TILE}/{} \$@;done'
        export_alias pipeline-unpause-build 'for TILE in $(echo $TILES | sed "s/,/ /g"); do flyme jobs -p ${PIPELINE}_${TILE} --json | jq -r '"'"'.[] | select(.name | contains("upload") ) | .name '"'"' | xargs -n 1 -I {} flyme unpause-job --job ${PIPELINE}_${TILE}/{} \$@;done'

        export_alias setbasepipe 'flyme set-pipeline -c $HOME/workspace/platform-automation/pipeline_${BASE}.yml -l ./vars_${PIPELINE}.yml -p ${PIPELINE}'
        export_alias unpausebasepipe 'flyme unpause-pipeline -p ${PIPELINE}'
        export_alias destroybasepipe 'flyme destroy-pipeline -p ${PIPELINE}'
        
        export_alias pipeline-jobs "flyme pipelines --json | jq  -r '.[] | select(.name|test('env.PIPELINE')) | .name' |  xargs -n 1 -I {} flyme jobs --pipeline {} \$@"
        export_alias pipeline-builds "flyme pipelines --json | jq  -r '.[] | select(.name|test('env.PIPELINE')) | .name' |  xargs -n 1 -I {} flyme builds --count=1 --pipeline {} \$@"
        export_alias pipeline-builds-succeeded "pipeline-builds --json --count 1 | jq -r '.[] | select(.status==\"succeeded\")| [.id,.job_name,.pipeline_name,.status] | @tsv' \$@"
        export_alias pipeline-builds-started "pipeline-builds --json --count 1 | jq -r '.[] | select(.status==\"started\")| [.id,.job_name,.pipeline_name,.status] | @tsv' \$@"
        export_alias pipeline-builds-failed "pipeline-builds --json --count 1 | jq -r '.[] | select(.status==\"failed\")| [.id,.job_name,.pipeline_name,.status] | @tsv' \$@"
        export_alias pipeline-builds-started "pipeline-builds --json --count 1 | jq -r '.[] | select(.status==\"started\")| [.id,.job_name,.pipeline_name,.status] | @tsv' \$@"
        export_alias pipeline-builds-pending "pipeline-builds --json --count 1 | jq -r '.[] | select(.status==\"pending\")| [.id,.job_name,.pipeline_name,.status] | @tsv' \$@"

        export_alias expose-pipelines "flyme pipelines --json | jq -r '.[].name' | xargs -n 1 -I {} flyme expose-pipeline --pipeline {}"
	echo ${reset}
}

use_azure-env(){
        #####################        
        # Notes on jmespath ( az-cli)
        # within az-cli, jamespath search for types with Dash (-)
        # need to be escaped in \"type-with-dash\"
        ######################
        export AZURE_CONFIG_DIR=$(pwd)/.azure
        mkdir -p ${AZURE_CONFIG_DIR}
        echo "Reading Azure Settings from lpass"
        export PROFILE="2019-03-01-hybrid"
        export CLOUDPROFILE=$(lpass show ${CONCOURSE_TARGET}\\${PIPELINE}/AZURE_ENV --field=ENDPOINT)
        export AZURE_TENANT_ID=$(lpass show ${CONCOURSE_TARGET}\\${PIPELINE}/AZURE_ENV --field=TENANT_ID)
        export AZURE_CLIENT_ID=$(lpass show ${CONCOURSE_TARGET}\\${PIPELINE}/AZURE_ENV --field=CLIENT_ID)
        export AZURE_CLIENT_SECRET=$(lpass show ${CONCOURSE_TARGET}\\${PIPELINE}/AZURE_ENV --field=CLIENT_SECRET)
        export AZURE_SUBSCRIPTION_ID=$(lpass show ${CONCOURSE_TARGET}\\${PIPELINE}/AZURE_ENV --field=SUBSCRIPTION_ID)
        # export REQUESTS_CA_BUNDLE=/etc/ssl/certs/ca-certificates.crt
        # AZURE_CLI_CA_PATH: "/usr/local/lib/python3.6/site-packages/certifi/cacert.pem"
        # az cli
        ### evaluate active AzureCloud


        az cloud set --name ${CLOUDPROFILE}
        az login --service-principal \
          -u ${AZURE_CLIENT_ID} \
          -p ${AZURE_CLIENT_SECRET} \
          --tenant ${AZURE_TENANT_ID} \
          --output tsv
        az account set --subscription ${AZURE_SUBSCRIPTION_ID}  
        export_alias az-boshvms 'az vm list --query "[?tags.\"user-agent\"=='"'"'bosh'"'"'].{deployment:tags.deployment, BoshName:tags.name, Name:name, RG:resourceGroup,state:provisioningState}" --output table'
        export_alias az-boshvms-id 'az vm list --query "[?tags.\"user-agent\"=='"'"'bosh'"'"'].{deployment:tags.deployment, BoshName:tags.name, vmid:vmId, RG:resourceGroup,state:provisioningState}" --output table'
        export_alias az-boshvms-size 'az vm list --query "[?tags.\"user-agent\"=='"'"'bosh'"'"'].{deployment:tags.deployment, BoshName:tags.name, RG:resourceGroup,Size:hardwareProfile.vmSize,state:provisioningState}" --output table'
        export_alias az-boshfailedvms 'az vm list  --query "[?tags.\"user-agent\"=='"'"'bosh'"'"' && provisioningState=='"'"'Failed'"'"'].{BoshName:tags.name, Name:name, vmid:vmId, deployment:tags.deployment, RG:resourceGroup,Size:hardwareProfile.vmSize,state:provisioningState}" --output table'
        export_alias az-boshavailability-sets 'az vm availability-set list --query "[?tags.\"user-agent\"=='"'"'bosh'"'"'].{Name:name, RG:resourceGroup,FDcount:platformFaultDomainCount, UDcount:platformUpdateDomainCount}" --output table'
}

use_azurestack-env(){
        #####################        
        # Notes on jmespath ( az-cli)
        # within az-cli, jamespath search for types with Dash (-)
        # need to be escaped in \"type-with-dash\"
        ######################
        export AZURE_CONFIG_DIR=$(pwd)/.azure
        mkdir -p ${AZURE_CONFIG_DIR}
        echo "Reading Azurestack Settings from lpass"
        export PROFILE="2019-03-01-hybrid"
        export ENDPOINT=$(lpass show ${CONCOURSE_TARGET}\\${PIPELINE}/AZURESTACK_ENV --field=ENDPOINT)
        # CA_CERT: cert/root.pem
        export ENDPOINT_RESOURCE_MANAGER="https://management.${ENDPOINT}"
        export VAULT_DNS=".vault.${ENDPOINT}"
        export SUFFIX_STORAGE_ENDPOINT="${ENDPOINT}"
        export AZURE_TENANT_ID=$(lpass show ${CONCOURSE_TARGET}\\${PIPELINE}/AZURESTACK_ENV --field=TENANT_ID)
        export AZURE_CLIENT_ID=$(lpass show ${CONCOURSE_TARGET}\\${PIPELINE}/AZURESTACK_ENV --field=CLIENT_ID)
        export AZURE_CLIENT_SECRET=$(lpass show ${CONCOURSE_TARGET}\\${PIPELINE}/AZURESTACK_ENV --field=CLIENT_SECRET)
        export AZURE_SUBSCRIPTION_ID=$(lpass show ${CONCOURSE_TARGET}\\${PIPELINE}/AZURESTACK_ENV --field=SUBSCRIPTION_ID)
        # export REQUESTS_CA_BUNDLE=/etc/ssl/certs/ca-certificates.crt
        # AZURE_CLI_CA_PATH: "/usr/local/lib/python3.6/site-packages/certifi/cacert.pem"
        # az cli
        ### evaluate active AzureCloud
        export CLOUDPROFILE="AzureStackUser"
        CLOUDCHECK=$(az cloud list --query "[?name=='${CLOUDPROFILE}']" --output tsv)
        if [[ ! -z $CLOUDCHECK ]]
        then
          echo "Cloud Profile ${cyan}${CLOUDPROFILE}${reset} already exists, reconfiguring with new settings"
          az cloud update \
            --name ${CLOUDPROFILE} \
            --endpoint-resource-manager "${ENDPOINT_RESOURCE_MANAGER}" \
            --suffix-storage-endpoint "${SUFFIX_STORAGE_ENDPOINT}" \
            --suffix-keyvault-dns "{VAULT_DNS}" \
            --profile ${PROFILE} \
            --endpoint-vm-image-alias-doc https://raw.githubusercontent.com/bottkars/Azurestack-Kickstart/master/admin/tools/imagedoc.json
        else
        echo "Creating Cloud Profile ${cyan}${CLOUDPROFILE}${reset}"
            az cloud register \
            --name ${CLOUDPROFILE} \
            --endpoint-resource-manager "${ENDPOINT_RESOURCE_MANAGER}" \
            --suffix-storage-endpoint "${SUFFIX_STORAGE_ENDPOINT}" \
            --suffix-keyvault-dns "${VAULT_DNS}" \
            --profile ${PROFILE} \
            --endpoint-vm-image-alias-doc https://raw.githubusercontent.com/bottkars/Azurestack-Kickstart/master/admin/tools/imagedoc.json \
            --output tsv
        fi
        az cloud set --name ${CLOUDPROFILE}
        az login --service-principal \
          -u ${AZURE_CLIENT_ID} \
          -p ${AZURE_CLIENT_SECRET} \
          --tenant ${AZURE_TENANT_ID} \
          --output tsv
        az account set --subscription ${AZURE_SUBSCRIPTION_ID}  
        export_alias az-boshvms 'az vm list --query "[?tags.\"user-agent\"=='"'"'bosh'"'"'].{deployment:tags.deployment, BoshName:tags.name, Name:name, RG:resourceGroup,state:provisioningState}" --output table'
        export_alias az-boshvms-id 'az vm list --query "[?tags.\"user-agent\"=='"'"'bosh'"'"'].{deployment:tags.deployment, BoshName:tags.name, vmid:vmId, RG:resourceGroup,state:provisioningState}" --output table'
        export_alias az-boshvms-size 'az vm list --query "[?tags.\"user-agent\"=='"'"'bosh'"'"'].{deployment:tags.deployment, BoshName:tags.name, RG:resourceGroup,Size:hardwareProfile.vmSize,state:provisioningState}" --output table'
        export_alias az-boshfailedvms 'az vm list  --query "[?tags.\"user-agent\"=='"'"'bosh'"'"' && provisioningState=='"'"'Failed'"'"'].{BoshName:tags.name, Name:name, vmid:vmId, deployment:tags.deployment, RG:resourceGroup,Size:hardwareProfile.vmSize,state:provisioningState}" --output table'
        export_alias az-boshavailability-sets 'az vm availability-set list --query "[?tags.\"user-agent\"=='"'"'bosh'"'"'].{Name:name, RG:resourceGroup,FDcount:platformFaultDomainCount, UDcount:platformUpdateDomainCount}" --output table'

}
use_pcf-env(){
        export CF_HOME="$(pwd)"
        echo -n "Retrieving PAS System Domain from Pipeline Config: "
        export PAS_SYSTEM_DOMAIN=$(\
        cat "./${PIPELINE}/vars/srt-vars.yml" | \
        grep -A 0 pcf_system_domain | \
        cut -d ':' -f2 | \
        tr -d ' "')
        echo "${cyan}$PAS_SYSTEM_DOMAIN${reset}"
        echo "Retrieving UAA Admin Credentials from ${cyan}${OM_TARGET}${reset}"        
	export ADMIN_PASSWORD=$(om credentials --product-name cf --credential-reference .uaa.admin_credentials --credential-field password) 
        echo "Performing login to ${cyan}api.${PAS_SYSTEM_DOMAIN}${reset}"
        cf login -a api.${PAS_SYSTEM_DOMAIN} -u admin -p ${ADMIN_PASSWORD} -s system -o system --skip-ssl-validation
}

use_pas4k8s-env(){
        export CF_HOME="$(pwd)"
        echo -n "Retrieving PAS System Domain from Pipeline Config: "
        export PAS_SYSTEM_DOMAIN=$(\
        cat "./${PIPELINE}/vars/pas-for-kubernetes-vars.yml" | \
        grep -A 0 system_domain | \
        cut -d ':' -f2 | \
        tr -d ' "')
        echo "${cyan}$PAS_SYSTEM_DOMAIN${reset}"
        echo "Retrieving CF Admin Credentials from ${cyan}${OM_TARGET}"${reset}        
	export ADMIN_PASSWORD=$(om credentials --product-name pas-for-kubernetes --credential-reference /.properties.cf_admin_password --credential-field secret) 
        echo "Performing login to ${cyan}api.${PAS_SYSTEM_DOMAIN}${reset}"
        cf login -a api.${PAS_SYSTEM_DOMAIN} -u admin -p ${ADMIN_PASSWORD} -o system --skip-ssl-validation
}

use_pks-admin-env(){
        echo "Retrieving PKS API Endpoint from Pipeline Config"
        export PKS_API_ENDPOINT=$(\
        cat "./${PIPELINE}/vars/pivotal-container-service-vars.yml" | \
        grep -A 0 pks_api_hostname | \
        cut -d ':' -f2 | \
        tr -d ' "')
        echo "Retrieving PKS Admin Client Credentials from ${cyan}${OM_TARGET}${reset}"
        export ADMIN_SECRET=$(om credentials --product-name pivotal-container-service --credential-reference .properties.uaa_admin_password --credential-field secret)
        pks login -a ${PKS_API_ENDPOINT} -k -u admin -p ${ADMIN_SECRET}
}
use_vsphere-env(){
        #####################        
        # Notes on jmespath ( az-cli)
        # within az-cli, jamespath search for types with Dash (-)
        # need to be escaped in \"type-with-dash\"
        ######################
        echo "Reading vSphere Settings from lpass"
        export GOVC_INSECURE=1
        export GOVC_URL=$(lpass show ${CONCOURSE_TARGET}\\${PIPELINE}/VCENTER_ENV --field=VCENTER_URL)
        export GOVC_USERNAME=$(lpass show ${CONCOURSE_TARGET}\\${PIPELINE}/VCENTER_ENV --field=VCENTER_USERNAME)
        export GOVC_PASSWORD=$(lpass show ${CONCOURSE_TARGET}\\${PIPELINE}/VCENTER_ENV --field=VCENTER_PASSWORD)
        echo "testing connection to ${cyan}${GOVC_URL}${reset}"
        govc about
        # export GOVC_SUBSCRIPTION_ID=$(lpass show ${CONCOURSE_TARGET}\\${PIPELINE}/VCENTER_ENV --field=SUBSCRIPTION_ID)
        export_alias vc-boshvms 'govc ls -json '${VM_FOLDER}' | jq -r '"'"'[
                "VM-Name                            ",
                "Guest-Hostname                     ",
                "Guest-IP  ",
                "PowerState",
                "CPU",
                "Memory"],
                (.elements[].Object | [.Name, .Guest.HostName, .Guest.IpAddress, .Runtime.PowerState, .Config.Hardware.NumCPU,. .Config.Hardware.MemoryMB]) | @tsv '"'"''
}

use_hammer(){
export HAMMER_TARGET_CONFIG=.direnv/hammer.yml
cat <<EOF > ${HAMMER_TARGET_CONFIG}
name: ${DEPLOYMENT}
ops_manager:
  password: ${OM_USERNAME}
  url: ${OM_TARGET}
  username: ${OM_PASSWORD}
ops_manager_private_key: OPSMAN-RSA-PRIVATE-KEY
ops_manager_public_ip: 172.16.100.8
pks_api:
  url: ${PKS_API_ENDPOINT}
sys_domain: ${PAS_SYSTEM_DOMAIN}
EOF
}
use_wsl_docker(){
	echo -n "Checking if we run on WSL: "
        if [[ $(grep Microsoft /proc/version 2>/dev/null) ]]
	then
        echo "exporting DOCKER_HOST=tcp://localhost:2375"
        export DOCKER_HOST=tcp://localhost:2375
	else
		echo "${green}not running WSL, no need to export Docker Host${reset}"
	fi	
	}        
use_wsl_dns_fix(){
	echo -n "Checking if we run on WSL: "
        if [[ $(grep Microsoft /proc/version 2>/dev/null) ]]
	then
		echo "${green}true${reset}"	
		export_alias fix-dns '/mnt/c/Program\ Files/PowerShell/6/pwsh.exe  -Command "Get-NetAdapter | where status -eq up | Get-DnsClientServerAddress -Family IPv4 |Sort-Object -Property InterfaceIndex -Descending | Select-Object ServerAddresses -ExpandProperty ServerAddresses" | while read line; do echo "nameserver ${line}";done | sudo tee /etc/resolv.conf > /dev/null'
		echo "${magenta}adjusting DNS Order with fix-dns${reset}"
                export WSL=true
		fix-dns

	else
		echo "${green}not running WSL, no DNS Order Fix required${reset}"
	fi	
	}
use_check_vpn(){
	while  ! ping -c 1 -W 1 10.70.0.10 &>/dev/null
       	do
		echo "${red}VPN is down, Please connect first${reset}"
		sleep 10
	done	
}

use_check_vpn1(){
        target=$1
        echo "Testing connection to ${magenta}$target${reset}"
        while  ! ping -c 1 -W 1 $target &>/dev/null
        do
                echo "${red}VPN is down, Please connect first${reset}"
                sleep 10
        done
        echo "Successfully connected to ${green}${target}${reset}"
}

use_kubeapps_secret(){
        export_alias kubeapps-secret 'printf "Name: KUBEAPPS\nURL: http://localhost:8080\nPassword: %s" "$(kubectl get secret $(kubectl get serviceaccount kubeapps-operator -o jsonpath='"'"'{.secrets[].name}'"'"') -o jsonpath='"'"'{.data.token}'"'"' -o go-template='"'"'{{.data.token | base64decode}}'"'"' && echo)" | lpass edit --sync=auto KUBEAPPS --non-interactive'
}
use_control_credhub(){

export CREDHUB_CONTROL_SERVER=$(grep "external_url:" plane/vars/bosh-vars.yml | cut -d ':' -f3 | tr -d ' "//'):8844
export CREDHUB_CONTROL_SECRET=$(credhub get --name="/p-bosh/control-plane/credhub_admin_client_password" -j | jq -r '.value')
export CREDHUB_CONTROL_CLIENT=credhub_admin_client
export CREDHUB_CONTROL_CA_CERT=$(credhub get -n /p-bosh/control-plane/control-plane-tls -k certificate)
export_alias connect-control-credhub '
credhub login --server="${CREDHUB_CONTROL_SERVER}" --client-name="${CREDHUB_CONTROL_CLIENT}" --client-secret="${CREDHUB_CONTROL_SECRET}" --ca-cert="${CREDHUB_CONTROL_CA_CERT}"
credhub api --server="${CREDHUB_CONTROL_SERVER}"  --ca-cert="${CREDHUB_CONTROL_CA_CERT}"
'
unset CREDHUB_CLIENT
unset CREDHUB_CA_CERT
unset CREDHUB_PROXY
unset CREDHUB_SERVER
unset CREDHUB_SECRET
}


export_alias update-direnv ' wget -O ~/.direnvrc https://raw.githubusercontent.com/bottkars/platform-automation/master/direnv/direnvrc'
