---
s3_env: &s3_env
  access_key_id: ((((foundation))/s3_access_key_id))
  endpoint:  ((((foundation))/s3_endpoint))
  region_name: ((((foundation))/s3_region_name))
  secret_access_key: ((((foundation))/s3_secret_access_key))



credhub_env: &credhub_env
  CREDHUB_CLIENT: ((credhub-client))
  CREDHUB_SECRET: ((credhub-secret))
  CREDHUB_SERVER: ((credhub-server))
  PREFIX: /concourse/main/((foundation))
  CREDHUB_CA_CERT: ((credhub-ca-cert.certificate))

stage_steps: &stage_steps
  steps:
    - get: platform-automation-image
      tags: ((tags))
      params:
        unpack: true
    - get: platform-automation-tasks
      tags: ((tags))
      params:
        unpack: true
    - get: templates
      tags: ((tags))
    - get: variable
      tags: ((tags))

stage_config: &stage_config
  image: platform-automation-image
  file: platform-automation-tasks/tasks/staged-config.yml
  input_mapping:
    env: variable

do_stage_commit: &do_stage_commit
  image: platform-automation-image
  file: platform-automation-tasks/tasks/make-git-commit.yml
  input_mapping:
    repository: variable
    file-source: generated-config
  output_mapping:
    repository-commit: variable-commit

true_trigger: &true_trigger
  trigger: true

  
git_commit_env: &git_commit_env
  GIT_AUTHOR_EMAIL: "pcf-pipeline-bot@ebottnet.de"
  GIT_AUTHOR_NAME: "Platform Automation Bot"
  COMMIT_MESSAGE: 'Staged  Config Writer'

slack_start_param: &slack_start_param
  channel: ((slack.channel))
  text: |
    ((foundation)) Job $BUILD_JOB_NAME started with ID $BUILD_ID for 
    build $BUILD_NAME for team $BUILD_TEAM_NAME at
    $ATC_EXTERNAL_URL using pipeline  $BUILD_PIPELINE_NAME
    see $ATC_EXTERNAL_URL/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME
    for details
  icon_emoji: ":concourse-started:"

slack_succeeded_param: &slack_succeeded_param
  channel: ((slack.channel))
  text: |
    ((foundation)) Job $BUILD_JOB_NAME succeeded with ID $BUILD_ID for 
    build $BUILD_NAME for team $BUILD_TEAM_NAME at
    $ATC_EXTERNAL_URL using pipeline  $BUILD_PIPELINE_NAME    
    see $ATC_EXTERNAL_URL/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME
    for details
  icon_emoji: ":concourse-succeeded:"

slack_failed_param: &slack_failed_param
  channel: ((slack.channel))
  text: |
    ((foundation)) Job $BUILD_JOB_NAME failed with ID $BUILD_ID for 
    build $BUILD_NAME for team $BUILD_TEAM_NAME at
    $ATC_EXTERNAL_URL using pipeline  $BUILD_PIPELINE_NAME
    see $ATC_EXTERNAL_URL/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME
    for details
  icon_emoji: ":concourse-failed:"


resource_types:
- name: pivnet
  tags: ((tags))
  type: docker-image
  source:
    repository: pivotalcf/pivnet-resource
    tag: latest-final

resources:
- name: additional-tasks
  icon: amazon-drive
  type: s3
  source:
    <<: *s3_env
    bucket: ((((foundation))/buckets_pivnet_tasks))
    regexp: additional-tasks-(.*).zip

- name: installation
  tags: ((tags))
  icon: amazon-drive
  type: s3
  source:
    <<: *s3_env
    bucket: ((buckets_installation))
    regexp: ((foundation))/installation-(.*).zip    

- name: platform-automation-pivnet
  tags: ((tags))
  icon: cloudfoundry
  type: pivnet
  source:
    api_token: ((((foundation))/pivnet-token))
    product_slug: platform-automation
    product_version: 4\.(.*)
    sort_by: semver

- name: platform-automation-tasks
  tags: ((tags))
  icon: amazon-drive
  type: s3
  source:
    <<: *s3_env
    bucket: ((((foundation))/buckets_pivnet_tasks))
    regexp: platform-automation-tasks-(.*).zip

- name: platform-automation-image
  tags: ((tags))
  icon: amazon-drive
  type: s3
  source:
    <<: *s3_env
    bucket: ((((foundation))/buckets_pivnet_image))
    regexp: platform-automation-image-(.*).tgz

- name: templates
  tags: ((tags))
  icon: github-circle
  type: git
  check_every: 10m  
  source: 
    uri: ((template-repo))
    private_key: ((((foundation))/template-deploy-key.private_key))
    branch: master

#- name: opsman-product
#  type: s3
##  source:
#    <<: *s3_env
#    bucket: ((((foundation))/buckets_pivnet_products))
#    regexp: \[ops-manager,(.*)\].*.ova
- name: variable
  tags: ((tags))
  icon: github-circle
  type: git
  check_every: 10m  
  source: 
    uri: ((variable-repo))
    private_key: ((((foundation))/variable-deploy-key.private_key))
    branch: master

- name: pipeline-lock
  icon: cloud-lock-outline
  type: pool
  check_every: 10m
  source:
    uri: ((variable-repo))
    branch: master
    pool: pas
    private_key: ((((foundation))/variable-deploy-key.private_key))
    retry_delay: 300s

- name: download-lock
  icon: cloud-lock-outline
  type: pool
  check_every: 10m
  source:
    uri: ((variable-repo))
    branch: master
    pool: download-lock
    private_key: ((((foundation))/variable-deploy-key.private_key))
    retry_delay: 300s


interpolate-product-downloads: &interpolate-product-downloads
  image: platform-automation-image
  file: platform-automation-tasks/tasks/credhub-interpolate.yml
  params:
    <<: *credhub_env
    INTERPOLATION_PATHS: "download-product-configs/((pas_version))"
  input_mapping:
    files: templates
  output_mapping:
    interpolated-files: interpolated-product-downloads

interpolate-product-templates: &interpolate-product-templates
  image: platform-automation-image
  file: platform-automation-tasks/tasks/credhub-interpolate.yml
  params:
    <<: *credhub_env
    INTERPOLATION_PATHS: product-configs/((pas_version))
    SKIP_MISSING: true
  input_mapping:
    files: templates
  output_mapping:
    interpolated-files: interpolated-product-templates

jobs:
# - name: test-govccli 


# - name: run-govc-get-vms


- name: clear-pipeline-lock
  plan:
  - get: pipeline-lock
    tags: ((tags)) 
  - put: pipeline-lock
    tags: ((tags))
    params: {release: pipeline-lock}      

- name: clear-download-lock
  plan:
  - get: download-lock
    tags: ((tags)) 
  - put: download-lock
    tags: ((tags))
    params: {release: download-lock}       
- name: manual-export-installation
  serial: true
  plan:
  - in_parallel:
      - get: platform-automation-image
        tags: ((tags))      
        params:
          unpack: true
      - get: platform-automation-tasks
        tags: ((tags))      
        params:
          unpack: true
      - get: templates
        tags: ((tags))      
      - get: variable
        tags: ((tags))      
  - task: export-installation
    tags: ((tags))      
    image: platform-automation-image
    file: platform-automation-tasks/tasks/export-installation.yml
    input_mapping:
      env: variable
    params:
      ENV_FILE: ((foundation))/env/env.yml
      INSTALLATION_FILE: installation-$timestamp.zip
  - put: installation
    tags: ((tags))      
    params:
      file: installation/installation*.zip
##
- name: set-opsman-banner
  serial: true
  plan:
  - in_parallel:
      - get: additional-tasks
        tags: ((tags))      
        params:
          unpack: true 
      - get: platform-automation-image
        tags: ((tags))      
        params:
          unpack: true
#      - get: platform-automation-tasks
#        tags: ((tags))      
#        params:
#          unpack: true    
      - get: variable
        tags: ((tags))      
  - task: set-banner
    tags: ((tags))      
    image: platform-automation-image
    file: additional-tasks/tasks/set-director-banner.yml
    input_mapping:
      env: variable
    params:
      ENV_FILE: ((foundation))/env/env.yml
      SSH_BANNER: ((director.ssh_banner))
      UI_BANNER: ((director.ui_banner))
##

- name: delete-installation
  serial: true
  plan:
  - in_parallel:
    - get: platform-automation-image
      params:
        unpack: true
    - get: platform-automation-tasks
      params:
        unpack: true
    - get: variable
  - task: delete-installation
    image: platform-automation-image
    file: platform-automation-tasks/tasks/delete-installation.yml
    input_mapping:
      env: variable
    params:
    # VARS_FILES: vars/((foundation))/vars/opsman-vars.yml
     ENV_FILE: ((foundation))/env/env.yml

- name: update-om-certificates
  serial: true
  serial_groups: [ install ]
  plan:
  - in_parallel:
    - get: platform-automation-image
      tags: ((tags))
      params:
        unpack: true
    - get: additional-tasks
      tags: ((tags))
      params:
        unpack: true    
    - get: templates
      tags: ((tags))
    - get: variable
      tags: ((tags))
  - task: update om certficates
    tags: ((tags))
    image: platform-automation-image
    file: additional-tasks/tasks/update-ssl-certificate.yml
    input_mapping:
      env: variable
    params:
      ENV_FILE: ((foundation))/env/env.yml
      CERTIFICATE_PEM: ((pcf_domain_cert.certificate))
      KEY_PEM: ((pcf_domain_cert.private_key))

####
- name: get-platform-automation
  plan: 
  - in_parallel:
    - get: platform-automation-pivnet
      tags: ((tags))
      trigger: true
  - in_parallel:
    - put: platform-automation-tasks
      tags: ((tags))
      params:
        file: platform-automation-pivnet/*tasks*.zip
    - put: platform-automation-image
      tags: ((tags))
      params:
        file: platform-automation-pivnet/*image*.tgz
- name: test-interpolate
  plan:
  - get: variable
    tags: ((tags))
  - get: templates
    tags: ((tags))
  - get: platform-automation-image
    tags: ((tags))
    params:
      unpack: true
  - get: platform-automation-tasks
    tags: ((tags))
    params:
      unpack: true
  - task: interpolate
    tags: ((tags))
    image: platform-automation-image
    file: platform-automation-tasks/tasks/test-interpolate.yml
    input_mapping:
      config: templates
      vars: variable
    params:
      CONFIG_FILE: product-configs/((pas_version))/p-event-alerts.yml
      VARS_FILES: vars/((foundation))/vars/p-event-alerts-vars.yml
      SKIP_MISSING: true    
#      VARS_FILES: vars/((foundation))/vars/pas_certs-vars.yml
      ENV_FILE: ((foundation))/env/env.yml

####
groups:




- name: service-jobs
  jobs:
  - clear-pipeline-lock
  - clear-download-lock
  - manual-export-installation
  - delete-installation
  - update-om-certificates
  - get-platform-automation
  - set-opsman-banner
  - test-interpolate



