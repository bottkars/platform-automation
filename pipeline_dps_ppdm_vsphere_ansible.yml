s3_env: &s3_env
  access_key_id: ((((foundation))/s3_access_key_id))
  endpoint:  ((((foundation))/s3_endpoint))
  region_name: ((((foundation))/s3_region_name))
  secret_access_key: ((((foundation))/s3_secret_access_key))


credhub_env: &credhub_env
  CREDHUB_CLIENT: ((((foundation))/credhub-client))
  CREDHUB_SECRET: ((((foundation))/credhub-secret))
  CREDHUB_SERVER: ((credhub-server))
  PREFIX: /concourse/main/((foundation))
  CREDHUB_CA_CERT: ((((foundation))/credhub-ca-cert.certificate))



#resource_types:
#- name: pivnet
#  type: docker-image
#  source:
#    repository: pivotalcf/pivnet-resource
#    tag: latest-final
   

resources:
- name: daily-trigger
  icon: calendar-clock
  type: time
  source:
    interval: 24h

- name: dps-ppdm
  tags: ((tags))
  icon: git
  type: git
  check_every: 10m  
  source:  
    uri: git@github.com:bottkars/ansible_ppdm.git
    branch: main
    private_key: ((((foundation))/ansible_ppdm_git.private_key))

- name: variable
  tags: ((tags))
  icon: github
  type: git  
  source:
    uri: ((variable-repo))
    private_key: ((private_key)) 
    branch: master
    paths:
    - proxy.yml

#- name: instant_access
#  icon: github
#  type: git  
#  source:
#    uri: ((variable-repo))
#    private_key: ((private_key)) 
#    branch: master
#    paths:
#    - instant_access.yml

- name: instant-access-request
  tags: ((tags))
  type: s3
  icon: folder-move
  source:
    <<: *s3_env
    bucket: ppdm.restore
    regexp: request/ppdm-instant-(?P<version>([0-9]{4})\.(0[1-9]|1[0-2])\.(0[1-9]|[1-2][0-9]|3[0-1])-([0-9][0-9][0-9])).yml
  check_every: 5m  

- name: restore-request
  tags: ((tags))
  type: s3
  icon: folder-move
  source:
    <<: *s3_env
    bucket: ppdm.restore
    regexp: request/ppdm-restore-(?P<version>([0-9]{4})\.(0[1-9]|1[0-2])\.(0[1-9]|[1-2][0-9]|3[0-1])-([0-9][0-9][0-9])).yml
  check_every: 1m  

- name: instant-access-state
  tags: ((tags))
  type: s3
  icon: folder-move
  source:
    <<: *s3_env
    bucket: ppdm.restore
    regexp: state/(.*)-(?P<version>([0-9]{4})(0[1-9]|1[0-2])(0[1-9]|[1-2][0-9]|3[0-1])\.(2[0-3]|[01][0-9])([0-5][0-9])\.([0-5][0-9])).json


- name: one-time-trigger
  tags: ((tags))
  icon: calendar-clock
  type: time
  source:
    interval: 999999h
#- name: after-midnight
#  type: time
#  source:
#    start: 01:00 AM
#    stop: ((after_midnight_end))
#    interval: 24h
#    location: Europe/Berlin 


- name: pfsense-modules
  tags: ((tags))  
  icon: github
  type: git  
  source:
    uri: git@github.com:bottkars/pfsense-modules.git
    private_key: ((((foundation))/template-deploy-key.private_key))
    branch: main 
- name: platform-automation-image
  icon: cloud-download
  type: s3
  source:
    <<: *s3_env
    bucket: ((buckets.pivnet_image))
    regexp: platform-automation-image-(.*).tgz

- name: dps-automation-image
  tags: ((tags))
  icon: docker
  type: docker-image
  source:
    repository: harbor.pks.home.labbuildr.com/bottkars/dps-automation-image-alpine
    tag: latest
    ca_certs:
    - domain: harbor.pks.home.labbuildr.com
      cert: ((pksdemo/pks_cert.ca))

- name: dps-automation-image-testing
  tags: ((tags))
  icon: docker
  type: docker-image
  source:
    repository: harbor.pks.home.labbuildr.com/bottkars/dps-automation-image-alpine-testing
    tag: latest
    ca_certs:
    - domain: harbor.pks.home.labbuildr.com
      cert: ((pksdemo/pks_cert.ca))
  
- name: dps-modules
  tags: ((tags))
  icon: git
  type: git
  check_every: 10m  
  source:  
    uri: https://github.com/bottkars/dps-modules.git
    branch: main
    private_key: ((git_read.private_key))

## product resources
- name: powerprotect
  tags: ((tags))
  type: s3
  icon: folder-move
  source:
    <<: *s3_env
    bucket: ((buckets.dps_products))
    regexp: powerprotect/((PPDM.VERSION))/dellemc-ppdm-sw-((PPDM.VERSION_REGEX)).ova

- name: certstate
  tags: ((tags))  
  icon: cloud-download
  type: s3
  source:
    <<: *s3_env
    bucket: certificates
    regexp: ((PPDM.FQDN))-(.*).pem


- name: powerprotect-upgrade
  tags: ((tags))
  type: s3
  icon: folder-move
  source:
    <<: *s3_env
    bucket: ((buckets.dps_products))
    regexp: powerprotect/((PPDM.VERSION))/dellemc-ppdm-upgrade-sw-((PPDM.VERSION_REGEX)).pkg 



display:
  background_image: https://corporate.delltechnologies.com/content/dam/delltechnologies/assets/corporate/images/newsroom/promos/powerprotect-x400.png
  #  https://www.emc.com/content/dam/uwaem/production-design-assets/en/data-protection/dataprotectionsuite/images/leadspace-data-protection-family-large.jpg
jobs:

- name: deploy-powerprotect-ova
  plan:
  - in_parallel:
    - get: one-time-trigger
      trigger: true
    - get: powerprotect
      tags: ((tags))
      params:
        unpack: false
    - get: dps-automation-image
      tags: ((tags))        
    - get: dps-modules
      tags: ((tags))
  - task: deploy-ova
    tags: ((tags))
    image: dps-automation-image
    file: dps-modules/ci/tasks/deploy-ppdm.yml
    input_mapping:
      dps-modules: dps-modules
      powerprotect: powerprotect
    params:
      DEBUG: "FALSE"
      GOVC_INSECURE: ((GOVC.INSECURE))
      GOVC_PASSWORD: ((GOVC.PASSWORD))
      GOVC_URL: ((GOVC.URL))
      GOVC_USERNAME: ((GOVC.USERNAME))
      GOVC_RESOURCE_POOL: ((GOVC.RESOURCE_POOL))
      GOVC_VM_IPATH: ((GOVC.DATACENTER))/vm/((PPDM.FOLDER))/((PPDM.VMNAME))
      GOVC_DATASTORE: ((GOVC.DATASTORE)) 
      GOVC_DATACENTER: ((GOVC.DATACENTER)) 
      GOVC_NETWORK: ((GOVC.NETWORK))
      PPDM_NETWORK: ((PPDM.NETWORK))
      PPDM_ADDRESS: ((PPDM.ADDRESS))
      PPDM_GATEWAY: ((PPDM.GATEWAY))
      PPDM_NETMASK: ((PPDM.NETMASK))
      PPDM_FQDN: ((PPDM.FQDN))
      PPDM_VMNAME: ((PPDM.VMNAME))
      PPDM_DNS: ((PPDM.DNS))
      PPDM_FOLDER: ((PPDM.FOLDER))

- name: upload-powerprotect-update
  serial_groups: [ansible, upgrade]
  plan:
  - in_parallel:
    - get: one-time-trigger
      trigger: false
      passed: 
        - ansible-configure-ppdm
        - ansible-set-ddve-inventory
        - ansible-set-ppdm-certificates
        - ansible-set-vsphere-inventory
        - ansible-set-ppdm-license      
    - get: powerprotect-upgrade
      trigger: true
      tags: ((tags))
      params:
        unpack: false
    - get: dps-automation-image
      tags: ((tags))        
    - get: dps-modules
      tags: ((tags))
  - task: upload-ppdmsw-upgrade
    tags: ((tags))
    image: dps-automation-image
    file: dps-modules/ci/tasks/upload-ppdm-upgrade.yml
    input_mapping:
      dps-modules: dps-modules
      powerprotect-upgrade: powerprotect-upgrade
    params:
      DEBUG: "FALSE"
      PPDM_FQDN: ((PPDM.FQDN))
      PPDM_PASSWORD: ((PPDM.PASSWORD))

##########
# the ansible code for above. blocked due to limitations in httplib uloading large files
#  plan:
#  - in_parallel:
#    - get: one-time-trigger
#      trigger: false
#      passed: [ ansible-configure-ppdm ]
#    - get: powerprotect-upgrade
#      trigger: false
#      tags: ((tags))
#      params:
#        unpack: false
#    - get: dps-automation-image
#      tags: ((tags))        
#    - get: dps-modules
#      tags: ((tags))
#    - get: dps-ppdm   
#      tags: ((tags))
#  - task: ansible-ppdmsw-upgrade
#    tags: ((tags))
#    image: dps-automation-image
#    tags: ((tags))
#    file: dps-modules/ci/tasks/ansible-playbook.yml
#    input_mapping:
#      dps-modules: dps-modules
#      dps-ansible: dps-ppdm
#      files: powerprotect-upgrade
#    params:
#      PLAYBOOK: dps-ansible/9.9-playbook_upload_update_ppdm.yml 
#      DEBUG: "FALSE"
#      PPDM_INITIAL_PASSWORD: ((PPDM.PASSWORD)) 
#      PPDM_FQDN: ((PPDM.FQDN))   


- name: precheck-powerprotect-update
  serial_groups: [ansible, upgrade]
  plan:
  - in_parallel:
    - get: one-time-trigger
      trigger: false
      passed: [ ansible-configure-ppdm ]
    - get: powerprotect-upgrade
      passed: [ upload-powerprotect-update ]    
      trigger: true
      tags: ((tags))
      params:
        unpack: false
        skip_download: "true"
    - get: dps-automation-image
      tags: ((tags))        
    - get: dps-modules
      tags: ((tags))
    - get: dps-ppdm    
      tags: ((tags))      
  - task: ansible-check-sw-update
    image: dps-automation-image
    tags: ((tags))
    file: dps-modules/ci/tasks/ansible-playbook.yml
    input_mapping:
      dps-modules: dps-modules
      dps-ansible: dps-ppdm
    params:
      PLAYBOOK: dps-ansible/9.9-playbook_precheck_update_ppdm.yml
      DEBUG: "FALSE"
      PPDM_INITIAL_PASSWORD: ((PPDM.PASSWORD)) 
      PPDM_FQDN: ((PPDM.FQDN)) 

- name: execute-powerprotect-update
  serial_groups: [ansible, upgrade]
  plan:
  - in_parallel:
    - get: one-time-trigger
      trigger: false
    - get: powerprotect-upgrade
      passed: [ precheck-powerprotect-update ]    
      trigger: true
      tags: ((tags))
      params:
        unpack: false
        skip_download: "true"
    - get: dps-automation-image
      tags: ((tags))        
    - get: dps-modules
      tags: ((tags))
    - get: dps-ppdm   
      tags: ((tags))       
  - task: ansible-execute-sw-update
    tags: ((tags))
    image: dps-automation-image
    file: dps-modules/ci/tasks/ansible-playbook.yml
    input_mapping:
      dps-modules: dps-modules
      dps-ansible: dps-ppdm
    params:
      PLAYBOOK: dps-ansible/9.9-playbook_install_update_ppdm.yml
      DEBUG: "FALSE"
      PPDM_INITIAL_PASSWORD: ((PPDM.PASSWORD)) 
      PPDM_FQDN: ((PPDM.FQDN)) 

- name: ansible-configure-ppdm
  serial_groups: [ansible]
  plan:
  - in_parallel:
    - get: one-time-trigger
      trigger: true
      passed: [ deploy-powerprotect-ova ]  
    - get: dps-automation-image
      tags: ((tags))
    - get: dps-modules
      tags: ((tags))
    - get: dps-ppdm   
      tags: ((tags))
  - task: configure-ppdm
    tags: ((tags))
    image: dps-automation-image
    file: dps-modules/ci/tasks/ansible-playbook.yml
    input_mapping:
      dps-modules: dps-modules
      ppdm-config: terraform-output
      dps-ansible: dps-ppdm
    params:
      PLAYBOOK: dps-ansible/1.0-playbook_configure_ppdm.yml 
      DEBUG: "FALSE"
      PPDM_INITIAL_PASSWORD: ((PPDM.PASSWORD)) 
      PPDM_NTP_SERVERS: ((PPDM.NTP_SERVERS))
      PPDM_FQDN: ((PPDM.FQDN))
      PPDM_VMNAME: ((PPDM.VMNAME))
      PPDM_DNS: ((PPDM.DNS))
      PPDM_PASSWORD: ((PPDM.PASSWORD))
      PPDM_SETUP_PASSWORD: ((PPDM.SETUP_PASSWORD)) 
      PPDM_FOLDER: ((PPDM.FOLDER))

- name: ansible-set-ddve-inventory
  serial_groups: [ansible]
  plan:
  - in_parallel:
    - get: dps-automation-image
      tags: ((tags))
    - get: one-time-trigger
      tags: ((tags))   
      passed: [ ansible-configure-ppdm ]
      trigger: true      
    - get: dps-modules
      tags: ((tags))
    - get: dps-ppdm   
      tags: ((tags))
  - task: set-ddve-inventory
    attempts: 10
    timeout: 10m   
    image: dps-automation-image
    tags: ((tags))
    file: dps-modules/ci/tasks/ansible-playbook.yml
    input_mapping:
      dps-modules: dps-modules
      dps-ansible: dps-ppdm
    params:
      PLAYBOOK: dps-ansible/2.0-playbook_set_ddve.yml
      DEBUG: "FALSE"
      PPDM_INITIAL_PASSWORD: ((PPDM.PASSWORD)) 
      PPDM_FQDN: ((PPDM.FQDN))
      DDVE_USERNAME: ((PPDD.USERNAME))
      DDVE_PASSWORD: ((PPDD.PASSWORD))
      DDVE_PRIVATE_FQDN: ((PPDD.FQDN))
      PPDD_PATH: ((PPDD.PATH.PATH_1))

- name: ansible-set-ppdm-sdr-for-new-config
  serial_groups: [ansible]
  plan:
  - in_parallel:
    - get: dps-automation-image
      tags: ((tags))
    - get: one-time-trigger
      passed: [ ansible-set-ddve-inventory ]
      trigger: true
      tags: ((tags))
    - get: dps-modules
      tags: ((tags))
    - get: dps-ppdm   
      tags: ((tags))
  - task: set-ppdm-sdr-configuration
    image: dps-automation-image
    tags: ((tags))
    file: dps-modules/ci/tasks/ansible-playbook.yml
    input_mapping:
      dps-modules: dps-modules
      dps-ansible: dps-ppdm
    params:
      PLAYBOOK: dps-ansible/3.0-playbook_set_sdr.yml
      DEBUG: "FALSE"
      PPDM_FQDN: ((PPDM.FQDN))      
      PPDM_INITIAL_PASSWORD: ((PPDM.PASSWORD)) 
      PPDM_PASSWORD: ((PPDM.PASSWORD))
      PPDD_PATH: ((PPDD.PATH.PATH_1))
      DDVE_PRIVATE_FQDN: ((PPDD.FQDN))
      PPDM_SDR_PATH: ((PPDM.SDR_PATH))

- name: ansible-set-ppdm-sdr-for-existing-boost
  serial_groups: [ansible]
  plan:
  - in_parallel:
    - get: dps-automation-image
      tags: ((tags))
    - get: one-time-trigger
      passed: [ ansible-set-ddve-inventory ]
      trigger: false
      tags: ((tags))
    - get: dps-modules
      tags: ((tags))
    - get: dps-ppdm   
      tags: ((tags))
  - task: set-ppdm-sdr-configuration
    image: dps-automation-image
    tags: ((tags))
    file: dps-modules/ci/tasks/ansible-playbook.yml
    input_mapping:
      dps-modules: dps-modules
      dps-ansible: dps-ppdm
    params:
      PLAYBOOK: dps-ansible/3.0-playbook_set_sdr_existing_unit.yml
      DEBUG: "FALSE"
      PPDM_FQDN: ((PPDM.FQDN))      
      PPDM_INITIAL_PASSWORD: ((PPDM.PASSWORD)) 
      PPDM_PASSWORD: ((PPDM.PASSWORD))
      PPDD_PATH: ((PPDD.PATH.PATH_1))
      DDVE_PRIVATE_FQDN: ((PPDD.FQDN))
      PPDM_SDR_PATH: ((PPDM.SDR_PATH))

- name: ansible-enable-cdr
  serial_groups: [ansible]
  plan:
  - in_parallel:
    - get: dps-automation-image
      tags: ((tags))
    - get: one-time-trigger
      passed: [ ansible-set-vsphere-inventory ]
      trigger: false
      tags: ((tags))
    - get: dps-modules
      tags: ((tags))
    - get: dps-ppdm   
      tags: ((tags))
  - task: set-cdra-enabled
    image: dps-automation-image
    tags: ((tags))
    file: dps-modules/ci/tasks/ansible-playbook.yml
    input_mapping:
      dps-modules: dps-modules
      dps-ansible: dps-ppdm
    params:
      PLAYBOOK: dps-ansible/2.2-playbook_set_cdra_enabled.yml
      DEBUG: "FALSE"
      PPDM_FQDN: ((PPDM.FQDN))
      PPDM_INITIAL_PASSWORD: ((PPDM.PASSWORD))

- name: ansible-set-ppdm-certificates
  serial_groups: [ansible]
  plan:
  - in_parallel:
    - get: dps-automation-image
      tags: ((tags))
    - get: one-time-trigger
      passed: [ ansible-configure-ppdm ]
      trigger: true
      tags: ((tags))
    - get: dps-modules
      tags: ((tags))
    - get: dps-ppdm   
      tags: ((tags))
    - get: certstate    
      tags: ((tags))
      trigger: true   
  - task: set-certificates
    image: dps-automation-image
    tags: ((tags))
    file: dps-modules/ci/tasks/ansible-playbook.yml
    input_mapping:
      dps-modules: dps-modules
      dps-ansible: dps-ppdm
    params:
      PLAYBOOK: dps-ansible/9.0-playbook_replace_certs.yml
      DEBUG: "FALSE"
      PPDM_FQDN: ((PPDM.FQDN))
      PPDM_INITIAL_PASSWORD: ((PPDM.PASSWORD))
      PPDM_PRIVATE_KEY: ((PPDM.PRIVATE_KEY))
      PPDM_CERTIFICATE_CHAIN: ((PPDM.CERTIFICATE_CHAIN))

- name: ansible-configure-clouddr-account
  serial_groups: [ansible]
  plan:
  - in_parallel:
    - get: dps-automation-image
      tags: ((tags))
    - get: one-time-trigger
      passed: [ ansible-enable-cdr ]
      trigger: true
      tags: ((tags))
    - get: dps-modules
      tags: ((tags))
    - get: dps-ppdm   
      tags: ((tags))
  - task: set-cdr-account
    image: dps-automation-image
    tags: ((tags))
    file: dps-modules/ci/tasks/ansible-playbook.yml
    input_mapping:
      dps-modules: dps-modules
      dps-ansible: dps-ppdm
    params:
      PLAYBOOK: dps-ansible/2.3-playbook_configure_cloud_dr_account.yml
      DEBUG: "FALSE"
      PPDM_FQDN: ((PPDM.FQDN))
      PPDM_INITIAL_PASSWORD: ((PPDM.PASSWORD))
      AZURE_TENANT_ID: ((PPDM.CDR.AZURE_TENANT_ID))
      AZURE_CLIENT_ID: ((PPDM.CDR.AZURE_CLIENT_ID))
      AZURE_CLIENT_SECRET: ((PPDM.CDR.AZURE_CLIENT_SECRET))
      AZURE_SUBSCRIPTION_ID: ((PPDM.CDR.AZURE_SUBSCRIPTION_ID))
- name: ansible-set-clouddr-target
  serial_groups: [ansible]
  plan:
  - in_parallel:
    - get: dps-automation-image
      tags: ((tags))
    - get: one-time-trigger
      passed: [ ansible-configure-clouddr-account ]
      trigger: true
      tags: ((tags))
    - get: dps-modules
      tags: ((tags))
    - get: dps-ppdm   
      tags: ((tags))
  - task: set-cdr-target
    image: dps-automation-image
    tags: ((tags))
    file: dps-modules/ci/tasks/ansible-playbook.yml
    input_mapping:
      dps-modules: dps-modules
      dps-ansible: dps-ppdm
    params:
      PLAYBOOK: dps-ansible/2.4-playbook_set_cloud_dr_target.yml
      DEBUG: "FALSE"
      PPDM_FQDN: ((PPDM.FQDN))
      PPDM_INITIAL_PASSWORD: ((PPDM.PASSWORD))
      AZURE_STORAGEACCOUNT: ((PPDM.CDR.AZURE_STORAGEACCOUNT))

- name: ansible-deploy-cdrs-instance
  serial_groups: [ansible]
  plan:
  - in_parallel:
    - get: dps-automation-image
      tags: ((tags))
    - get: one-time-trigger
      passed: [ ansible-set-clouddr-target ]
      trigger: true
      tags: ((tags))
    - get: dps-modules
      tags: ((tags))
    - get: dps-ppdm   
      tags: ((tags))
  - task: set-cdrs-deployment
    image: dps-automation-image
    tags: ((tags))
    file: dps-modules/ci/tasks/ansible-playbook.yml
    input_mapping:
      dps-modules: dps-modules
      dps-ansible: dps-ppdm
    params:
      PLAYBOOK: dps-ansible/2.5-playbook_set_cdrs_deployment.yml
      DEBUG: "FALSE"
      PPDM_FQDN: ((PPDM.FQDN))
      PPDM_INITIAL_PASSWORD: ((PPDM.PASSWORD))
      PPDM_CDRS_NETWORK: 10.0.0.0/16
      PPDM_CDRS_USERENAME: Karsten.Bott@dell.com

- name: ansible-set-vsphere-inventory
  serial_groups: [ansible]
  plan:
  - in_parallel:
    - get: dps-automation-image
      tags: ((tags))
    - get: one-time-trigger
      passed: [ ansible-configure-ppdm ]
      trigger: true
      tags: ((tags))
    - get: dps-modules
      tags: ((tags))
    - get: dps-ppdm   
      tags: ((tags))
  - task: set-vsphere-inventory
    image: dps-automation-image
    tags: ((tags))
    file: dps-modules/ci/tasks/ansible-playbook.yml
    input_mapping:
      dps-modules: dps-modules
      dps-ansible: dps-ppdm
    params:
      PLAYBOOK: dps-ansible/2.1-playbook_set_vsphere.yml
      DEBUG: "FALSE"
      PPDM_FQDN: ((PPDM.FQDN))
      PPDM_INITIAL_PASSWORD: ((PPDM.PASSWORD))
      VCENTER_USERNAME: ((GOVC.USERNAME))
      VCENTER_PASSWORD: ((GOVC.PASSWORD))
      VCENTER_FQDN: ((GOVC.URL))


- name: ansible-set-ppdm-license
  serial_groups: [ansible]
  plan:
  - in_parallel:
    - get: dps-automation-image
      tags: ((tags))
    - get: one-time-trigger
      passed: [ ansible-configure-ppdm ]
      trigger: true
      tags: ((tags))
    - get: dps-modules
      tags: ((tags))
    - get: dps-ppdm   
      tags: ((tags))
  - task: replace-licenses
    image: dps-automation-image
    tags: ((tags))
    file: dps-modules/ci/tasks/ansible-playbook.yml
    input_mapping:
      dps-modules: dps-modules
      dps-ansible: dps-ppdm
    params:
      PLAYBOOK: dps-ansible/9.1-playbook_replace_license.yml
      DEBUG: "FALSE"
      PPDM_FQDN: ((PPDM.FQDN))
      PPDM_INITIAL_PASSWORD: ((PPDM.PASSWORD))
      PPDM_LICENSE_KEY: ((PPDM.LICENSE_KEY))

- name: ansible-set-ppdm-smtp
  serial_groups: [ansible]
  plan:
  - in_parallel:
    - get: dps-automation-image
      tags: ((tags))
    - get: one-time-trigger
      passed: [ ansible-configure-ppdm ]
      trigger: true
      tags: ((tags))
    - get: dps-modules
      tags: ((tags))
    - get: dps-ppdm   
      tags: ((tags))
  - task: configure-smtp
    image: dps-automation-image
    tags: ((tags))
    file: dps-modules/ci/tasks/ansible-playbook.yml
    input_mapping:
      dps-modules: dps-modules
      dps-ansible: dps-ppdm
    params:
      PLAYBOOK: dps-ansible/3.1-playbook_set_smtp.yml
      DEBUG: "FALSE"
      PPDM_FQDN: ((PPDM.FQDN))
      PPDM_INITIAL_PASSWORD: ((PPDM.PASSWORD))
      PPDM_SMTP_SERVER: ((PPDM.SMTP_SERVER))
      PPDM_SMTP_FROM: ((PPDM.SMTP_FROM))
      PPDM_SMTP_PORT: ((PPDM.SMTP_PORT))

- name: add-vpe-proxy
  plan:
  - in_parallel:
    - get: variable
      trigger: false
    - get: dps-automation-image
      tags: ((tags))
    - get: one-time-trigger  
      passed: [ ansible-set-vsphere-inventory ]              
    - get: dps-modules
      tags: ((tags))
  - task: add-proxy 
    tags: ((tags))
    image: dps-automation-image
    file: dps-modules/ci/tasks/add-ppdm-vproxy.yml
    input_mapping:
      dps-modules: dps-modules
      variable: variable
    params:
      DEBUG: "FALSE"
      GOVC_INSECURE: ((GOVC.INSECURE))
      GOVC_PASSWORD: ((GOVC.PASSWORD))
      GOVC_URL: ((GOVC.URL))
      GOVC_USERNAME: ((GOVC.USERNAME))
      PPDM_FQDN: ((PPDM.FQDN))
      PPDM_PASSWORD: ((PPDM.PASSWORD))
      PROXY_FILE: variable/proxy.yml


- name: delete-vm-instant-access
  plan:
  - in_parallel:
    - get: instant-access-state
      passed: [ ppdm-vm-instant-access ]              
    - get: one-time-trigger
      passed: [ ansible-set-vsphere-inventory ]              
    - get: dps-automation-image
      tags: ((tags))
    - get: dps-modules
      tags: ((tags))
  - task: remove-instant-access 
    tags: ((tags))
    image: dps-automation-image
    file: dps-modules/ci/tasks/ppdm-delete-vm-instant-access.yml
    input_mapping:
      dps-modules: dps-modules
      variable: instant-access-state
    params:
      DEBUG: "FALSE"
      GOVC_INSECURE: ((GOVC.INSECURE))
      GOVC_PASSWORD: ((GOVC.PASSWORD))
      GOVC_URL: ((GOVC.URL))
      GOVC_USERNAME: ((GOVC.USERNAME))
      PPDM_FQDN: ((PPDM.FQDN))
      PPDM_PASSWORD: ((PPDM.PASSWORD))



- name: ppdm-vm-instant-access
  plan:
  - in_parallel:
    - get: instant-access-request
      trigger: true
    - get: one-time-trigger
      passed: [ ansible-set-vsphere-inventory ]              
    - get: dps-automation-image
      tags: ((tags))
    - get: dps-modules
      tags: ((tags))
  - task: instant-access 
    tags: ((tags))
    image: dps-automation-image
    file: dps-modules/ci/tasks/ppdm-vm-instant-access.yml
    input_mapping:
      dps-modules: dps-modules
      variable: instant-access-request
    params:
      DEBUG: "FALSE"
      GOVC_INSECURE: ((GOVC.INSECURE))
      GOVC_PASSWORD: ((GOVC.PASSWORD))
      GOVC_URL: ((GOVC.URL))
      GOVC_USERNAME: ((GOVC.USERNAME))
      PPDM_FQDN: ((PPDM.FQDN))
      PPDM_PASSWORD: ((PPDM.PASSWORD))
      PROXY_FILE: variable/ppdm-instant-
  - put: instant-access-state
    tags: ((tags))
    params:
      file: instant_access/*.json
- name: ppdm-vm-restore
  plan:
  - in_parallel:
    - get: restore-request
      trigger: true
    - get: one-time-trigger
      passed: [ ansible-set-vsphere-inventory ]              
    - get: dps-automation-image
      tags: ((tags))
    - get: dps-modules
      tags: ((tags))
    - get: dps-ppdm   
      tags: ((tags))
  - task: restore-vm
    image: dps-automation-image
    tags: ((tags))
    file: dps-modules/ci/tasks/ansible-playbook.yml
    input_mapping:
      dps-modules: dps-modules
      varsfile: restore-request
      dps-ansible: dps-ppdm    
    params:
      PLAYBOOK: dps-ansible/40.1-playbook_restore_vm_asset_copies.yml
      DEBUG: "FALSE"
      PPDM_FQDN: ((PPDM.FQDN))
      PPDM_INITIAL_PASSWORD: ((PPDM.PASSWORD))
      PPDM_SMTP_SERVER: ((PPDM.SMTP_SERVER))
      PPDM_SMTP_FROM: ((PPDM.SMTP_FROM))
      PPDM_SMTP_PORT: ((PPDM.SMTP_PORT))      



- name: delete-ppdm
  plan:
  - in_parallel:
    - get: dps-automation-image
      tags: ((tags))
    - get: dps-modules
      tags: ((tags))
    - get: one-time-trigger  
      passed: [ deploy-powerprotect-ova ]              
  - task: delete-ppdm
    tags: ((tags))
    image: dps-automation-image
    file: dps-modules/ci/tasks/delete-ppdm.yml
    input_mapping:
      dps-modules: dps-modules
    params:
      DEBUG: "FALSE"
      GOVC_INSECURE: ((GOVC.INSECURE))
      GOVC_PASSWORD: ((GOVC.PASSWORD))
      GOVC_URL: ((GOVC.URL))
      GOVC_USERNAME: ((GOVC.USERNAME))
      GOVC_RESOURCE_POOL: ((GOVC.RESOURCE_POOL))
      GOVC_DATASTORE: ((GOVC.DATASTORE)) 
      GOVC_DATACENTER: ((GOVC.DATACENTER)) 
      GOVC_NETWORK: ((GOVC.NETWORK))
      PPDM_VMNAME: ((PPDM.VMNAME))
- name: delete-cdrs-azure
  plan:
  - in_parallel:
    - get: dps-automation-image
      tags: ((tags))
    - get: dps-modules
      tags: ((tags))
    - get: one-time-trigger  
      passed: 
      - delete-ppdm
      - ansible-deploy-cdrs-instance
      trigger: true             
  - task: delete-cdrs-azure
    tags: ((tags))
    image: dps-automation-image
    file: dps-modules/ci/tasks/destroy-azure-rg.yml
    input_mapping:
      dps-modules: dps-modules
    params:
      DEBUG: "FALSE"
      AZURE_TENANT_ID: ((PPDM.CDR.AZURE_TENANT_ID))
      AZURE_CLIENT_ID: ((PPDM.CDR.AZURE_CLIENT_ID))
      AZURE_CLIENT_SECRET: ((PPDM.CDR.AZURE_CLIENT_SECRET))
      AZURE_SUBSCRIPTION_ID: ((PPDM.CDR.AZURE_SUBSCRIPTION_ID))
      RESOURCE_GROUP: CDRS-ResourceGroup


- name: get-certs-from-pfsense
  serial: true
  # serial_groups: [ install ]
  plan:
  - in_parallel:
    - get: platform-automation-image
      tags: ((tags))
      params:
        unpack: true
    - get: daily-trigger
      tags: ((tags))
      trigger: true
    - get: pfsense-modules
      tags: ((tags))
      params:
        unpack: true    
  - task: get-current-certs
    tags: ((tags))  
    image: platform-automation-image
    file: pfsense-modules/ci/tasks/request_cert.yml
    params:
      <<: *credhub_env
      CERT_ID: ((PPDM.CERT_ID))
      CA_ID: ((PPDM.CA_ID))
      STORED_CERT: ((PPDM.STORED_CERT))
      SUBJECT: ((PPDM.FQDN))
      PFSENSE_FQDN: pfsense.home.labbuildr.com
      PFSENSE_USERNAME: ((pfsense_user.username)) 
      PFSENSE_PASSWORD: ((pfsense_user.password))
    input_mapping:
      pfsense-modules: pfsense-modules
    output_mapping: {certificates: certificates}
  - put: certstate
    tags: ((tags))      
    params:
      file: certificates/((PPDM.FQDN))*.pem

- name: get-ppdm-cert-expiration
  serial: true
  plan:
  - in_parallel:
    - get: platform-automation-image
      tags: ((tags))
      params:
        unpack: true
    - get: one-time-trigger
      tags: ((tags))   
      passed: [ ansible-configure-ppdm ]        
    - get: daily-trigger
      tags: ((tags))
      trigger: true
    - get: pfsense-modules
      tags: ((tags))
      params:
        unpack: true  
  - across:
    - var: endpoints
      values: [((PPDM.FQDN))]   
    try: 
        do:      
          - task: check-expiration
            image: platform-automation-image
            file: pfsense-modules/ci/tasks/check_cert_expiration.yml
            params:
              SUBJECT: ((.:endpoints))
              PORT: "443"
              EXPIRE_DAYS: "15"
            input_mapping:
              pfsense-modules: pfsense-modules
            on_failure:
              do:
              - task: request-new-certs-from-pfsense
                tags: ((tags))      
                image: platform-automation-image
                file: pfsense-modules/ci/tasks/renew_cert.yml
                params:
                  <<: *credhub_env
                  CERT_ID: ((PPDM.CERT_ID))
                  CA_ID: ((PPDM.CA_ID))
                  STORED_CERT: ((PPDM.STORED_CERT))
                  SUBJECT: ((PPDM.FQDN))
                  PFSENSE_FQDN: pfsense.home.labbuildr.com
                  PFSENSE_USERNAME: ((pfsense_user.username)) 
                  PFSENSE_PASSWORD: ((pfsense_user.password))
                input_mapping:
                  pfsense-modules: pfsense-modules
                output_mapping: {certificates: certificates}
              - put: certstate
                tags: ((tags))      
                params:
                  file: certificates/((PPDM.FQDN))*.pem


- name: issue-ppdm-cert-renewal
  serial: true
  plan:
  - in_parallel:
    - get: platform-automation-image
      tags: ((tags))
      params:
        unpack: true
    - get: one-time-trigger
      tags: ((tags))
      trigger: false
    - get: pfsense-modules
      tags: ((tags))
      params:
        unpack: true    
  - task: request-new-certs-from-pfsense
    tags: ((tags))      
    image: platform-automation-image
    file: pfsense-modules/ci/tasks/renew_cert.yml
    params:
      <<: *credhub_env
      CERT_ID: ((PPDM.CERT_ID))
      CA_ID: ((PPDM.CA_ID))
      STORED_CERT: ((PPDM.STORED_CERT))
      SUBJECT: ((PPDM.FQDN))
      PFSENSE_FQDN: pfsense.home.labbuildr.com
      PFSENSE_USERNAME: ((pfsense_user.username)) 
      PFSENSE_PASSWORD: ((pfsense_user.password))
    input_mapping:
      pfsense-modules: pfsense-modules
    output_mapping: {certificates: certificates}
  - put: certstate
    tags: ((tags))      
    params:
      file: certificates/((PPDM.FQDN))*.pem

- name: test-k8s-broker
  plan:
  - in_parallel:
    - get: dps-automation-image-testing
      tags: ((tags))        
    - get: dps-modules
      tags: ((tags))
    - get: dps-ppdm    
      tags: ((tags))      
  - task: ansible-check-sw-update
    image: dps-automation-image-testing
    tags: ((tags))
    file: dps-modules/ci/tasks/ansible-playbook.yml   
    input_mapping:
      dps-modules: dps-modules
      dps-ansible: dps-ppdm
    params:
      PLAYBOOK: dps-ansible/99_playbook_get_k8s_info.yml
      DEBUG: "TRUE"
      PPDM_INITIAL_PASSWORD: ((PPDM.PASSWORD)) 
      PPDM_FQDN: ((PPDM.FQDN)) 
      KUBECOFIG: "leer"

groups:
- name: full
  jobs:
  - deploy-powerprotect-ova
  - upload-powerprotect-update
  - precheck-powerprotect-update
  - execute-powerprotect-update
  - ansible-configure-ppdm
  - ansible-set-ddve-inventory
  - ansible-set-ppdm-sdr-for-new-config
  - ansible-set-ppdm-sdr-for-existing-boost
  - ansible-enable-cdr
  - ansible-set-ppdm-certificates
  - ansible-configure-clouddr-account
  - ansible-set-clouddr-target
  - ansible-deploy-cdrs-instance
  - ansible-set-vsphere-inventory
  - ansible-set-ppdm-license
  - ansible-set-ppdm-smtp
  - add-vpe-proxy
  - delete-vm-instant-access
  - ppdm-vm-instant-access
  - ppdm-vm-restore
  - delete-ppdm
  - delete-cdrs-azure
  - get-certs-from-pfsense
  - get-ppdm-cert-expiration
  - issue-ppdm-cert-renewal

- name: restore
  jobs:
  - ppdm-vm-restore
- name: instant-access
  jobs:
  - delete-vm-instant-access
  - ppdm-vm-instant-access
- name: certificate-management
  jobs:
  - get-certs-from-pfsense
  - get-ppdm-cert-expiration
  - issue-ppdm-cert-renewal  
- name: update-management
  jobs:
  - upload-powerprotect-update
  - precheck-powerprotect-update
  - execute-powerprotect-update      

- name: k8sbroker
  jobs:
  - test-k8s-broker  
