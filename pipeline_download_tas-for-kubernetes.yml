---
s3_env: &s3_env
  access_key_id: ((s3_access_key_id))
  endpoint:  ((s3_endpoint))
  region_name: ((s3_region_name))
  secret_access_key: ((s3_secret_access_key))

credhub_env: &credhub_env
  CREDHUB_CLIENT: ((credhub-client))
  CREDHUB_SECRET: ((credhub-secret))
  CREDHUB_SERVER: ((credhub-server))
  PREFIX: /concourse/aks
  CREDHUB_CA_CERT: ((credhub-ca-cert.certificate))

stage_steps: &stage_steps
  steps:
    - get: platform-automation-image
      tags: ((tags))
      params:
        unpack: true
    - get: platform-automation-tasks
      tags: ((tags))
      params:
        unpack: true
    - get: templates
      tags: ((tags))
    - get: variable
      tags: ((tags))

stage_config: &stage_config
  image: platform-automation-image
  file: platform-automation-tasks/tasks/staged-config.yml
  input_mapping:
    env: variable

do_stage_commit: &do_stage_commit
  image: platform-automation-image
  file: platform-automation-tasks/tasks/make-git-commit.yml
  input_mapping:
    repository: variable
    file-source: generated-config
  output_mapping:
    repository-commit: variable-commit

true_trigger: &true_trigger
  trigger: true

  
git_commit_env: &git_commit_env
  GIT_AUTHOR_EMAIL: "pcf-pipeline-bot@ebottnet.de"
  GIT_AUTHOR_NAME: "Platform Automation Bot"
  COMMIT_MESSAGE: 'Staged  Config Writer'

slack_start_param: &slack_start_param
  channel: ((slack.channel))
  text: |
    ((foundation)) Job $BUILD_JOB_NAME started with ID $BUILD_ID for 
    build $BUILD_NAME for team $BUILD_TEAM_NAME at
    $ATC_EXTERNAL_URL using pipeline  $BUILD_PIPELINE_NAME
    see $ATC_EXTERNAL_URL/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME
    for details
  icon_emoji: ":concourse-started:"

slack_succeeded_param: &slack_succeeded_param
  channel: ((slack.channel))
  text: |
    ((foundation)) Job $BUILD_JOB_NAME succeeded with ID $BUILD_ID for 
    build $BUILD_NAME for team $BUILD_TEAM_NAME at
    $ATC_EXTERNAL_URL using pipeline  $BUILD_PIPELINE_NAME    
    see $ATC_EXTERNAL_URL/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME
    for details
  icon_emoji: ":concourse-succeeded:"

slack_failed_param: &slack_failed_param
  channel: ((slack.channel))
  text: |
    ((foundation)) Job $BUILD_JOB_NAME failed with ID $BUILD_ID for 
    build $BUILD_NAME for team $BUILD_TEAM_NAME at
    $ATC_EXTERNAL_URL using pipeline  $BUILD_PIPELINE_NAME
    see $ATC_EXTERNAL_URL/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME
    for details
  icon_emoji: ":concourse-failed:"

resource_types:
- name: pivnet
  tags: ((tags))
  type: docker-image
  source:
    repository: pivotalcf/pivnet-resource
    tag: latest-final

resources:
- name: after-midnight
  tags: ((tags))
  icon: calendar-clock
  type: time
  source:
    start: 01:00 AM
    stop: ((after_midnight_end))
    interval: 24h
    location: Europe/Berlin 



- name: platform-automation-tasks
  tags: ((tags))
  icon: amazon-drive
  type: s3
  source:
    <<: *s3_env
    bucket: ((buckets_pivnet_tasks))
    regexp: platform-automation-tasks-(.*).zip

- name: platform-automation-image
  tags: ((tags))
  icon: amazon-drive
  type: s3
  source:
    <<: *s3_env
    bucket: ((buckets_pivnet_image))
    regexp: platform-automation-image-(.*).tgz

- name: tas-for-kubernetes-product
  tags: ((tags))
  icon: amazon-drive
  type: s3
  source:
    <<: *s3_env
    bucket: ((buckets_pivnet_products))
    regexp: tas-for-kubernetes-product/\[tas-for-kubernetes,(.*)\]tanzu-application-service.*.tar
- name: kubectl-product
  tags: ((tags))
  icon: amazon-drive
  type: s3
  source:
    <<: *s3_env
    bucket: ((buckets_pivnet_products))
    regexp: tas-for-kubernetes-product/\[pivotal-container-service,(.*)\]kubectl-linux-amd64-.*
- name: boshcli-product
  tags: ((tags))
  icon: amazon-drive
  type: s3
  source:
    <<: *s3_env
    bucket: ((buckets_pivnet_products))
    regexp: tas-for-kubernetes-product/\[tas-for-kubernetes,(.*)\]bosh.*
- name: kbld-product
  tags: ((tags))
  icon: amazon-drive
  type: s3
  source:
    <<: *s3_env
    bucket: ((buckets_pivnet_products))
    regexp: tas-for-kubernetes-product/\[kbld,(.*)\]kbld.*
- name: kapp-product
  tags: ((tags))
  icon: amazon-drive
  type: s3
  source:
    <<: *s3_env
    bucket: ((buckets_pivnet_products))
    regexp: tas-for-kubernetes-product/\[kapp,(.*)\]kapp.*    
- name: ytt-product
  tags: ((tags))
  icon: amazon-drive
  type: s3
  source:
    <<: *s3_env
    bucket: ((buckets_pivnet_products))
    regexp: tas-for-kubernetes-product/\[ytt,(.*)\]ytt*   


- name: templates
  tags: ((tags))
  icon: github-circle
  type: git
  check_every: 10m  
  source: 
    uri: ((templates.repo))
    private_key: ((((foundation))/template-deploy-key.private_key))
    branch: ((templates.branch))


interpolate-product-downloads: &interpolate-product-downloads
  image: platform-automation-image
  file: platform-automation-tasks/tasks/credhub-interpolate.yml
  params:
    <<: *credhub_env
    INTERPOLATION_PATHS:  download-product-configs/((tas_for_k8s_version))/tas-for-k8s/download-tas-for-kubernetes.yml
                          download-product-configs/((tas_for_k8s_version))/tas-for-k8s/download-kbld.yml
                          download-product-configs/((tas_for_k8s_version))/tas-for-k8s/download-kapp.yml
                          download-product-configs/((tas_for_k8s_version))/tas-for-k8s/download-ytt.yml
                          download-product-configs/((tas_for_k8s_version))/tas-for-k8s/download-boshcli.yml                          
  input_mapping:
    files: templates
  output_mapping:
    interpolated-files: interpolated-product-downloads


jobs:
- name: get-tas-for-kubernetes-artifacts
  serial: true
  serial_groups: [ get-products ]
  plan:
  - in_parallel:
    - get: after-midnight
      tags: ((tags))
      trigger: true
    - get: platform-automation-image
      tags: ((tags))
      params:
        unpack: true
    - get: platform-automation-tasks
      tags: ((tags))
      params:
        unpack: true
    - get: templates
      tags: ((tags))
  - task: interpolate-product-downloads
    tags: ((tags))
    <<: *interpolate-product-downloads
  - task: download-tas-for-kubernetes-product
    tags: ((tags))
    image: platform-automation-image
    file: platform-automation-tasks/tasks/download-product.yml
    params:
      CONFIG_FILE: download-product-configs/((tas_for_k8s_version))/tas-for-k8s/download-tas-for-kubernetes.yml
    input_mapping:
      config: interpolated-product-downloads

  - in_parallel:
    - put: tas-for-kubernetes-product
      tags: ((tags))
      params:
        file: downloaded-product/*.tar

  - task: download-kapp
    tags: ((tags))
    image: platform-automation-image
    file: platform-automation-tasks/tasks/download-product.yml
    params:
      CONFIG_FILE: download-product-configs/((tas_for_k8s_version))/tas-for-k8s/download-kapp.yml
    input_mapping:
      config: interpolated-product-downloads

  - in_parallel:
    - put: kapp-product
      tags: ((tags))
      params:
        file: downloaded-product/*kapp-linux-amd64

  - task: download-kbld
    tags: ((tags))
    image: platform-automation-image
    file: platform-automation-tasks/tasks/download-product.yml
    params:
      CONFIG_FILE: download-product-configs/((tas_for_k8s_version))/tas-for-k8s/download-kbld.yml
    input_mapping:
      config: interpolated-product-downloads

  - in_parallel:
    - put: kbld-product
      tags: ((tags))
      params:
        file: downloaded-product/*kbld-linux-amd64

  - task: download-ytt
    tags: ((tags))
    image: platform-automation-image
    file: platform-automation-tasks/tasks/download-product.yml
    params:
      CONFIG_FILE: download-product-configs/((tas_for_k8s_version))/tas-for-k8s/download-ytt.yml
    input_mapping:
      config: interpolated-product-downloads

  - in_parallel:
    - put: ytt-product
      tags: ((tags))
      params:
        file: downloaded-product/*ytt-linux-amd64

  - task: download-boshcli
    tags: ((tags))
    image: platform-automation-image
    file: platform-automation-tasks/tasks/download-product.yml
    params:
      CONFIG_FILE: download-product-configs/((tas_for_k8s_version))/tas-for-k8s/download-boshcli.yml
    input_mapping:
      config: interpolated-product-downloads

  - in_parallel:
    - put: boshcli-product
      tags: ((tags))
      params:
        file: downloaded-product/*bosh*

  - task: download-kubectl
    tags: ((tags))
    image: platform-automation-image
    file: platform-automation-tasks/tasks/download-product.yml
    params:
      CONFIG_FILE: download-product-configs/((tas_for_k8s_version))/tas-for-k8s/download-kubectl.yml
    input_mapping:
      config: interpolated-product-downloads

  - in_parallel:
    - put: boshcli-product
      tags: ((tags))
      params:
        file: downloaded-product/*kubectl*
