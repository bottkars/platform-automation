---
s3_env: &s3_env
  access_key_id: ((((foundation))/s3_access_key_id))
  endpoint:  ((((foundation))/s3_endpoint))
  region_name: ((((foundation))/s3_region_name))
  secret_access_key: ((((foundation))/s3_secret_access_key))

credhub_env: &credhub_env
  CREDHUB_CLIENT: ((((foundation))/credhub-client))
  CREDHUB_SECRET: ((((foundation))/credhub-secret))
  CREDHUB_SERVER: ((((foundation))/credhub-server))
  PREFIX: /concourse/main/((foundation))
  CREDHUB_CA_CERT: ((((foundation))/credhub-ca-cert.certificate))

stage_steps: &stage_steps
  steps:
    - get: platform-automation-image
      tags: ((tags))
      params:
        unpack: true
    - get: platform-automation-tasks
      tags: ((tags))
      params:
        unpack: true
    - get: templates
      tags: ((tags))
    - get: variable
      tags: ((tags))

stage_config: &stage_config
  image: platform-automation-image
  file: platform-automation-tasks/tasks/staged-config.yml
  input_mapping:
    env: variable

do_stage_commit: &do_stage_commit
  image: platform-automation-image
  file: platform-automation-tasks/tasks/make-git-commit.yml
  input_mapping:
    repository: variable
    file-source: generated-config
  output_mapping:
    repository-commit: variable-commit

true_trigger: &true_trigger
  trigger: true

  
git_commit_env: &git_commit_env
  GIT_AUTHOR_EMAIL: "pcf-pipeline-bot@ebottnet.de"
  GIT_AUTHOR_NAME: "Platform Automation Bot"
  COMMIT_MESSAGE: 'Staged  Config Writer'

slack_start_param: &slack_start_param
  channel: ((slack.channel))
  text: |
    ((foundation)) Job $BUILD_JOB_NAME started with ID $BUILD_ID for 
    build $BUILD_NAME for team $BUILD_TEAM_NAME at
    $ATC_EXTERNAL_URL using pipeline  $BUILD_PIPELINE_NAME
    see $ATC_EXTERNAL_URL/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME
    for details
  icon_emoji: ":concourse-started:"

slack_succeeded_param: &slack_succeeded_param
  channel: ((slack.channel))
  text: |
    ((foundation)) Job $BUILD_JOB_NAME succeeded with ID $BUILD_ID for 
    build $BUILD_NAME for team $BUILD_TEAM_NAME at
    $ATC_EXTERNAL_URL using pipeline  $BUILD_PIPELINE_NAME    
    see $ATC_EXTERNAL_URL/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME
    for details
  icon_emoji: ":concourse-succeeded:"

slack_failed_param: &slack_failed_param
  channel: ((slack.channel))
  text: |
    ((foundation)) Job $BUILD_JOB_NAME failed with ID $BUILD_ID for 
    build $BUILD_NAME for team $BUILD_TEAM_NAME at
    $ATC_EXTERNAL_URL using pipeline  $BUILD_PIPELINE_NAME
    see $ATC_EXTERNAL_URL/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME
    for details
  icon_emoji: ":concourse-failed:"

resource_types:
- name: pivnet
  tags: ((tags))
  type: docker-image
  source:
    repository: pivotalcf/pivnet-resource
    tag: latest-final
- name: slack-notification
  tags: ((tags))
  type: docker-image
  source:
    repository: cfcommunity/slack-notification-resource    
resources:
- name: additional-tasks
  icon: amazon-drive
  type: s3
  source:
    <<: *s3_env
    bucket: ((((foundation))/buckets_pivnet_tasks))
    regexp: additional-tasks-(.*).zip
# triggers

- name: after-midnight
  tags: ((tags))
  icon: calendar-clock
  type: time
  source:
    start: 01:00 AM
    stop: ((after_midnight_end))
    interval: 24h
    location: Europe/Berlin 
# notifications
- name: notify
  tags: ((tags))
  icon: bell
  type: slack-notification
  source:
    url: ((slack.webhook))
- name: installation
  tags: ((tags))
  icon: amazon-drive
  type: s3
  source:
    <<: *s3_env
    bucket: ((((foundation))/buckets_installation))
    regexp: ((foundation))/installation-(.*).zip    

- name: platform-automation-tasks
  tags: ((tags))
  icon: amazon-drive
  type: s3
  source:
    <<: *s3_env
    bucket: ((((foundation))/buckets_pivnet_tasks))
    regexp: platform-automation-tasks-(.*).zip

- name: platform-automation-image
  tags: ((tags))
  icon: amazon-drive
  type: s3
  source:
    <<: *s3_env
    bucket: ((((foundation))/buckets_pivnet_image))
    regexp: platform-automation-image-(.*).tgz
#############################
###### Products go here #####
#############################    

- name: pas-for-kubernetes-product
  tags: ((tags))
  icon: amazon-drive
  type: s3
  source:
    <<: *s3_env
    bucket: ((((foundation))/buckets_pivnet_products))
    regexp: pas-for-kubernetes-product/\[pas-for-kubernetes,(.*)\]pas-for-kubernetes-.*.pivotal

- name: pas-for-kubernetes-stemcell
  tags: ((tags))
  icon: amazon-drive
  type: s3
  source:
    <<: *s3_env
    bucket: ((((foundation))/buckets_pivnet_products))
    regexp: pas-for-kubernetes-stemcell/\[stemcells-ubuntu-xenial,(.*)\]bosh-stemcell-.*-((iaas)).*\.tgz

#############################
###### Products end here ####
############################# 

- name: templates
  tags: ((tags))
  icon: github-circle
  type: git
  check_every: 10m  
  source: 
    uri: ((template-repo))
    private_key: ((((foundation))/template-deploy-key.private_key))
    branch: master

- name: variable
  tags: ((tags))
  icon: github-circle
  type: git
  check_every: 10m  
  source: 
    uri: ((variable-repo))
    private_key: ((((foundation))/variable-deploy-key.private_key))
    branch: master
    paths:
    - ((foundation))/vars/pas-for-kubernetes-vars.yml

- name: pipeline-lock
  icon: cloud-lock
  type: pool
  check_every: 10m
  source:
    uri: ((variable-repo))
    branch: master
    pool: pks
    private_key: ((((foundation))/variable-deploy-key.private_key))
    retry_delay: 300s

- name: download-lock
  icon: cloud-lock-outline
  type: pool
  check_every: 10m
  source:
    uri: ((variable-repo))
    branch: master
    pool: download-lock
    private_key: ((((foundation))/variable-deploy-key.private_key))
    retry_delay: 300s

interpolate-product-downloads: &interpolate-product-downloads
  image: platform-automation-image
  file: platform-automation-tasks/tasks/credhub-interpolate.yml
  params:
    <<: *credhub_env
    INTERPOLATION_PATHS: download-product-configs/((pks_version))/download-pas-for-kubernetes.yml
  input_mapping:
    files: templates
  output_mapping:
    interpolated-files: interpolated-product-downloads

interpolate-product-templates: &interpolate-product-templates
  image: platform-automation-image
  file: platform-automation-tasks/tasks/credhub-interpolate.yml
  params:
    <<: *credhub_env
    INTERPOLATION_PATHS: product-configs/((pks_version))/pas-for-kubernetes.yml
    SKIP_MISSING: true
  input_mapping:
    files: templates
  output_mapping:
    interpolated-files: interpolated-product-templates

jobs:
- name: get-pas-for-kubernetes
  on_failure:
    put: notify
    tags: ((tags))
    params:
      <<: *slack_failed_param
  serial: true
  serial_groups: [ get-products ]
  plan:
  - put: download-lock
    tags: ((tags))
    params:
      acquire: true   
  - in_parallel:
    - get: after-midnight
      tags: ((tags))
      trigger: true
    - get: platform-automation-image
      tags: ((tags))
      params:
        unpack: true
    - get: platform-automation-tasks
      tags: ((tags))
      params:
        unpack: true
    - get: templates
      tags: ((tags))
  - task: interpolate-product-downloads
    tags: ((tags))
    <<: *interpolate-product-downloads
  - task: download-pas-for-kubernetes-product-and-stemcell
    tags: ((tags))
    image: platform-automation-image
    file: platform-automation-tasks/tasks/download-product.yml
    params:
      CONFIG_FILE: download-product-configs/((pks_version))/download-pas-for-kubernetes.yml
    input_mapping:
      config: interpolated-product-downloads
    output_mapping: {downloaded-stemcell: pas-for-kubernetes-stemcell}
    on_failure:
      put: download-lock
      attempts: 5
      tags: ((tags))
      params:
        release: download-lock
  - in_parallel:
    - put: pas-for-kubernetes-product
      tags: ((tags))
      params:
        file: downloaded-product/*.pivotal
    - put: pas-for-kubernetes-stemcell
      tags: ((tags))
      params:
        file: pas-for-kubernetes-stemcell/*.tgz
  - put: download-lock
    attempts: 5
    tags: ((tags))
    params:
      release: download-lock

##
- name: upload-and-stage-pas-for-kubernetes
  on_failure:
    put: notify
    tags: ((tags))
    params:
      <<: *slack_failed_param
  serial: true
  serial_groups:
  - apply
  - upload-and-stage
  - configure-products
  - get-products
  plan:
  - in_parallel:
    - get: platform-automation-image
      tags: ((tags))
      params:
        unpack: true
    - get: platform-automation-tasks
      tags: ((tags))
      params:
        unpack: true
    - get: templates
      tags: ((tags))
    - get: variable
      tags: ((tags))
      trigger: true
    - get: pas-for-kubernetes-product
      tags: ((tags))
      skip_download: true
      trigger: true     
    - get: pas-for-kubernetes-stemcell
      tags: ((tags))
      skip_download: true
      trigger: true    
  - task: interpolate-product-downloads
    tags: ((tags))
    <<: *interpolate-product-downloads     
  - task: download-pas-for-kubernetes
    tags: ((tags))
    image: platform-automation-image
    file: platform-automation-tasks/tasks/download-product.yml
    params:
      CONFIG_FILE: download-product-configs/((pks_version))/download-pas-for-kubernetes.yml
      SOURCE: s3
    input_mapping:
      config: interpolated-product-downloads
    output_mapping:
      downloaded-product: pas-for-kubernetes-product
      downloaded-stemcell: pas-for-kubernetes-stemcell
  - put: pipeline-lock
    attempts: 5
    tags: ((tags))    
    params:        
      claim: base       
  - task: upload-product
    tags: ((tags))
    image: platform-automation-image
    file: platform-automation-tasks/tasks/upload-product.yml
    input_mapping:
      product: pas-for-kubernetes-product
      env: variable
    params:
      ENV_FILE: ((foundation))/env/env.yml
  - task: upload-pas-for-kubernetes-stemcell
    tags: ((tags))
    image: platform-automation-image
    file: platform-automation-tasks/tasks/upload-stemcell.yml
    input_mapping:
      env: variable
      stemcell: pas-for-kubernetes-stemcell
    params:
      ENV_FILE: ((foundation))/env/env.yml
  - task: stage-product
    tags: ((tags))
    image: platform-automation-image
    file: platform-automation-tasks/tasks/stage-product.yml
    input_mapping:
      product: pas-for-kubernetes-product
      env: variable
    params:
      ENV_FILE: ((foundation))/env/env.yml      


##

- name: configure-pas-for-kubernetes
  on_failure:
    put: notify
    tags: ((tags))
    params:
      <<: *slack_failed_param
  plan:
  - in_parallel:
    - get: platform-automation-image
      tags: ((tags))
      params:
        unpack: true
      passed:
        - upload-and-stage-pas-for-kubernetes
    - get: pipeline-lock
      tags: ((tags))
      passed:
      - upload-and-stage-pas-for-kubernetes
      trigger: true    
    - get: platform-automation-tasks
      tags: ((tags))
      params:
        unpack: true
    - get: templates
      tags: ((tags))
    - get: variable
      tags: ((tags))
  - task: interpolate-product-templates
    tags: ((tags))
    <<: *interpolate-product-templates
  - task: configure-pas-for-kubernetes
    tags: ((tags))
    image: platform-automation-image
    file: platform-automation-tasks/tasks/configure-product.yml
    input_mapping:
      config: interpolated-product-templates
      env: variable
      vars: variable
    params:
      CONFIG_FILE: product-configs/((pks_version))/pas-for-kubernetes.yml
      VARS_FILES: vars/((foundation))/vars/pas-for-kubernetes-vars.yml
      ENV_FILE: ((foundation))/env/env.yml 

##
- name: apply-product-changes
  on_failure:
    put: notify
    tags: ((tags))
    params:
      <<: *slack_failed_param
  plan:
  - in_parallel: 
    - get: additional-tasks
      tags: ((tags))
      params:
        unpack: true         
    - get: platform-automation-tasks
      tags: ((tags))
      params:
        unpack: true        
    - get: platform-automation-image
      tags: ((tags))
      params:
        unpack: true
    - get: pipeline-lock
      tags: ((tags))
      passed: 
      - configure-pas-for-kubernetes
      trigger: true   
    - get: variable
      tags: ((tags))
  - task: apply-product-changes
    tags: ((tags))      
    image: platform-automation-image
    file: platform-automation-tasks/tasks/apply-changes.yml
    input_mapping:
      env: variable
    params:
      ENV_FILE: ((foundation))/env/env.yml      
#  - task: apply-product-changes 
#    tags: ((tags))
#    image: platform-automation-image
#    file: additional-tasks/tasks/apply-product-changes.yml
#    input_mapping:
#      env: variable
#    params:
#      PRODUCT_NAME: pas-for-kubernetes
#      ENV_FILE: ((foundation))/env/env.yml
  - task: export-installation
    tags: ((tags))
    image: platform-automation-image
    file: platform-automation-tasks/tasks/export-installation.yml
    input_mapping:
      env: variable
    params:
      ENV_FILE: ((foundation))/env/env.yml
      INSTALLATION_FILE: installation-$timestamp.zip
  - put: installation
    tags: ((tags))
    params:
      file: installation/installation*.zip
  - put: pipeline-lock
    attempts: 5
    tags: ((tags))
    params:
      release: pipeline-lock    



