s3_env: &s3_env
  access_key_id: ((((foundation))/s3_access_key_id))
  endpoint:  ((((foundation))/s3_endpoint))
  region_name: ((((foundation))/s3_region_name))
  secret_access_key: ((((foundation))/s3_secret_access_key))


credhub_env: &credhub_env
  CREDHUB_CLIENT: ((((foundation))/credhub-client))
  CREDHUB_SECRET: ((((foundation))/credhub-secret))
  CREDHUB_SERVER: ((((foundation))/credhub-server))
  PREFIX: /concourse/main/((foundation))
  CREDHUB_CA_CERT: ((((foundation))/credhub-ca-cert.certificate))



resource_types:
- name: pivnet
  type: docker-image
  source:
    repository: pivotalcf/pivnet-resource
    tag: latest-final
   

resources:
# triggers
#- name: daily-trigger
#  icon: calendar-clock
#  type: time
#  source:
#    interval: 24h


- name: one-time-trigger
  icon: calendar-clock
  type: time
  source:
    interval: 999999h

#- name: after-midnight
#  type: time
#  source:
#    start: 01:00 AM
#    stop: ((after_midnight_end))
#    interval: 24h
#    location: Europe/Berlin 

#- name: installation
#  icon: cloud-download
#  type: s3
#  source:
#    <<: *s3_env
#    bucket: ((buckets.installation))
#    regexp: ((foundation))/installation-(.*).zip    
#- name: platform-automation-pivnet
#  type: pivnet
#  source:
#    api_token: ((((foundation))/pivnet-token))
#    product_slug: platform-automation
#    product_version: 4\.*\.(.*)
#    sort_by: semver


- name: dps-automation-image
  icon: cloud-download
  type: s3
  source:
    <<: *s3_env
    bucket: ((buckets.pivnet_image))
    regexp: platform-automation-image-(.*).tgz


- name: dps_modules
  tags: ((tags))
  icon: git
  type: git
  check_every: 10m  
  source:  
    uri: https://github.com/bottkars/dps_modules.git
    branch: master

## product resources
- name: powerprotect
  type: s3
  icon: folder-move
  source:
    <<: *s3_env
    bucket: ((buckets.dps_products))
    regexp: powerprotect/dellemc-ppdm-sw-(([1-9]{0,2})\.([4567]{1,2})\.([0-9]{1,2})-([0-9]{1,2})).ova #only release builds
#    regexp: powerprotect/dellemc-ppdm-sw-(.*).ova   # any build


jobs:
#- name: get-platform-automation
#  plan:
#  - in_parallel:
#    - get: after-midnight
#      trigger: true
#    - get: platform-automation-pivnet
#      trigger: true
#    - put: dps-automation-image
#      params:
#        file: platform-automation-pivnet/*image*.tgz

- name: deploy-powerprotect-ova
  plan:
  - in_parallel:
    - get: one-time-trigger
      trigger: true
    - get: powerprotect
      tags: ((tags))
      params:
        unpack: true
      params:
        unpack: false
    - get: dps-automation-image
      params:
        unpack: true
      tags: ((tags))        
    - get: dps_modules
      tags: ((tags))
  - task: deploy-ova
    tags: ((tags))
    image: dps-automation-image
    file: dps_modules/ci/tasks/deploy-ppdm.yml
    input_mapping:
      dps_modules: dps_modules
      powerprotect: powerprotect
    params:
      DEBUG: "TRUE"
      GOVC_INSECURE: ((GOVC.INSECURE))
      GOVC_PASSWORD: ((GOVC.PASSWORD))
      GOVC_URL: ((GOVC.URL))
      GOVC_USERNAME: ((GOVC.USERNAME))
      GOVC_RESOURCE_POOL: ((GOVC.RESOURCE_POOL))
      GOVC_DATASTORE: ((GOVC.DATASTORE)) 
      GOVC_DATACENTER: ((GOVC.DATACENTER)) 
      GOVC_NETWORK: ((GOVC.NETWORK))
      PPDM_NETWORK: ((PPDM.NETWORK))
      PPDM_ADDRESS: ((PPDM.ADDRESS))
      PPDM_GATEWAY: ((PPDM.GATEWAY))
      PPDM_NETMASK: ((PPDM.NETMASK))
      PPDM_FQDN: ((PPDM.FQDN))
      PPDM_VMNAME: ((PPDM.VMNAME))
      PPDM_DNS: ((PPDM.DNS))       
- name: configure-ppdm
  plan:
  - in_parallel:
    - get: one-time-trigger
      trigger: true
    - get: dps-automation-image
      passed: [ deploy-powerprotect-ova ]
      params:
        unpack: true
      tags: ((tags))        
    - get: dps_modules
      tags: ((tags))
  - task: configure-ppdm
    tags: ((tags))
    image: dps-automation-image
    file: dps_modules/ci/tasks/configure-ppdm.yml
    input_mapping:
      dps_modules: dps_modules
    params:
      DEBUG: "TRUE"
      PPDM_NETWORK: ((PPDM.NETWORK))
      PPDM_ADDRESS: ((PPDM.ADDRESS))
      PPDM_GATEWAY: ((PPDM.GATEWAY))
      PPDM_NETMASK: ((PPDM.NETMASK))
      PPDM_FQDN: ((PPDM.FQDN))
      PPDM_VMNAME: ((PPDM.VMNAME))
      PPDM_DNS: ((PPDM.DNS))
      PPDM_PASSWORD: ((PPDM.PASSWORD))
      PPDM_SETUP_PASSWORD: ((PPDM.SETUP_PASSWORD))  
- name: set-ddve-inventory
  plan:
  - in_parallel:
    - get: one-time-trigger
      trigger: true
    - get: dps-automation-image
      params:
        unpack: true
      tags: ((tags))
      passed: [ configure-ppdm ]              
    - get: dps_modules
      tags: ((tags))
  - task: set-inventory
    tags: ((tags))
    image: dps-automation-image
    file: dps_modules/ci/tasks/set-ppdm-inventory.yml
    input_mapping:
      dps_modules: dps_modules
    params:
      DEBUG: "TRUE"
      PPDM_FQDN: ((PPDM.FQDN))
      PPDM_PASSWORD: ((PPDM.PASSWORD))
      INVENTORY_USERNAME: ((DDVE.USERNAME))
      INVENTORY_PASSWORD: ((DDVE.PASSWORD))
      INVENTORY_FQDN: ((DDVE.FQDN))
      INVENTORY_CREDENTIAL_TYPE: DATADOMAIN
      INVENTORY_TYPE: EXTERNALDATADOMAIN
      INVENTORY_PORT: 3009

- name: set-vsphere-inventory
  plan:
  - in_parallel:
    - get: one-time-trigger
      trigger: true
    - get: dps-automation-image
      params:
        unpack: true
      tags: ((tags))
      passed: [ configure-ppdm ]              
    - get: dps_modules
      tags: ((tags))
  - task: set-inventory
    tags: ((tags))
    image: dps-automation-image
    file: dps_modules/ci/tasks/set-ppdm-inventory.yml
    input_mapping:
      dps_modules: dps_modules
    params:
      DEBUG: "TRUE"
      PPDM_FQDN: ((PPDM.FQDN))
      PPDM_PASSWORD: ((PPDM.PASSWORD))
      INVENTORY_USERNAME: ((GOVC.USERNAME))
      INVENTORY_PASSWORD: ((GOVC.PASSWORD))
      INVENTORY_FQDN: ((GOVC.URL))
      INVENTORY_CREDENTIAL_TYPE: VCENTER
      INVENTORY_TYPE: VCENTER
      INVENTORY_PORT: 443

- name: delete-ppdm
  plan:
  - in_parallel:
    - get: dps-automation-image
      params:
        unpack: true
      tags: ((tags))
      passed: [ deploy-powerprotect-ova ]              
    - get: dps_modules
      tags: ((tags))
  - task: delete-ppdm
    tags: ((tags))
    image: dps-automation-image
    file: dps_modules/ci/tasks/delete-ppdm.yml
    input_mapping:
      dps_modules: dps_modules
    params:
      DEBUG: "TRUE"
      GOVC_INSECURE: ((GOVC.INSECURE))
      GOVC_PASSWORD: ((GOVC.PASSWORD))
      GOVC_URL: ((GOVC.URL))
      GOVC_USERNAME: ((GOVC.USERNAME))
      GOVC_RESOURCE_POOL: ((GOVC.RESOURCE_POOL))
      GOVC_DATASTORE: ((GOVC.DATASTORE)) 
      GOVC_DATACENTER: ((GOVC.DATACENTER)) 
      GOVC_NETWORK: ((GOVC.NETWORK))
      PPDM_VMNAME: ((PPDM.VMNAME))
