s3_env: &s3_env
  access_key_id: ((s3_access_key_id))
  endpoint:  ((s3_endpoint))
  region_name: ((s3_region_name))
  secret_access_key: ((s3_secret_access_key))

credhub_env: &credhub_env
  CREDHUB_CLIENT: ((credhub-client))
  CREDHUB_SECRET: ((credhub-secret))
  CREDHUB_SERVER: ((credhub-server))
  PREFIX: /concourse/main/((foundation))
  CREDHUB_CA_CERT: ((credhub-ca-cert.certificate))

stage_steps: &stage_steps
  steps:
    - get: platform-automation-image
      tags: ((tags))
      params:
        unpack: true
    - get: platform-automation-tasks
      tags: ((tags))
      params:
        unpack: true
    - get: templates
      tags: ((tags))
    - get: variable
      tags: ((tags))


stage_config: &stage_config
  image: platform-automation-image
  file: platform-automation-tasks/tasks/staged-config.yml
  input_mapping:
    env: variable

do_config_commit: &do_config_commit
  image: platform-automation-image
  file: platform-automation-tasks/tasks/make-git-commit.yml
  input_mapping:
    repository: variable
    file-source: generated-config
  output_mapping:
    repository-commit: variable-commit

do_state_commit: &do_state_commit
  tags: ((tags))
  image: platform-automation-image
  file: platform-automation-tasks/tasks/make-git-commit.yml
  input_mapping:
    repository: variable
    file-source: generated-state
  output_mapping:
    repository-commit: variable-commit




git_commit_env: &git_commit_env
  GIT_AUTHOR_EMAIL: "pks-pipeline-bot@ebottnet.de"
  GIT_AUTHOR_NAME: "Platform Automation Bot"
  COMMIT_MESSAGE: 'Staged  Config Writer'


slack_start_param: &slack_start_param
  text: |
    Job $BUILD_JOB_NAME started with ID $BUILD_ID for 
    build $BUILD_NAME for team $BUILD_TEAM_NAME at
    $ATC_EXTERNAL_URL using pipeline  $BUILD_PIPELINE_NAME
    see $ATC_EXTERNAL_URL/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME
    for details
  icon_emoji: ":concourse-started:"

slack_succeeded_param: &slack_succeeded_param
  text: |
    Job $BUILD_JOB_NAME succeeded with ID $BUILD_ID for 
    build $BUILD_NAME for team $BUILD_TEAM_NAME at
    $ATC_EXTERNAL_URL using pipeline  $BUILD_PIPELINE_NAME    
    see $ATC_EXTERNAL_URL/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME
    for details
  icon_emoji: ":concourse-succeeded:"

slack_failed_param: &slack_failed_param
  text: |
    Job $BUILD_JOB_NAME failed with ID $BUILD_ID for 
    build $BUILD_NAME for team $BUILD_TEAM_NAME at
    $ATC_EXTERNAL_URL using pipeline  $BUILD_PIPELINE_NAME
    see $ATC_EXTERNAL_URL/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME
    for details
  icon_emoji: ":concourse-failed:"

interpolate-product-downloads: &interpolate-product-downloads
  tags: ((tags))      
  image: platform-automation-image
  file: platform-automation-tasks/tasks/credhub-interpolate.yml
  params:
    <<: *credhub_env
    INTERPOLATION_PATHS: "download-product-configs/((pks.version))"
  input_mapping:
    files: templates
  output_mapping:
    interpolated-files: interpolated-product-downloads

interpolate-product-templates: &interpolate-product-templates
  tags: ((tags))      
  image: platform-automation-image
  file: platform-automation-tasks/tasks/credhub-interpolate.yml
  params:
    <<: *credhub_env
    INTERPOLATION_PATHS: product-configs/((pks.version))
    SKIP_MISSING: true
  input_mapping:
    files: templates
  output_mapping:
    interpolated-files: interpolated-product-templates


interpolate-om-configuration: &interpolate-om-configuration
  tags: ((tags))      
  image: platform-automation-image
  file: platform-automation-tasks/tasks/credhub-interpolate.yml
  params:
    <<: *credhub_env
    INTERPOLATION_PATHS: ((foundation))/config/opsman.yml
    SKIP_MISSING: true
  input_mapping:
    files: variable
  output_mapping:
    interpolated-files: interpolated-om-configuration

resource_types:
- name: pivnet
  tags: ((tags))  
  type: docker-image
  source:
    repository: pivotalcf/pivnet-resource
    tag: latest-final
#- name: slack-notification
#  type: docker-image
#  source:
#    repository: cfcommunity/slack-notification-resource    
display:
  background_image: https://www.linux.com/wp-content/uploads/2019/08/kubernetes-cluster.jpg
resources:
# triggers
- name: daily-trigger
  tags: ((tags))  
  icon: calendar-clock
  type: time
  source:
    interval: 24h


- name: one-time-trigger
  tags: ((tags))  
  icon: calendar-clock
  type: time
  source:
    interval: 999999h

- name: after-midnight
  tags: ((tags))  
  type: time
  source:
    start: 01:00 AM
    stop: ((after_midnight_end))
    interval: 24h
    location: Europe/Berlin 
#- name: notify
#  type: slack-notification
#  source:
#    url: ((slack-webhook))
- name: installation
  tags: ((tags))  
  icon: cloud-download
  type: s3
  source:
    <<: *s3_env
    bucket: ((buckets_installation))
    regexp: ((foundation))/installation-(.*).zip    
- name: certstate
  tags: ((tags))  
  icon: cloud-download
  type: s3
  source:
    <<: *s3_env
    bucket: ((buckets_installation))
    regexp: ((foundation))/((pks.fqdn))-(.*).pem   
- name: platform-automation-pivnet
  tags: ((tags))  
  type: pivnet
  source:
    api_token: ((pivnet-token))
    product_slug: platform-automation
    product_version: 5\.*\.(.*)
    sort_by: semver

- name: platform-automation-tasks
  tags: ((tags))  
  icon: cloud-download
  type: s3
  source:
    <<: *s3_env
    bucket: ((buckets_pivnet_tasks))
    regexp: platform-automation-tasks-(.*).zip

- name: platform-automation-image
  tags: ((tags))  
  icon: cloud-download
  type: s3
  source:
    <<: *s3_env
    bucket: ((buckets_pivnet_image))
    regexp: platform-automation-image-(.*).tgz

- name: additional-tasks
  tags: ((tags))  
  icon: cloud-download
  type: s3
  source:
    <<: *s3_env
    bucket: ((buckets_pivnet_tasks))
    regexp: additional-tasks-(.*).zip
## core resources
- name: templates
  icon: github
  tags: ((tags))  
  type: git  
  source:
    uri: ((template-repo))
    private_key: ((template-deploy-key.private_key))
    branch: master
- name: pfsense-modules
  tags: ((tags))  
  icon: github
  type: git  
  source:
    uri: git@github.com:bottkars/pfsense-modules.git
    private_key: ((template-deploy-key.private_key))
    branch: main    
- name: variable
  tags: ((tags))  
  icon: github
  type: git  
  source:
    uri: ((variable-repo))
    private_key: ((variable-deploy-key.private_key))
    branch: master
    paths:
    - ((foundation))/vars/pivotal-container-service-vars.yml
    - ((foundation))/vars/director-vars.yml
    - ((foundation))/vars/harbor-container-registry-vars.yml
    - ((foundation))/state/state.yml
    - ((foundation))/config/opsman.yml

## product resources
- name: opsman-product
  tags: ((tags))  
  type: s3
  source:
    <<: *s3_env
    bucket: ((buckets_pivnet_products))
    regexp: \[ops-manager,(.*)\].*.ova

- name: pivotal-container-service-stemcell
  tags: ((tags))  
  icon: cloud-download
  type: s3
  source:
    <<: *s3_env
    bucket: ((buckets_pivnet_products))
    regexp: pivotal-container-service-stemcell/\[stemcells-ubuntu-xenial,(.*)\]bosh-stemcell-.*-((iaas)).*\.tgz

- name: pivotal-container-service-stemcell-windows
  icon: cloud-download
  tags: ((tags))  
  type: s3
  source:
    <<: *s3_env
    bucket: windows-stemcell
    regexp: stemcell/bosh-stemcell-(.*)-vsphere-esxi-windows2019-go_agent.tgz
#    regexp: stemcells/\[stemcells-windows-server-internal,(.*)\]bosh-stemcell-.*-vsphere-esxi-windows2019-go_agent.tgz

- name: pivotal-container-service-product
  icon: cloud-download
  tags: ((tags))  
  type: s3
  source:
    <<: *s3_env
    bucket: ((buckets_pivnet_products))
    regexp: pivotal-container-service-product/\[pivotal-container-service,(.*)\]pivotal-container-service-.*.pivotal

- name: pivotal-container-service-cli
  icon: cloud-download
  tags: ((tags))  
  type: s3
  source:
    <<: *s3_env
    bucket: ((buckets_pivnet_products))
    regexp: pivotal-container-service-product/\[pivotal-container-service,(.*)\]pks-linux-amd64*
# pks-linux-amd64-1.4.0-build.230
- name: harbor-container-registry-stemcell
  icon: cloud-download
  tags: ((tags))  
  type: s3
  source:
    <<: *s3_env
    bucket: ((buckets_pivnet_products))
    regexp: harbor-container-registry-stemcell/\[stemcells-ubuntu-xenial,(.*)\]bosh-stemcell-.*-((iaas)).*\.tgz

- name: harbor-container-registry-product
  icon: cloud-download
  tags: ((tags))  
  type: s3
  source:
    <<: *s3_env
    bucket: ((buckets_pivnet_products))
    regexp: harbor-container-registry-product/\[harbor-container-registry,(.*)\]harbor-container-registry-.*.pivotal

jobs:
- name: get-platform-automation
  plan:
  - in_parallel:
    - get: after-midnight
      trigger: true
    - get: platform-automation-pivnet
      tags: ((tags))
      trigger: true
  - in_parallel:
    - put: platform-automation-tasks
      tags: ((tags))
      params:
        file: platform-automation-pivnet/*tasks*.zip
    - put: platform-automation-image
      tags: ((tags))
      params:
        file: platform-automation-pivnet/*image*.tgz
- name: get-opsman
  serial_groups: [ get-products ]
  plan:
  - in_parallel:
    - get: after-midnight
      trigger: true
    - get: platform-automation-image
      tags: ((tags))
      params:
        unpack: true
    - get: platform-automation-tasks
      tags: ((tags))
      params:
        unpack: true
    - get: templates
      tags: ((tags))
  - task: interpolate-product-downloads
    <<: *interpolate-product-downloads
  - task: download-opsman-pivnet
    tags: ((tags))
    image: platform-automation-image
    file: platform-automation-tasks/tasks/download-product.yml
    input_mapping:
      config: interpolated-product-downloads      
    params:
      CONFIG_FILE: download-product-configs/((pks.version))/((iaas))/download-opsman.yml
  - in_parallel:
    - put: opsman-product
      tags: ((tags))
      params:
        file: downloaded-product/*

- name: get-pivotal-container-service
  serial: true
  serial_groups: [ get-products ]
  plan:
  - in_parallel:
    - get: after-midnight
      trigger: true
    - get: platform-automation-image
      tags: ((tags))
      params:
        unpack: true
    - get: platform-automation-tasks
      tags: ((tags))
      params:
        unpack: true
    - get: templates
      tags: ((tags))
  - task: interpolate-product-downloads
    <<: *interpolate-product-downloads
  - task: download-pivotal-container-service-product-and-stemcell
    tags: ((tags))
    image: platform-automation-image
    file: platform-automation-tasks/tasks/download-product.yml
    params:
      CONFIG_FILE: download-product-configs/((pks.version))/download-pivotal-container-service.yml
    input_mapping:
      config: interpolated-product-downloads
    output_mapping: {downloaded-stemcell: pivotal-container-service-stemcell}
  - in_parallel:
    - put: pivotal-container-service-product
      tags: ((tags))
      params:
        file: downloaded-product/*.pivotal
    - put: pivotal-container-service-stemcell
      tags: ((tags))
      params:
        file: pivotal-container-service-stemcell/*.tgz

- name: get-pivotal-container-service-cli
  serial: true
  serial_groups: [ get-products ]
  plan:
  - in_parallel:
    # - get: after-midnight
    #  trigger: true
    - get: platform-automation-image
      tags: ((tags))
      params:
        unpack: true
    - get: platform-automation-tasks
      tags: ((tags))
      params:
        unpack: true
    - get: templates
      tags: ((tags))
  - task: interpolate-product-downloads
    <<: *interpolate-product-downloads
  - task: download-pivotal-container-service-cli
    image: platform-automation-image
    file: platform-automation-tasks/tasks/download-product.yml
    params:
      CONFIG_FILE: download-product-configs/((pks.version))/download-pivotal-container-service-cli.yml
    input_mapping:
      config: interpolated-product-downloads
  - in_parallel:
    - put: pivotal-container-service-cli
      params:
        file: downloaded-product/*pks-linux-amd64*


- name: get-harbor-container-registry
  serial: true
  serial_groups: [ get-products ]
  plan:
  - in_parallel:
    - get: after-midnight
      trigger: true
    - get: platform-automation-image
      tags: ((tags))
      params:
        unpack: true
    - get: platform-automation-tasks
      tags: ((tags))
      params:
        unpack: true
    - get: templates
      tags: ((tags))
  - task: interpolate-product-downloads
    <<: *interpolate-product-downloads
  - task: download-harbor-container-registry-product-and-stemcell
    tags: ((tags))
    image: platform-automation-image
    file: platform-automation-tasks/tasks/download-product.yml
    params:
      CONFIG_FILE: download-product-configs/((pks.version))/download-harbor-container-registry.yml
    input_mapping:
      config: interpolated-product-downloads
    output_mapping: {downloaded-stemcell: harbor-container-registry-stemcell}
  - in_parallel:
    - put: harbor-container-registry-product
      tags: ((tags))
      params:
        file: downloaded-product/*.pivotal
    - put: harbor-container-registry-stemcell
      tags: ((tags))
      params:
        file: harbor-container-registry-stemcell/*.tgz

### get staged configs
- name: staged-pivotal-container-service-config
  serial_groups:
  - staged-configs
  plan:
  - in_parallel:
      <<: *stage_steps
  - task: staged-config
    <<: *stage_config
    params:
      PRODUCT_NAME: pivotal-container-service
      ENV_FILE: ((foundation))/env/env.yml
      SUBSTITUTE_CREDENTIALS_WITH_PLACEHOLDERS: false
    ensure: #&make-config-commit
      do:
        - task: make-commit
          <<: *do_config_commit
          params:
            FILE_SOURCE_PATH: pivotal-container-service.yml
            FILE_DESTINATION_PATH: ((foundation))/generated-config/pivotal-container-service.yml
            <<: *git_commit_env
        - put: variable
          params:
            repository: variable-commit
            merge: true

- name: staged-pas-for-kubernetes-config
  serial_groups:
  - staged-configs
  plan:
  - in_parallel:
      <<: *stage_steps
  - task: staged-config
    <<: *stage_config
    params:
      PRODUCT_NAME: pas-for-kubernetes
      ENV_FILE: ((foundation))/env/env.yml
      SUBSTITUTE_CREDENTIALS_WITH_PLACEHOLDERS: false
    ensure: #&make-config-commit
      do:
        - task: make-commit
          <<: *do_config_commit
          params:
            FILE_SOURCE_PATH: pas-for-kubernetes.yml
            FILE_DESTINATION_PATH: ((foundation))/generated-config/pas-for-kubernetes.yml
            <<: *git_commit_env
        - put: variable
          params:
            repository: variable-commit
            merge: true

- name: staged-harbor-container-registry-config
  serial_groups:
  - staged-configs
  plan:
  - in_parallel:
     <<: *stage_steps
  - task: staged-config
    <<: *stage_config
    params:
      PRODUCT_NAME: harbor-container-registry
      ENV_FILE: ((foundation))/env/env.yml
      SUBSTITUTE_CREDENTIALS_WITH_PLACEHOLDERS: false
    ensure: #&make-config-commit
      do:
        - task: make-commit
          <<: *do_config_commit
          params:
            FILE_SOURCE_PATH: harbor-container-registry.yml
            FILE_DESTINATION_PATH: ((foundation))/generated-config/harbor-container-registry.yml
            <<: *git_commit_env
        - put: variable
          params:
            repository: variable-commit
            merge: true

- name: staged-director-config
  serial: true
  serial_groups: [ staged-products ]
  plan:
  - in_parallel:
     <<: *stage_steps
  - task: staged-director-config
    image: platform-automation-image
    file: platform-automation-tasks/tasks/staged-director-config.yml
    input_mapping:
      env: variable
    params:
      ENV_FILE: ((foundation))/env/env.yml
      SUBSTITUTE_CREDENTIALS_WITH_PLACEHOLDERS: false
    ensure: #&make-config-commit
      do:
        - task: make-commit
          <<: *do_config_commit
          params:
            FILE_SOURCE_PATH: director.yml
            FILE_DESTINATION_PATH: ((foundation))/generated-config/director.yml
            <<: *git_commit_env
        - put: variable
          params:
            repository: variable-commit
            merge: true
              
- name: export-installation
  serial: true
  plan:
  - in_parallel:
    - get: daily-trigger
      trigger: true
    - get: platform-automation-image
      tags: ((tags))      
      params:
        unpack: true
#      passed: [ install-opsman]
    - get: platform-automation-tasks
      tags: ((tags))      
      params:
        unpack: true
    - get: opsman-product
      trigger: true
      params:
        skip_download: "true"       
    - get: templates
      tags: ((tags))      
    - get: variable
      tags: ((tags))      
    - get: one-time-trigger
      tags: ((tags))      
      passed: [ install-opsman ]
  - task: export-installation
    tags: ((tags))      
    image: platform-automation-image
    file: platform-automation-tasks/tasks/export-installation.yml
    input_mapping:
      env: variable
    params:
      ENV_FILE: ((foundation))/env/env.yml
      INSTALLATION_FILE: installation-$timestamp.zip
  - put: installation
    tags: ((tags))      
    params:
      file: installation/installation*.zip
## upload and stage

- name: upload-and-stage-pivotal-container-service
  serial: true
  serial_groups:
  - upload-and-stage
  - install
  plan:
  - in_parallel:
      - get: platform-automation-image
        tags: ((tags))
        params:
          unpack: true
        passed:
          - upgrade-opsman
#          - get-pivotal-container-service           
        trigger: true  
      - get: platform-automation-tasks
        tags: ((tags))
        params:
          unpack: true
      - get: templates
        tags: ((tags))
      - get: variable
        tags: ((tags))
        trigger: false
      - get: pivotal-container-service-product
        tags: ((tags))
        trigger: true
  - get: pivotal-container-service-stemcell-windows  
    tags: ((tags))
    trigger: true
  - get: pivotal-container-service-stemcell
    tags: ((tags))
    trigger: true    
  - task: interpolate-product-downloads
    <<: *interpolate-product-downloads       
  - task: download-pivotal-container-service
    tags: ((tags))
    image: platform-automation-image
    file: platform-automation-tasks/tasks/download-product.yml
    params:
      SOURCE: s3    
      CONFIG_FILE: download-product-configs/((pks.version))/download-pivotal-container-service.yml
    input_mapping:
      config: interpolated-product-downloads
    output_mapping:
      downloaded-product: pivotal-container-service-product
      downloaded-stemcell: pivotal-container-service-stemcell
  - task: upload-product
    tags: ((tags))
    image: platform-automation-image
    file: platform-automation-tasks/tasks/upload-product.yml
    input_mapping:
      product: pivotal-container-service-product
      env: variable
    params:
      ENV_FILE: ((foundation))/env/env.yml
  - task: upload-pivotal-container-service-stemcell-windows
    tags: ((tags))
    image: platform-automation-image
    file: platform-automation-tasks/tasks/upload-stemcell.yml
    input_mapping:
      env: variable
      stemcell: pivotal-container-service-stemcell-windows
    params:
      ENV_FILE: ((foundation))/env/env.yml      
  - task: upload-pivotal-container-service-stemcell
    tags: ((tags))
    image: platform-automation-image
    file: platform-automation-tasks/tasks/upload-stemcell.yml
    input_mapping:
      env: variable
      stemcell: pivotal-container-service-stemcell
    params:
      ENV_FILE: ((foundation))/env/env.yml
  - task: stage-product
    tags: ((tags))
    image: platform-automation-image
    file: platform-automation-tasks/tasks/stage-product.yml
    input_mapping:
      product: pivotal-container-service-product
      env: variable
    params:
      ENV_FILE: ((foundation))/env/env.yml   


- name: upload-and-stage-harbor-container-registry
  serial: true
  serial_groups:
  - upload-and-stage
  - install
  plan:
  - in_parallel:
    - get: platform-automation-image
      tags: ((tags))
      params:
        unpack: true
      passed:
      - upgrade-opsman
#     - get-harbor-container-registry
      trigger: true          
    - get: platform-automation-tasks
      tags: ((tags))
      params:
        unpack: true
    - get: harbor-container-registry-stemcell
      tags: ((tags))
      trigger: true        
    - get: harbor-container-registry-product
      tags: ((tags))
      trigger: true
    - get: templates
      tags: ((tags))
    - get: variable
      tags: ((tags))
      trigger: false
  - task: interpolate-product-downloads
    <<: *interpolate-product-downloads       
  - task: download-harbor-container-registry
    tags: ((tags))
    image: platform-automation-image
    file: platform-automation-tasks/tasks/download-product.yml
    params:
      SOURCE: s3
      CONFIG_FILE: download-product-configs/((pks.version))/download-harbor-container-registry.yml
    input_mapping:
      config: interpolated-product-downloads
    output_mapping:
      downloaded-product: harbor-container-registry-product
      downloaded-stemcell: harbor-container-registry-stemcell
  - task: upload-product
    tags: ((tags))
    image: platform-automation-image
    file: platform-automation-tasks/tasks/upload-product.yml
    input_mapping:
      product: harbor-container-registry-product
      env: variable
    params:
      ENV_FILE: ((foundation))/env/env.yml
  - task: upload-harbor-container-registry-stemcell
    tags: ((tags))
    image: platform-automation-image
    file: platform-automation-tasks/tasks/upload-stemcell.yml
    input_mapping:
      env: variable
      stemcell: harbor-container-registry-stemcell
    params:
      ENV_FILE: ((foundation))/env/env.yml
  - task: stage-product
    tags: ((tags))
    image: platform-automation-image
    file: platform-automation-tasks/tasks/stage-product.yml
    input_mapping:
      product: harbor-container-registry-product
      env: variable
    params:
      ENV_FILE: ((foundation))/env/env.yml   

- name: configure-director
  serial: true
  serial_groups: [ install ]
  plan:
  - in_parallel:
    - get: platform-automation-image
      tags: ((tags))
      params:
        unpack: true
    - get: platform-automation-tasks
      tags: ((tags))
      params:
        unpack: true
    - get: additional-tasks
      params:
        unpack: true    
    - get: templates
      tags: ((tags))
    - get: variable
  - task: interpolate-product-templates
    <<: *interpolate-product-templates                
  - task: configure-director
    image: platform-automation-image
    file: platform-automation-tasks/tasks/configure-director.yml
    input_mapping:
      config: interpolated-product-templates
      env: variable
      vars: variable
    params:
      VARS_FILES: vars/((foundation))/vars/director-vars.yml
      ENV_FILE: ((foundation))/env/env.yml
      DIRECTOR_CONFIG_FILE: product-configs/((pks.version))/((iaas))/director.yml        
  - task: apply-director-changes
    tags: ((tags))
    image: platform-automation-image
    file: platform-automation-tasks/tasks/apply-director-changes.yml
    input_mapping:
      env: variable
    params:
      ENV_FILE: ((foundation))/env/env.yml

###
- name: install-opsman
  serial: true
  serial_groups: [ install ]
  plan:
  - in_parallel:
#    - get: opsman-product
 #     tags: ((tags))
    - get: platform-automation-image
      tags: ((tags))
      params:
        unpack: true
    - get: one-time-trigger
      tags: ((tags))
      trigger: true
    - get: platform-automation-tasks
      tags: ((tags))
      params:
        unpack: true
    - get: additional-tasks
      tags: ((tags))
      params:
        unpack: true    
    - get: templates
      tags: ((tags))
  - task: interpolate-product-downloads
    <<: *interpolate-product-downloads
  - task: download-opsman-s3
    tags: ((tags))
    image: platform-automation-image
    file: platform-automation-tasks/tasks/download-product.yml
    params:
      SOURCE: s3
      CONFIG_FILE: download-product-configs/((pks.version))/((iaas))/download-opsman.yml
    input_mapping:
      config: interpolated-product-downloads
    output_mapping:
      downloaded-product: opsman-product
  - get: variable
    tags: ((tags))
  - task: interpolate-product-templates
    tags: ((tags))
    <<: *interpolate-product-templates     
  - task: interpolate-om-configuration
    tags: ((tags))
    <<: *interpolate-om-configuration          
  - task: create-vm
    tags: ((tags))
    image: platform-automation-image
    file: platform-automation-tasks/tasks/create-vm.yml
    input_mapping:
      image: opsman-product
      state: variable      
      config: interpolated-om-configuration
      env: variable
      vars: variable
    params:
      ENV_FILE: ((foundation))/env/env.yml
      OPSMAN_CONFIG_FILE: ((foundation))/config/opsman.yml
      STATE_FILE: ((foundation))/state/state.yml
    ensure: #&make-config-commit
        do:
        - task: make-commit
          <<: *do_state_commit
          params:
            FILE_SOURCE_PATH: state.yml
            FILE_DESTINATION_PATH: ((foundation))/state/state.yml
            <<: *git_commit_env
        - put: variable
          tags: ((tags))
          params:
            repository: variable-commit
            merge: true          

  - task: configure-authentication
    tags: ((tags))
    image: platform-automation-image
    file: platform-automation-tasks/tasks/configure-((auth_type))authentication.yml
    attempts: 10
    input_mapping:
      env: variable
      config: variable
    params:
      ENV_FILE: ((foundation))/env/env.yml
      AUTH_CONFIG_FILE: ((foundation))/config/auth.yml 
#  - task: update om certficates
#    tags: ((tags))
#    image: platform-automation-image
#    file: additional-tasks/tasks/update-ssl-certificate.yml
#    attempts: 10
#    input_mapping:
#      env: variable
#    params:
#      ENV_FILE: ((foundation))/env/env.yml
#      CERTIFICATE_PEM: ((pks_cert.certificate))
#      KEY_PEM: ((pks_cert.private_key))    
  - task: configure-director
    tags: ((tags))
    attempts: 3    
    image: platform-automation-image
    file: platform-automation-tasks/tasks/configure-director.yml
    input_mapping:
      config: interpolated-product-templates
      env: variable
      vars: variable
    params:
      VARS_FILES: vars/((foundation))/vars/director-vars.yml
      ENV_FILE: ((foundation))/env/env.yml
      DIRECTOR_CONFIG_FILE: product-configs/((pks.version))/((iaas))/director((overlay_type)).yml        
  - task: apply-director-changes
    tags: ((tags))
    attempts: 3    
    image: platform-automation-image
    file: platform-automation-tasks/tasks/apply-director-changes.yml
    input_mapping:
      env: variable
    params:
      ENV_FILE: ((foundation))/env/env.yml
### upgraders
- name: upgrade-opsman
  serial: true
  serial_groups: [ install ]
  plan:

  - in_parallel:
    - get: one-time-trigger
      tags: ((tags))      
      passed: [ install-opsman ]
    - get: platform-automation-image
      tags: ((tags))      
      params:
        unpack: true
    - get: platform-automation-tasks
      tags: ((tags))      
      params:
        unpack: true
    - get: opsman-product
      tags: ((tags))      
      trigger: true
      passed:
      - export-installation
    - get: installation
      tags: ((tags))      
      passed: [ export-installation ]
    - get: templates
      tags: ((tags))      
    - get: variable
      tags: ((tags))      
  - task: interpolate-product-templates
    <<: *interpolate-product-templates          
  - task: interpolate-product-downloads
    <<: *interpolate-product-downloads
  - task: interpolate-om-configuration
    tags: ((tags))
    <<: *interpolate-om-configuration          
  - task: upgrade-opsman
    tags: ((tags))      
    image: platform-automation-image
    file: platform-automation-tasks/tasks/upgrade-opsman.yml
    input_mapping:
     image: opsman-product
     state: variable
     config: interpolated-om-configuration
     env: variable
     vars: variable
    params:
     # VARS_FILES: vars/((foundation))/vars/opsman-vars.yml
     ENV_FILE: ((foundation))/env/env.yml
     OPSMAN_CONFIG_FILE: ((foundation))/config/opsman.yml
     STATE_FILE: ((foundation))/state/state.yml
    ensure: #&make-config-commit
        do:
        - task: make-commit
          <<: *do_state_commit
          params:
            FILE_SOURCE_PATH: state.yml
            FILE_DESTINATION_PATH: ((foundation))/state/state.yml
            <<: *git_commit_env
  - task: apply-director-changes
    tags: ((tags))      
    image: platform-automation-image
    file: platform-automation-tasks/tasks/apply-director-changes.yml
    input_mapping:
      env: variable
    params:
      ENV_FILE: ((foundation))/env/env.yml
## configure products

- name: configure-pivotal-container-service
  serial_groups:
  - configure-products
  serial: true
  plan:
  - in_parallel:
    #- get: certstate  
    #  trigger: true
    #  passed:
    #  - issue-pks-cert-request
    #  - get-certs-from-pfsense  
    - get: platform-automation-image
      tags: ((tags))      
      params:
        unpack: true
    - get: platform-automation-tasks
      tags: ((tags))      
      params:
        unpack: true
    - get: templates
      tags: ((tags))      
    - get: variable
      tags: ((tags))    
      trigger: false
    - get: pivotal-container-service-product
      trigger: true
      params:
        skip_download: "true"
      passed:
        - upload-and-stage-pivotal-container-service
  - task: interpolate-product-templates
    <<: *interpolate-product-templates
  - task: configure-pivotal-container-service-cloud-provider
    tags: ((tags))      
    image: platform-automation-image
    file: platform-automation-tasks/tasks/configure-product.yml
    input_mapping:
      config: interpolated-product-templates
      env: variable
      vars: variable
    params:
      CONFIG_FILE: product-configs/((pks.version))/((iaas))/pivotal-container-service((overlay_type)).yml
      VARS_FILES: vars/((foundation))/vars/pivotal-container-service-vars.yml
      ENV_FILE: ((foundation))/env/env.yml 
  - task: assign-multi-stemcell
    tags: ((tags))      
    image: platform-automation-image
    file: platform-automation-tasks/tasks/assign-multi-stemcell.yml
    input_mapping:
      config: interpolated-product-templates
      env: variable
      vars: variable
    params:
      ENV_FILE: ((foundation))/env/env.yml
      CONFIG_FILE: product-configs/((pks.version))/((iaas))/pivotal-container-service-multi-stemcell.yml

- name: configure-harbor-container-registry
  serial_groups:
  - configure-products
  serial: true
  plan:
  - in_parallel:
    #- get: certstate  
    #  trigger: true
    #  passed:
    #  - issue-pks-cert-request
    #  - get-certs-from-pfsense
    - get: platform-automation-image
      tags: ((tags))      
      params:
        unpack: true
      passed:
        - upload-and-stage-harbor-container-registry
      trigger: true
    - get: platform-automation-tasks
      tags: ((tags))      
      params:
        unpack: true
    - get: harbor-container-registry-product
      params:
        skip_download: "true"    
      tags: ((tags)) 
      trigger: true     
    - get: templates
      tags: ((tags))      
    - get: variable
      tags: ((tags))      
  - task: interpolate-product-templates
    <<: *interpolate-product-templates
  - task: configure-harbor-container-registry
    tags: ((tags))      
    image: platform-automation-image
    file: platform-automation-tasks/tasks/configure-product.yml
    input_mapping:
      config: interpolated-product-templates
      env: variable
      vars: variable
    params:
      CONFIG_FILE: product-configs/((pks.version))/((iaas))/harbor-container-registry.yml
      VARS_FILES: vars/((foundation))/vars/harbor-container-registry-vars.yml
      ENV_FILE: ((foundation))/env/env.yml 
        
- name: apply-product-changes
  serial_groups:
  - install
  serial: true
  plan:
  - in_parallel:
      #- get: certstate  
      #  trigger: true
      #  passed:
      #  - configure-harbor-container-registry
      #  - configure-pivotal-container-service
      - get: platform-automation-tasks
        tags: ((tags))      
        params:
          unpack: true
      - get: platform-automation-image
        tags: ((tags))      
        params:
          unpack: true
      - get: variable
        tags: ((tags))
        passed: # ((passed_configs))
          - configure-pivotal-container-service
          - configure-harbor-container-registry          
        trigger: true 
      - get: pivotal-container-service-product
        trigger: true
        params:
         skip_download: "true"       
      - get: harbor-container-registry-product
        trigger: true
        params:
         skip_download: "true"       
        passed: # ((passed_configs))
          - configure-harbor-container-registry
  - task: apply-product-changes
    tags: ((tags))      
    image: platform-automation-image
    file: platform-automation-tasks/tasks/apply-changes.yml
    input_mapping:
      env: variable
    params:
      ENV_FILE: ((foundation))/env/env.yml

- name: test-interpolate-director
  plan:
  - get: variable
  - get: templates
  - get: platform-automation-image
    params:
      unpack: true
  - get: platform-automation-tasks
    params:
      unpack: true
  - task: interpolate
    image: platform-automation-image
    file: platform-automation-tasks/tasks/test-interpolate.yml
    input_mapping:
      config: templates
      vars: variable
    params:
      CONFIG_FILE: product-configs/((pks.version))/((iaas))/director((overlay_type)).yml
      VARS_FILES: vars/((foundation))/vars/director-vars.yml
      SKIP_MISSING: true    

        
- name: test-interpolate-pivotal-container-service
  plan:
  - get: variable
  - get: templates
  - get: platform-automation-image
    params:
      unpack: true
  - get: platform-automation-tasks
    params:
      unpack: true
  - task: interpolate
    image: platform-automation-image
    file: platform-automation-tasks/tasks/test-interpolate.yml
    input_mapping:
      config: templates
      vars: variable
    params:
      CONFIG_FILE: product-configs/((pks.version))/((iaas))/pivotal-container-service((overlay_type)).yml
      VARS_FILES: vars/((foundation))/vars/pivotal-container-service-vars.yml
      SKIP_MISSING: true    
- name: test-interpolate-harbor-container-registry
  plan:
  - get: variable
  - get: templates
  - get: platform-automation-image
    params:
      unpack: true
  - get: platform-automation-tasks
    params:
      unpack: true
  - task: interpolate
    image: platform-automation-image
    file: platform-automation-tasks/tasks/test-interpolate.yml
    input_mapping:
      config: templates
      vars: variable
    params:
      CONFIG_FILE: product-configs/((pks.version))/((iaas))/harbor-container-registry.yml
      VARS_FILES: vars/((foundation))/vars/harbor-container-registry-vars.yml
      SKIP_MISSING: true    
- name: delete-installation
  serial: true
  plan:
  - in_parallel:
    - get: platform-automation-image
      tags: ((tags))
      params:
        unpack: true
    - get: platform-automation-tasks
      tags: ((tags))
      params:
        unpack: true
    - get: variable
      tags: ((tags))
  - task: delete-installation
    tags: ((tags))
    image: platform-automation-image
    file: platform-automation-tasks/tasks/delete-installation.yml
    input_mapping:
      env: variable
    params:
    # VARS_FILES: vars/((foundation))/vars/opsman-vars.yml
     ENV_FILE: ((foundation))/env/env.yml
  - task: interpolate-om-configuration
    tags: ((tags))
    <<: *interpolate-om-configuration       
  - task: delete-vm
    tags: ((tags))
    image: platform-automation-image
    file: platform-automation-tasks/tasks/delete-vm.yml
    input_mapping:
      state: variable      
      config: interpolated-om-configuration
      env: variable
      vars: variable
    params:
      ENV_FILE: ((foundation))/env/env.yml
      OPSMAN_CONFIG_FILE: ((foundation))/config/opsman.yml
      STATE_FILE: ((foundation))/state/state.yml
    ensure: #&put-state
        do:
        - task: make-commit
          <<: *do_state_commit
          params:
            FILE_SOURCE_PATH: state.yml
            FILE_DESTINATION_PATH: ((foundation))/state/state.yml
            <<: *git_commit_env
        - put: variable
          tags: ((tags))
          params:
            repository: variable-commit
            merge: true    

- name: add-pks-admin-user
  plan:
    - in_parallel:
      - get: platform-automation-image
        tags: ((tags))
        params:
          unpack: true
        trigger: true
        passed: 
        - apply-product-changes           
      - get: one-time-trigger
        tags: ((tags))
        trigger: true
      - get: variable  
        tags: ((tags))
      - get: platform-automation-tasks
        tags: ((tags))
        params:
          unpack: true
      - get: additional-tasks
        tags: ((tags))
        params:
          unpack: true        
    - task: create-pks-admin
      tags: ((tags))
      image: platform-automation-image
      file: additional-tasks/tasks/create_pks_admin.yml
      input_mapping:
        env: variable
      params:
        ENV_FILE: ((foundation))/env/env.yml
        KEY_FILE: ((foundation))/env/opsman.key
        # conatins the opsman private key
        PKS_USERNAME: ((pks.username))
        PKS_PASSWORD: ((pks.password))
        PKS_API_ENDPOINT: ((pks.api_endpoint))
        PKS_USER_EMAIL: ((pks.user_email))          


- name: create-pks-cluster
  plan:
    - in_parallel:
      - get: platform-automation-image
        tags: ((tags))
        params:
          unpack: true
        trigger: true
        passed: 
        - apply-product-changes           
      - get: one-time-trigger
        tags: ((tags))
        trigger: true
      - get: variable  
        tags: ((tags))
      - get: platform-automation-tasks
        tags: ((tags))
        params:
          unpack: true
      - get: additional-tasks
        tags: ((tags))
        params:
          unpack: true        
    - task: create-pks-cluster
      tags: ((tags))
      image: platform-automation-image
      file: additional-tasks/tasks/create_pks_cluster.yml
      input_mapping:
        env: variable
      params:
        ENV_FILE: ((foundation))/env/env.yml
        KEY_FILE: ((foundation))/env/opsman.key
        PKS_API_ENDPOINT: ((pks.api_endpoint))
        PKS_CLUSTERNAME: ((pks.clustername))
        PKS_MASTER_FQDN: ((pks.master_fqdn))
        WORKER_INSTANCES: ((pks.worker_instances))
        PKS_PLAN_NAME: ((pks.plan_name))
## service
- name: update-om-configuration
  serial: false
  serial_groups: [ install ]
  plan:
  - in_parallel:
    - get: platform-automation-image
      tags: ((tags))
      params:
        unpack: true
    - get: one-time-trigger
      tags: ((tags))
    - get: certstate
      tags: ((tags))  
      trigger: true
 #     passed:
 #      - issue-pks-cert-request
 #     - get-certs-from-pfsense
    - get: platform-automation-tasks
      tags: ((tags))
      params:
        unpack: true    
    - get: templates
      tags: ((tags))
    - get: variable
      tags: ((tags))     
  - task: interpolate-om-configuration
    <<: *interpolate-om-configuration    
  - task: update-om-configuration
    tags: ((tags))
    image: platform-automation-image
    file: platform-automation-tasks/tasks/configure-opsman.yml
    input_mapping:
      env: variable
      config: interpolated-om-configuration
    params:
      OPSMAN_CONFIG_FILE: ((foundation))/config/opsman.yml
      ENV_FILE: ((foundation))/env/env.yml
- name: issue-pks-cert-request
  serial: true
  serial_groups: [ install ]
  plan:
  - in_parallel:
    - get: platform-automation-image
      tags: ((tags))
      params:
        unpack: true
    - get: one-time-trigger
      tags: ((tags))
      trigger: false
    - get: pfsense-modules
      tags: ((tags))
      params:
        unpack: true    
  - task: request-new-certs-from-pfsense
    image: platform-automation-image
    file: pfsense-modules/ci/tasks/renew_cert.yml
    params:
      <<: *credhub_env
      CERT_ID: 613ef8fb888c5
      CA_ID: 612f34262f087
      STORED_CERT: pks_cer
      SUBJECT: ((pks.fqdn))
      PFSENSE_FQDN: pfsense.home.labbuildr.com
      PFSENSE_USERNAME: ((pfsense_user.username)) 
      PFSENSE_PASSWORD: ((pfsense_user.password))
    input_mapping:
      pfsense-modules: pfsense-modules
    output_mapping: {certificates: certificates}
  - put: certstate
    tags: ((tags))      
    params:
      file: certificates/((pks.fqdn))*.pem

- name: get-certs-from-pfsense
  serial: true
  serial_groups: [ install ]
  plan:
  - in_parallel:
    - get: platform-automation-image
      tags: ((tags))
      params:
        unpack: true
    - get: daily-trigger
      tags: ((tags))
      trigger: true
    - get: pfsense-modules
      tags: ((tags))
      params:
        unpack: true    
  - task: get-current-certs
    image: platform-automation-image
    file: pfsense-modules/ci/tasks/request_cert.yml
    params:
      <<: *credhub_env
      CERT_ID: 613ef8fb888c5
      CA_ID: 612f34262f087
      STORED_CERT: pks_cer
      SUBJECT: ((pks.fqdn))
      PFSENSE_FQDN: pfsense.home.labbuildr.com
      PFSENSE_USERNAME: ((pfsense_user.username)) 
      PFSENSE_PASSWORD: ((pfsense_user.password))
    input_mapping:
      pfsense-modules: pfsense-modules
    output_mapping: {certificates: certificates}
  - put: certstate
    tags: ((tags))      
    params:
      file: certificates/((pks.fqdn))*.pem


- name: get-controlplane-cert-expiration
  serial: true
  serial_groups: [ install ]
  plan:
  - in_parallel:
    - get: platform-automation-image
      tags: ((tags))
      params:
        unpack: true
    - get: daily-trigger
      tags: ((tags))
      trigger: true
    - get: pfsense-modules
      tags: ((tags))
      params:
        unpack: true  
  - across:
    - var: endpoints
      values: [vmw.control.home.labbuildr.com]      
    task: check-expiration
    image: platform-automation-image
    file: pfsense-modules/ci/tasks/check_cert_expiration.yml
    params:
      SUBJECT: ((.:endpoints))
      PORT: "443"
      EXPIRE_DAYS: "15"
    input_mapping:
      pfsense-modules: pfsense-modules


- name: get-harbor-cert-expiration
  serial: true
  serial_groups: [ install ]
  plan:
  - in_parallel:
    - get: platform-automation-image
      tags: ((tags))
      params:
        unpack: true
    - get: daily-trigger
      tags: ((tags))
      trigger: true
    - get: pfsense-modules
      tags: ((tags))
      params:
        unpack: true    
  - task: check-expiration
    image: platform-automation-image
    file: pfsense-modules/ci/tasks/check_cert_expiration.yml
    params:
      SUBJECT: harbor.((pks.fqdn))
      PORT: "443"
      EXPIRE_DAYS: "15"
    input_mapping:
      pfsense-modules: pfsense-modules
- name: get-pks-api-cert-expiration
  serial: true
  serial_groups: [ install ]
  plan:
  - in_parallel:
    - get: platform-automation-image
      tags: ((tags))
      params:
        unpack: true
    - get: daily-trigger
      tags: ((tags))
      trigger: true
    - get: pfsense-modules
      tags: ((tags))
      params:
        unpack: true    
  - task: check-expiration
    image: platform-automation-image
    file: pfsense-modules/ci/tasks/check_cert_expiration.yml
    params:
      SUBJECT: api.((pks.fqdn))
      PORT: "9021"
      EXPIRE_DAYS: "15"
    input_mapping:
      pfsense-modules: pfsense-modules
groups:
- name: full
  jobs:
    - install-opsman
    - upgrade-opsman
    - upload-and-stage-pivotal-container-service 
    - upload-and-stage-harbor-container-registry   
    - get-pivotal-container-service
    - get-harbor-container-registry
    - get-platform-automation
    - get-opsman
    - upload-and-stage-pivotal-container-service 
    - upload-and-stage-harbor-container-registry  
    - configure-pivotal-container-service
    - configure-harbor-container-registry
    - apply-product-changes 
    - add-pks-admin-user
    - create-pks-cluster
    - export-installation
- name: get-products
  jobs:
    - get-pivotal-container-service
    - get-harbor-container-registry
    - get-platform-automation
    - get-opsman
    - get-pivotal-container-service-cli
- name: upload-and-stage-products
  jobs:
    - upload-and-stage-pivotal-container-service 
    - upload-and-stage-harbor-container-registry 
- name: configure-products
  jobs:
    - configure-pivotal-container-service
    - configure-harbor-container-registry
    - apply-product-changes

- name: staged-configs
  jobs:
    - staged-harbor-container-registry-config
    - staged-pivotal-container-service-config
    - staged-pas-for-kubernetes-config
    - staged-director-config
    - export-installation
- name: test-interpolate
  jobs: 
    - test-interpolate-director
    - test-interpolate-pivotal-container-service
    - test-interpolate-harbor-container-registry  
    - configure-director  
- name: update-certificates
  jobs:
  - update-om-configuration
  - issue-pks-cert-request
  - get-certs-from-pfsense
  - configure-pivotal-container-service
  - configure-harbor-container-registry
  - apply-product-changes
  - get-harbor-cert-expiration
  - get-pks-api-cert-expiration
  - get-controlplane-cert-expiration
      
- name: delete
  jobs:
  - delete-installation   
